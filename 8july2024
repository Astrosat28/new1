import pandas as pd
from bs4 import BeautifulSoup
import pyodbc
import win32com.client

# Database connection details
database = 'mydb1'
server = 'AADITYA'
username = 'your_username'
password = 'your_password'

# Function to get the latest unread email content from Outlook
def get_latest_unread_email():
    outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
    inbox = outlook.GetDefaultFolder(6)  # 6 refers to the inbox
    messages = inbox.Items
    messages.Sort("[ReceivedTime]", True)  # Sort emails by received time in descending order
    unread_messages = messages.Restrict("[Unread] = True")
    
    for message in unread_messages:
        if message.Class == 43:  # Ensure it's a MailItem
            print("Processing unread email from: ", message.SenderEmailAddress)
            message.Unread = False  # Mark as read
            return message.HTMLBody

    return None

# Get the latest unread email content
html_content = get_latest_unread_email()

if html_content is None:
    print("No unread emails found.")
    exit()

# Parse the HTML content
soup = BeautifulSoup(html_content, 'html.parser')

# Find the table
table = soup.find('table')

if not table:
    print("No table found in the email content.")
    exit()

# Extract rows from the table
rows = table.find_all('tr')

# Function to process the table data
def process_table_data(rows):
    extracted_data = {}
    current_keys = []
    multiple_values = {"Current Status": [], "Date & Time": [], "Status Updates": []}

    for row in rows:
        cells = row.find_all('td')
        row_data = [cell.get_text(strip=True) for cell in cells]

        print(f"Processing row: {row_data}")

        if len(row_data) == 1:
            print("Ignoring row with only one cell")
            continue  # Ignore rows with only one cell
        elif len(row_data) == 2:
            key, value = row_data
            extracted_data[key] = value
            print(f"Key-Value pair added: {key} -> {value}")
        elif len(row_data) == 3:
            if not current_keys:
                current_keys = row_data
                for key in current_keys:
                    multiple_values[key] = []
                print(f"Header row set: {current_keys}")
            else:
                for key, value in zip(current_keys, row_data):
                    multiple_values[key].append(value)
                print(f"Data row added: {dict(zip(current_keys, row_data))}")

    return extracted_data, multiple_values

# Process the table data
processed_data, multiple_values = process_table_data(rows)

# Check the content of multiple_values
print("Multiple values collected:")
for key, values in multiple_values.items():
    print(f"{key}: {values}")

# Extract relevant data to be inserted
insert_data = (
    processed_data.get('Priority & Incident Number', None),
    processed_data.get('Incident Description (What happened?)', None),
    processed_data.get('Line of Business & Application Affected', None),
    processed_data.get('Business Impact', None),
    processed_data.get('Online/Batch', None),
    processed_data.get('Initial RCA', None),
    processed_data.get('Initial RCA - Why It happened?', None)
)

# Insert into SQL database
conn_str = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password};'
print("Connecting to the database...")
conn = pyodbc.connect(conn_str)
print("Connected to the database successfully.")
cursor = conn.cursor()

# Insert data into the main table
sql_main = '''
INSERT INTO dbo.firlookup (
    [Priority & Incident Number],
    [Incident Description (What happened?)],
    [Line of Business & Application Affected],
    [Business Impact],
    [Online/Batch],
    [Initial RCA],
    [Initial RCA - Why It happened?]
) OUTPUT INSERTED.ID VALUES (?, ?, ?, ?, ?, ?, ?)
'''

cursor.execute(sql_main, insert_data)

# Get the ID of the inserted row
main_id = cursor.fetchone()[0]
print(f"Inserted firlookup ID: {main_id}")

# Insert multiple values into the status table with duplicate check
sql_check = '''
SELECT COUNT(*) FROM dbo.status WHERE firlookup_id = ? AND [Current Status] = ? AND [Date & Time] = ? AND [Status Updates] = ?
'''

sql_status = '''
INSERT INTO dbo.status (
    firlookup_id,
    [Current Status],
    [Date & Time],
    [Status Updates]
) VALUES (?, ?, ?, ?)
'''

for i in range(len(multiple_values["Current Status"])):
    current_status = multiple_values["Current Status"][i]
    date_time = multiple_values["Date & Time"][i]
    status_updates = multiple_values["Status Updates"][i]
    
    # Debugging statement for the values being checked
    print(f"Checking for duplicates: {main_id}, {current_status}, {date_time}, {status_updates}")
    
    # Check for duplicates
    cursor.execute(sql_check, (main_id, current_status, date_time, status_updates))
    count = cursor.fetchone()[0]
    
    if count == 0:
        # Insert if not exists
        print(f"Inserting into status table: {main_id}, {current_status}, {date_time}, {status_updates}")
        cursor.execute(sql_status, (main_id, current_status, date_time, status_updates))
    else:
        print(f"Duplicate found for: {main_id}, {current_status}, {date_time}, {status_updates}")

conn.commit()
cursor.close()
conn.close()

print("Data inserted successfully.")

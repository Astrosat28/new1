import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgChartsModule } from 'ng2-charts';
import {
  ChartType,
  ChartData,
  ChartOptions,
  ChartConfiguration,
  Chart,
  ArcElement,
  Tooltip,
  Legend,
  Plugin
} from 'chart.js';

Chart.register(ArcElement, Tooltip, Legend); // Make sure Chart.js elements are registered

@Component({
  selector: 'app-v2',
  standalone: true,
  imports: [CommonModule, NgChartsModule],
  templateUrl: './v2.component.html',
  styleUrls: ['./v2.component.css']
})
export class V2Component {
  public pieChartLabels: string[] = ['non-axc', 'axc', 'out of scope', 'others'];

  public pieChartData: ChartData<'pie', number[], string> = {
    labels: this.pieChartLabels,
    datasets: [
      {
        data: [60, 20, 15, 5],
        backgroundColor: ['#28a745', '#007bff', '#ffc107', '#6c757d'],
        hoverOffset: 15 // ✅ Pie expands slightly on hover
      }
    ]
  };

  public pieChartType: 'pie' = 'pie';

  // ✅ Chart options including plugin for center text
  public pieChartOptions: ChartOptions<'pie'> = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      tooltip: {
        callbacks: {
          label: function (tooltipItem) {
            return `${tooltipItem.label}: ${tooltipItem.raw}%`;
          }
        }
      }
    }
  };

  // ✅ Center text plugin
public pieChartPlugins: Plugin<'pie'>[] = [
  {
    id: 'centerText',
    afterDraw(chart) {
      const ctx = chart.ctx;

      const meta = chart.getDatasetMeta(0);
      const arc = meta.data[0] as any;
      const centerX = arc.x;
      const centerY = arc.y;

      const outerRadius = arc.outerRadius || 100;
      const circleRadius = outerRadius * 0.6;

      // ✅ Draw white circle
      ctx.save();
      ctx.beginPath();
      ctx.arc(centerX, centerY, circleRadius, 0, 2 * Math.PI);
      ctx.fillStyle = '#ffffff';
      ctx.fill();
      ctx.closePath();

      // ✅ Draw centered text
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillStyle = '#333';

      ctx.font = 'bold 14px Arial';
      ctx.fillText('Total Apps', centerX, centerY - 12);

      const total = chart.data.datasets[0].data.reduce((a: number, b: number) => a + b, 0);
      ctx.font = 'bold 22px Arial';
      ctx.fillText(`${total}`, centerX, centerY + 14);

      ctx.restore();
    }
  }
];






}

............

<div class="container mt-4">
  <h4>Release Task Status Pie Chart</h4>
  <canvas baseChart
          [data]="pieChartData"
          [type]="pieChartType"
          [legend]="true">
  </canvas>
</div>


css
canvas {
  max-width: 500px;
  margin: auto;
}
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgChartsModule } from 'ng2-charts';
import { ChartType, ChartData, ChartOptions } from 'chart.js';

@Component({
  selector: 'app-v2',
  standalone: true,
  imports: [CommonModule, NgChartsModule],
  templateUrl: './v2.component.html',
  styleUrls: ['./v2.component.css'] // ✅ Fixed typo
})
export class V2Component {
  public pieChartLabels: string[] = ['Non-DXC IP', 'Dxc', 'out of scope', 'others'];

  public pieChartData: ChartData<'pie', number[], string> = {
    labels: this.pieChartLabels,
    datasets: [
      {
        data: [60, 20, 15, 5],
        backgroundColor: ['#28a745', '#007bff', '#ffc107', '#dc3545']
      }
    ]
  };

  public pieChartType: ChartType = 'pie';
}


npm install ng2-charts@4.1.1 chart.js

-------
css
.circle {
    border-radius: 50%;
  }
  
  .square {
    /* No border-radius, keeps square shape */
  }
  
  /* Size rules */
  .small {
    width: 50px;
    height: 50px;
  }
  
  .medium {
    width: 100px;
    height: 100px;
  }
  
  .large {
    width: 200px;
    height: 200px;
  }


html
<div class="container-fluid py-4">
    <!-- Row 1: 8 Small Circles + 2 Squares -->
    <div class="row justify-content-center mb-4">
      <div class="col-auto" *ngFor="let i of [].constructor(8)">
        <div class="circle small bg-secondary mb-2"></div>
      </div>
      <div class="col-auto" *ngFor="let i of [].constructor(2)">
        <div class="square medium bg-primary"></div>
      </div>
    </div>
  
    <!-- Row 2: 2 Large Boxes + 2 Vertical Medium Squares -->
    <div class="row justify-content-center mb-4">
      <div class="col-md-4">
        <div class="square large bg-success"></div>
      </div>
      <div class="col-md-4">
        <div class="square large bg-success"></div>
      </div>
      <div class="col-md-2 d-flex flex-column justify-content-between">
        <div class="square medium bg-warning mb-2"></div>
        <div class="square medium bg-warning"></div>
      </div>
    </div>
  
    <!-- Row 3: Same as Row 2 -->
    <div class="row justify-content-center">
      <div class="col-md-4">
        <div class="square large bg-danger"></div>
      </div>
      <div class="col-md-4">
        <div class="square large bg-danger"></div>
      </div>
      <div class="col-md-2 d-flex flex-column justify-content-between">
        <div class="square medium bg-info mb-2"></div>
        <div class="square medium bg-info"></div>
      </div>
    </div>
  </div>
  <div class="container-fluid py-4">
    <div class="row justify-content-center flex-wrap">
      <div class="col-auto mb-3" *ngFor="let item of items">
        <div [ngClass]="[item.type, item.size, 'd-flex', 'align-items-center', 'justify-content-center']"
             class="text-white text-center border"
             [style.backgroundImage]="item.imageUrl ? 'url(' + item.imageUrl + ')' : null"
             style="background-size: cover; background-position: center;">
          <span class="fw-bold" style="text-shadow: 1px 1px 2px black;">{{ item.label }}</span>
        </div>
      </div>
    </div>
  </div>
  
  .tscomponenet
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DashboardItem } from '../dashboard-item.model';
import { DashboardDataService } from '../dashboard-data.service';
import { HttpClientModule } from '@angular/common/http';

@Component({
  selector: 'app-Version1',
  standalone: true,
  imports: [CommonModule, HttpClientModule],
  templateUrl: './Version1.component.html',
  styleUrls: ['./Version1.component.css']
})
export class Version1Component implements OnInit {
  items: DashboardItem[] = [];

  constructor(private dataService: DashboardDataService) {}

  ngOnInit(): void {
    this.dataService.getDashboardItems().subscribe(data => {
      this.items = data;
    });
  }
}
app.routing module 
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { Version1Component} from './version1/version1.component';


const routes: Routes = [
  {path : 'v1', component: Version1Component},

 
  { path: '**', redirectTo: '' },
 
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],  // Use forRoot for root-level routing
  exports: [RouterModule]  
})
export class AppRoutingModule { }


app.component.ts
// src/app/app.component.ts
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet, HttpClientModule],
  template: `<router-outlet></router-outlet>`
})
export class AppComponent {}


app.config
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';
import { provideHttpClient } from '@angular/common/http';
import { routes } from './app.routes';

export const appConfig: ApplicationConfig = {
  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes),
    provideHttpClient() 
  ]
};

app.routes
import { Routes } from '@angular/router';
import { Version1Component } from './version1/version1.component';


export const routes: Routes = [
    { path: 'version1', component: Version1Component },
    { path: '', redirectTo: 'version1', pathMatch: 'full' },
    { path: '**', redirectTo: 'component1' }
];

dashborard data service 
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { DashboardItem } from './dashboard-item.model';

@Injectable({ providedIn: 'root' })
export class DashboardDataService {
  constructor(private http: HttpClient) {}

  getDashboardItems(): Observable<DashboardItem[]> {
    // Replace with real API later
    return of([
      { type: 'circle', size: 'small', label: 'A', imageUrl: 'https://via.placeholder.com/50' },
      { type: 'circle', size: 'small', label: 'B' },
      { type: 'square', size: 'medium', label: 'Box 1' },
      { type: 'circle', size: 'medium', label: 'C', imageUrl: 'https://via.placeholder.com/100' },
      { type: 'square', size: 'large', label: 'Big Square' },
      { type: 'circle', size: 'large', label: 'Big Circle', imageUrl: 'https://via.placeholder.com/200' }
    ]);
  }
}

dashboard model 
export interface DashboardItem {
    type: 'circle' | 'square';
    size: 'small' | 'medium' | 'large';
    label?: string;
    imageUrl?: string;
  }



sthyles angular json 
 "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"

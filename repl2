package com.globalfilter;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class GlobalLoggerApplication {

    public static void main(String[] args) {
        SpringApplication.run(GlobalLoggerApplication.class, args);
    }
}


.........
package com.globalfilter;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class GlobalLoggerApplication {

    public static void main(String[] args) {
        SpringApplication.run(GlobalLoggerApplication.class, args);
    }
}

.....
....
package com.globalfilter.config;

import com.globalfilter.filter.GlobalLoggerFilter;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class WebConfig {

    @Bean
    public FilterRegistrationBean<GlobalLoggerFilter> loggingFilter(){
        FilterRegistrationBean<GlobalLoggerFilter> registrationBean = new FilterRegistrationBean<>();

        registrationBean.setFilter(new GlobalLoggerFilter());
        registrationBean.addUrlPatterns("/*"); // apply to all URLs

        return registrationBean;
    }
}

......
package com.globalfilter.filter;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.*;

public class GlobalLoggerFilter implements Filter {

    private static final BlockingQueue<String> logQueue = new LinkedBlockingQueue<>();
    private static final ExecutorService executor = Executors.newSingleThreadExecutor();
    private static Connection connection;

    @Override
    public void init(FilterConfig filterConfig) {
        executor.submit(new LogDBWorker());

        try {
            // Initialize DB connection
            connection = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/logsdb", "root", "yourpassword"
            );
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        if (request instanceof HttpServletRequest) {
            HttpServletRequest req = (HttpServletRequest) request;
            if ("GET".equalsIgnoreCase(req.getMethod())) {
                String url = req.getRequestURL().toString();
                String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                String user = req.getRemoteUser() != null ? req.getRemoteUser() : "anonymous";

                logQueue.offer(timestamp + "," + user + "," + url);
            }
        }

        chain.doFilter(request, response);
    }

    @Override
    public void destroy() {
        executor.shutdown();
        try {
            if (connection != null) connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    static class LogDBWorker implements Runnable {
        @Override
        public void run() {
            while (true) {
                try {
                    String logEntry = logQueue.take();
                    String[] parts = logEntry.split(",", 3);

                    try (PreparedStatement stmt = connection.prepareStatement(
                            "INSERT INTO visitor_logs (timestamp, username, url) VALUES (?, ?, ?)")) {
                        stmt.setString(1, parts[0]);
                        stmt.setString(2, parts[1]);
                        stmt.setString(3, parts[2]);
                        stmt.executeUpdate();
                    }
                } catch (InterruptedException | SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}



. njn


package com.globalfilter;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.*;

public class GlobalLoggerFilter implements Filter {

    private static BlockingQueue<String> logQueue = new LinkedBlockingQueue<>();
    private static ExecutorService executor = Executors.newSingleThreadExecutor();

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        executor.submit(new LogDBWorker());
    }

    @Override
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
            throws IOException, ServletException {
        if (req instanceof HttpServletRequest) {
            HttpServletRequest request = (HttpServletRequest) req;
            if ("GET".equalsIgnoreCase(request.getMethod())) {
                String url = request.getRequestURL().toString();
                String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                String user = request.getRemoteUser() != null ? request.getRemoteUser() : "anonymous";

                // Queue the log
                logQueue.offer(timestamp + "," + user + "," + url);
            }
        }
        chain.doFilter(req, res);
    }

    @Override
    public void destroy() {
        executor.shutdown();
    }

    static class LogDBWorker implements Runnable {
        @Override
        public void run() {
            try (Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/logsdb", "root", "yourpassword")) {

                while (true) {
                    String logEntry = logQueue.take(); // blocks if empty
                    String[] parts = logEntry.split(",", 3);

                    try (PreparedStatement stmt = conn.prepareStatement(
                            "INSERT INTO visitor_logs (timestamp, username, url) VALUES (?, ?, ?)")) {
                        stmt.setString(1, parts[0]);
                        stmt.setString(2, parts[1]);
                        stmt.setString(3, parts[2]);
                        stmt.executeUpdate();
                    } catch (SQLException ex) {
                        ex.printStackTrace(); // you can add retry logic if needed
                    }
                }

            } catch (SQLException | InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

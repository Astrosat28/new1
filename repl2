# app/app.py
from pathlib import Path
from datetime import datetime, timedelta
from contextlib import contextmanager
from base64 import b64encode
import mimetypes

import streamlit as st
import streamlit.components.v1 as components
import pandas as pd
import matplotlib.pyplot as plt

from data_service import DataService

# ---------- Settings ----------
COMPANY_NAME = "ZBI Dashboards"
VALID_USERS = {
    "coope": {"name": "Coope", "department": "IT Operations"},
    "alili": {"name": "Alili", "department": "Business Operations"},
}

# External pages to embed (must allow iframing; otherwise local fallbacks are used)
EMBED_SERVICENOW_URL  = ""  # leave blank unless you have an iframe-allowed SN page
EMBED_SHAREPOINT_URL  = "https://www.w3schools.com/html/html_links.asp"  # L2 demo link

# Local fallbacks / local embeds (your paths)
LOCAL_EMBED_L2_PATH   = r"C:\Aaditya_projects\zbidashboards\python\wireframe-dashboard-python\baba001.jpeg"
LOCAL_EMBED_L3_PATH   = "data/demo-data/embeds/l3_servicenow.pdf"
LOCAL_EMBED_M6_PATH   = r"C:\Aaditya_projects\zbidashboards\python\wireframe-dashboard-python\sp.pdf"

st.set_page_config(page_title="Wireframe Dashboard (Demo)", layout="wide")

# ---------- Styles (compact & professional) ----------
st.markdown("""
<style>
.block-container { padding-top: 0.75rem; padding-bottom: 1.25rem; }

/* Compact headings */
h1, h2, h3, h4, h5 { margin: 0 0 .4rem 0; }
.small-title { font-size: 0.95rem; font-weight: 700; letter-spacing:.2px; color:#1f2937; }
.section-title { font-size: 0.90rem; font-weight: 600; color:#374151; margin-bottom:.25rem; }
.card-title { font-size: 0.92rem; font-weight: 600; color:#111827; margin-bottom: .35rem; }
.card-subtle { font-size: .80rem; color:#6b7280; margin-bottom: .25rem; }

/* KPI cards: uniform fixed height */
.kpi-title { font-size: .82rem; font-weight: 600; color:#374151; margin-bottom: .1rem; }
.kpi-value { font-size: 1.05rem; font-weight: 700; color:#111827; }
.kpi-inner { height: 90px; display:flex; flex-direction:column; justify-content:center; gap:.15rem; }

/* Top red banner */
.topbar{
  display:grid; grid-template-columns:1fr auto 1fr; align-items:center;
  background:#b91c1c; color:#fff; border-radius:12px;
  padding: 1.0rem 1.2rem; min-height: 68px;
  margin-top: .75rem; margin-bottom:.75rem; box-shadow:0 2px 8px rgba(0,0,0,.12);
}
.topbar .center{ text-align:center; font-weight:800; letter-spacing:.5px; font-size:1.20rem; }
.topbar .right{ text-align:right;  font-size:1.00rem; opacity:.98; }

.stDataFrame { margin-top: .25rem; }
</style>
""", unsafe_allow_html=True)

# ---------- Native "card" helper ----------
@contextmanager
def card(title: str, subtitle: str | None = None):
    with st.container(border=True):
        st.markdown(f'<div class="card-title">{title}</div>', unsafe_allow_html=True)
        if subtitle:
            st.markdown(f'<div class="card-subtle">{subtitle}</div>', unsafe_allow_html=True)
        yield

# ---------- Login Screen ----------
def show_login():
    st.markdown(
        """
        <style>
        .stApp { 
            background: radial-gradient(1200px 600px at 20% -10%, #fde2e2 0%, transparent 60%),
                        radial-gradient(1000px 800px at 120% 120%, #fee2e2 0%, transparent 50%),
                        linear-gradient(180deg, #fff 0%, #fff 100%);
        }
        .brand { color:#b91c1c; font-weight:800; font-size:1.25rem; text-align:center; margin-bottom:.2rem; }
        .subtitle { text-align:center; color:#4b5563; margin-bottom:.9rem; }
        </style>
        """,
        unsafe_allow_html=True,
    )
    st.write("")
    cols = st.columns([1, 1.2, 1])
    with cols[1]:
        with st.container(border=True):
            st.markdown(f'<div class="brand">{COMPANY_NAME}</div>', unsafe_allow_html=True)
            st.markdown('<div class="subtitle">Please enter user id to continue</div>', unsafe_allow_html=True)
            uid = st.text_input("User ID", placeholder="coope or alili").strip().lower()
            login = st.button("Sign in", use_container_width=True)
            st.caption("Allowed for demo: **coope**, **alili**")

    if login:
        if uid in VALID_USERS:
            st.session_state["user"] = VALID_USERS[uid]
            st.session_state["user"]["uid"] = uid
            st.markdown("<style>.stApp{background:#fff;}</style>", unsafe_allow_html=True)
            st.rerun()
        else:
            st.error("Invalid user id. Use **coope** or **alili**.")

if "user" not in st.session_state:
    show_login()
    st.stop()

# ---------- Sidebar ----------
st.sidebar.title("Controls")
mode = st.sidebar.radio("Mode", ["Demo", "Live"], index=0)
persona = st.sidebar.selectbox("Persona", ["Adam (Business)", "Cooper (IT/App Owner)"], index=0)
date_filter_days = st.sidebar.slider("Lookback (days)", 7, 30, 14)
simulate_error = st.sidebar.checkbox("Simulate data load error", value=False)
LOCAL_EMBED_M6_PATH = st.sidebar.text_input("M6 local file path", value=LOCAL_EMBED_M6_PATH)
st.sidebar.caption("Data from local files under `data/demo-data`.")

# ---------- Data ----------
root = Path(__file__).resolve().parents[1]
ds = DataService(root)

try:
    kpis = ds.load_kpis()
except Exception as e:
    st.error(f"Failed to load KPIs: {e}")
    kpis = pd.DataFrame()

try:
    incidents = pd.DataFrame(columns=["number","priority","state","assignment_group","opened_at","resolved_at"]) if simulate_error else ds.load_incidents_df()
    changes = ds.load_changes_df()
    sp = ds.load_sharepoint_df()
    trend = ds.load_trend_csv()
except Exception as e:
    st.error(f"Data load error: {e}")
    st.stop()

# ---------- Banner ----------
user = st.session_state["user"]
st.markdown(
    f"""
    <div class="topbar">
      <div></div>
      <div class="center">{COMPANY_NAME}</div>
      <div class="right">ðŸ‘¤ {user.get('name','User')} â€¢ {user.get('department','')}</div>
    </div>
    """,
    unsafe_allow_html=True,
)

# ---------- Row A: KPIs ----------
st.markdown('<div class="small-title">Top KPIs</div>', unsafe_allow_html=True)
if not kpis.empty:
    cols = st.columns(10 if len(kpis) >= 10 else len(kpis))
    for i, (_, row) in enumerate(kpis.iterrows()):
        with cols[i % len(cols)]:
            with st.container(border=True):
                st.markdown(
                    f'<div class="kpi-inner"><div class="kpi-title">{row.get("metric", f"KPI {i+1}")}</div>'
                    f'<div class="kpi-value">{row.get("value","")} {row.get("unit","")}</div></div>',
                    unsafe_allow_html=True,
                )
else:
    st.info("No KPI data.")
st.markdown("---")

# ---------- Filters ----------
lookback = timedelta(days=int(date_filter_days))
now = datetime.now()
min_dt = now - lookback
inc_period = incidents[incidents["opened_at_dt"] >= min_dt] if "opened_at_dt" in incidents else incidents
chg_period = changes[changes["requested_at_dt"] >= min_dt] if "requested_at_dt" in changes else changes

# ---------- Sizes ----------
LARGE_FIGSIZE = (4.9, 3.0)
MED_FIGSIZE   = (4.4, 2.6)

# Fixed TOTAL heights for the three embed cards (include title + padding)
EMBED_CARD_TOTAL_LARGE = 350  # L2, L3 total card height
EMBED_CARD_TOTAL_MED   = 300  # M6 total card height

# ---------- Helpers ----------
def _data_uri(file_path: Path) -> str | None:
    if not file_path.exists():
        return None
    mime, _ = mimetypes.guess_type(str(file_path))
    if not mime:
        return None
    try:
        if mime.startswith("text/") and mime != "text/html":
            txt = file_path.read_text(encoding="utf-8", errors="ignore")
            data = b64encode(txt.encode("utf-8")).decode()
        else:
            data = b64encode(file_path.read_bytes()).decode()
        return f"data:{mime};base64,{data}"
    except Exception:
        return None

def render_embed_card_fixed(title: str, url: str = "", local_path: str = "", total_height: int = 350):
    """
    One-piece HTML card with a FIXED total height.
    Content scrolls inside; card never grows.
    """
    # Build inner content that fills available height
    if url:
        content_html = f'<iframe src="{url}" style="width:100%;height:100%;border:0;display:block;"></iframe>'
    else:
        p = Path(local_path) if local_path else None
        if p and p.exists():
            suffix = p.suffix.lower()
            if suffix == ".pdf":
                data_uri = _data_uri(p)
                content_html = f'<embed src="{data_uri}" type="application/pdf" style="width:100%;height:100%;display:block;">' if data_uri else "<div>PDF not readable</div>"
            elif suffix in (".png", ".jpg", ".jpeg", ".gif", ".svg"):
                data_uri = _data_uri(p)
                content_html = f'<img src="{data_uri}" style="width:100%;height:100%;object-fit:contain;display:block;">' if data_uri else "<div>Image not readable</div>"
            elif suffix in (".html", ".htm"):
                html = p.read_text(encoding="utf-8", errors="ignore")
                content_html = f'<div style="width:100%;height:100%;overflow:auto;">{html}</div>'
            elif suffix == ".csv":
                try:
                    df = pd.read_csv(p).head(200)
                    table = df.to_html(index=False)
                    content_html = f'<div style="width:100%;height:100%;overflow:auto;background:#fff;">{table}</div>'
                except Exception as e:
                    content_html = f'<div style="display:flex;align-items:center;justify-content:center;height:100%;color:#6b7280;">CSV load failed: {e}</div>'
            else:
                content_html = f'<div style="display:flex;align-items:center;justify-content:center;height:100%;color:#6b7280;">Unsupported file: {p.name}</div>'
        else:
            content_html = '<div style="display:flex;align-items:center;justify-content:center;height:100%;color:#6b7280;">No content provided</div>'

    card_html = f"""
    <div style="height:{total_height}px; box-sizing:border-box; margin:0;
                border:1px solid #e7e7ea; border-radius:8px; background:#fff;
                box-shadow:0 1px 3px rgba(16,24,40,.06); display:flex; flex-direction:column;">
      <div style="flex:0 0 38px; padding:8px 10px; font-size:.92rem; font-weight:600; color:#111827; border-bottom:1px solid #f0f0f3;">
        {title}
      </div>
      <div style="flex:1 1 auto; min-height:0; padding:10px;">
        <div style="width:100%; height:100%; overflow:auto; border-radius:8px; background:#f9fafb; border:1px solid #e7e7ea;">
          {content_html}
        </div>
      </div>
    </div>
    """
    # IMPORTANT: height equals total_height; no extra space
    components.html(card_html, height=total_height, scrolling=False)

# ---------- Row B: 2 columns (60% / 40%) ----------
left, right = st.columns([0.60, 0.40])

# LEFT: 2Ã—2 Large widgets (L1â€“L4)
with left:
    # Row 1 (L1, L2)
    lrow1 = st.columns(2)
    with lrow1[0]:
        with card("L1 Â· Incidents by Priority"):
            if not inc_period.empty:
                counts = inc_period["priority"].value_counts().sort_index()
                fig, ax = plt.subplots(figsize=LARGE_FIGSIZE)
                counts.plot(kind="bar", ax=ax)
                ax.set_xlabel("Priority"); ax.set_ylabel("Count"); ax.set_title("")
                plt.tight_layout()
                st.pyplot(fig, clear_figure=True, use_container_width=True)
            else:
                st.info("No incidents in period.")
    with lrow1[1]:
        render_embed_card_fixed(
            title="L2 Â· SharePoint (Embedded Page)",
            url=EMBED_SHAREPOINT_URL,                 # try URL first
            local_path=LOCAL_EMBED_L2_PATH,           # else use local file
            total_height=EMBED_CARD_TOTAL_LARGE
        )

    # Row 2 (L3, L4)
    lrow2 = st.columns(2)
    with lrow2[0]:
        render_embed_card_fixed(
            title="L3 Â· ServiceNow (Embedded Page)",
            url=EMBED_SERVICENOW_URL,
            local_path=LOCAL_EMBED_L3_PATH,
            total_height=EMBED_CARD_TOTAL_LARGE
        )
    with lrow2[1]:
        with card("L4 Â· 30-day Uptime Trend (CSV)"):
            if not trend.empty:
                fig, ax = plt.subplots(figsize=LARGE_FIGSIZE)
                ax.plot(trend["date"], trend["uptime_percent"])
                ax.set_ylabel("Uptime (%)"); ax.set_title("")
                ax.set_xticklabels(trend["date"].dt.strftime("%Y-%m-%d"), rotation=45, ha="right")
                plt.tight_layout()
                st.pyplot(fig, clear_figure=True, use_container_width=True)
            else:
                st.caption("No trend CSV data.")

# RIGHT: 2Ã—3 Medium widgets (M1â€“M6)
with right:
    # Row 1 (M1, M2)
    mrow1 = st.columns(2)
    with mrow1[0]:
        with card("M1 Â· Open Incidents by Assignment Group"):
            if not inc_period.empty:
                open_inc = inc_period[~inc_period["state"].isin(["Resolved","Closed"])]
                counts = open_inc["assignment_group"].value_counts().sort_values(ascending=False)
                fig, ax = plt.subplots(figsize=MED_FIGSIZE)
                counts.plot(kind="bar", ax=ax)
                ax.set_xlabel("Group"); ax.set_ylabel("Open"); ax.set_title("")
                plt.tight_layout()
                st.pyplot(fig, clear_figure=True, use_container_width=True)
            else:
                st.info("No incidents.")
    with mrow1[1]:
        with card("M2 Â· SLA Breach Trend (Derived)"):
            try:
                breach = DataService.sla_breach_rate_by_day(incidents, threshold_hrs=24, days=14)
                if breach.empty:
                    st.caption("No resolved incidents.")
                else:
                    fig, ax = plt.subplots(figsize=MED_FIGSIZE)
                    ax.plot(breach["date"], breach["breach_rate_pct"])
                    ax.set_ylabel("%"); ax.set_title("")
                    ax.set_xticklabels(breach["date"], rotation=45, ha="right")
                    plt.tight_layout()
                    st.pyplot(fig, clear_figure=True, use_container_width=True)
            except Exception as e:
                st.warning(f"Breach trend not available: {e}")

    # Row 2 (M3, M4)
    mrow2 = st.columns(2)
    with mrow2[0]:
        with card("M3 Â· MTTR â€” Last 14 Days"):
            mttr = DataService.mttr_by_day(incidents, days=14)
            if mttr.empty:
                st.caption("No MTTR data.")
            else:
                current = mttr["mttr_hrs"].iloc[-1]
                st.metric(label="Current MTTR (hrs)", value=round(float(current), 1))
                fig, ax = plt.subplots(figsize=MED_FIGSIZE)
                ax.plot(mttr["date"], mttr["mttr_hrs"])
                ax.set_ylabel("Hours"); ax.set_title("")
                ax.set_xticklabels(mttr["date"], rotation=45, ha="right")
                plt.tight_layout()
                st.pyplot(fig, clear_figure=True, use_container_width=True)
    with mrow2[1]:
        with card("M4 Â· Change Type Mix"):
            if not chg_period.empty:
                type_counts = chg_period["type"].value_counts()
                fig, ax = plt.subplots(figsize=MED_FIGSIZE)
                ax.pie(type_counts.values, labels=type_counts.index, autopct="%1.1f%%")
                ax.set_title("")
                plt.tight_layout()
                st.pyplot(fig, clear_figure=True, use_container_width=True)
            else:
                st.caption("No change data.")

    # Row 3 (M5, M6)
    mrow3 = st.columns(2)
    with mrow3[0]:
        with card("M5 Â· Top Owners by Updates (7d)"):
            if not sp.empty:
                rows = []
                for _, r in sp.iterrows():
                    owners = r.get("owners", [])
                    share = (r["files_updated_last7d"] / max(len(owners), 1)) if len(owners) else 0
                    for o in owners:
                        rows.append({"owner": o, "updates": share})
                df = pd.DataFrame(rows)
                if df.empty:
                    st.caption("No owner updates data.")
                else:
                    agg = df.groupby("owner")["updates"].sum().sort_values(ascending=False).head(10)
                    fig, ax = plt.subplots(figsize=MED_FIGSIZE)
                    agg.plot(kind="bar", ax=ax)
                    ax.set_ylabel("Est. Updates (7d)"); ax.set_title("")
                    plt.tight_layout()
                    st.pyplot(fig, clear_figure=True, use_container_width=True)
            else:
                st.caption("No SharePoint data.")
    with mrow3[1]:
        render_embed_card_fixed(
            title="M6 Â· Embedded Local File",
            local_path=LOCAL_EMBED_M6_PATH,
            total_height=EMBED_CARD_TOTAL_MED
        )

st.markdown("---")
st.caption("Â© Demo wireframe â€” replace data loaders for Live mode after the presentation.")


..............
py -3.11 -m pip install --no-cache-dir numpy==1.26.4
py -3.11 -m pip install --no-cache-dir pandas==2.2.2 matplotlib==3.8.4 streamlit==1.32.2 openpyxl==3.1.2

# app/app.py
from pathlib import Path
from datetime import datetime, timedelta
from contextlib import contextmanager
from base64 import b64encode
import mimetypes
import os

import streamlit as st
import streamlit.components.v1 as components
import pandas as pd
import matplotlib.pyplot as plt

from data_service import DataService

# ---------- Settings ----------
COMPANY_NAME = "ZBI Dashboards"
VALID_USERS = {
    "coope": {"name": "Coope", "department": "IT Operations"},
    "alili": {"name": "Alili", "department": "Business Operations"},
}

# External pages to embed (must allow iframing; otherwise the placeholder appears)
EMBED_SERVICENOW_URL  = ""  # e.g., "https://your-internal/sn-demo"
EMBED_SHAREPOINT_URL  = ""  # e.g., "https://your-internal/sp-demo"

# Local file to embed in M6 (PDF/HTML/Image/CSV supported). Put your file here.
LOCAL_EMBED_M6_PATH   = "data/demo-data/embeds/m6_demo.pdf"  # change to your local path

st.set_page_config(page_title="Wireframe Dashboard (Demo)", layout="wide")

# ---------- Styles (compact & professional) ----------
st.markdown("""
<style>
/* Tighter page padding */
.block-container { padding-top: 0.75rem; padding-bottom: 1.25rem; }

/* Compact headings */
h1, h2, h3, h4, h5 { margin: 0 0 .4rem 0; }
.small-title { font-size: 0.95rem; font-weight: 700; letter-spacing:.2px; color:#1f2937; }
.section-title { font-size: 0.90rem; font-weight: 600; color:#374151; margin-bottom:.25rem; }
.card-title { font-size: 0.92rem; font-weight: 600; color:#111827; margin-bottom: .35rem; }
.card-subtle { font-size: .80rem; color:#6b7280; margin-bottom: .25rem; }

/* KPI cards: uniform fixed height */
.kpi-title { font-size: .82rem; font-weight: 600; color:#374151; margin-bottom: .1rem; }
.kpi-value { font-size: 1.05rem; font-weight: 700; color:#111827; }
.kpi-inner { height: 90px; display:flex; flex-direction:column; justify-content:center; gap:.15rem; }

/* Top red banner */
.topbar {
  display: grid;
  grid-template-columns: 1fr auto 1fr;
  align-items: center;
  background: #b91c1c; /* red-700 */
  color: #fff;
  border-radius: 10px;
  padding: .55rem .9rem;
  box-shadow: 0 2px 6px rgba(0,0,0,.12);
  margin-bottom: .65rem;
}
.topbar .center { text-align: center; font-weight: 800; letter-spacing: .5px; font-size: 1.05rem; }
.topbar .right { text-align: right; font-size: .90rem; opacity: .95; }

/* Reduce dataframe top margin a bit */
.stDataFrame { margin-top: .25rem; }
</style>
""", unsafe_allow_html=True)

# ---------- Native "card" helper ----------
@contextmanager
def card(title: str, subtitle: str | None = None):
    with st.container(border=True):
        st.markdown(f'<div class="card-title">{title}</div>', unsafe_allow_html=True)
        if subtitle:
            st.markdown(f'<div class="card-subtle">{subtitle}</div>', unsafe_allow_html=True)
        yield

# ---------- Login Screen ----------
def show_login():
    st.markdown(
        """
        <style>
        .stApp { 
            background: radial-gradient(1200px 600px at 20% -10%, #fde2e2 0%, transparent 60%),
                        radial-gradient(1000px 800px at 120% 120%, #fee2e2 0%, transparent 50%),
                        linear-gradient(180deg, #fff 0%, #fff 100%);
        }
        .brand { color:#b91c1c; font-weight:800; font-size:1.25rem; text-align:center; margin-bottom:.2rem; }
        .subtitle { text-align:center; color:#4b5563; margin-bottom:.9rem; }
        </style>
        """,
        unsafe_allow_html=True,
    )
    st.write("")  # small spacer
    cols = st.columns([1, 1.2, 1])
    with cols[1]:
        with st.container(border=True):
            st.markdown(f'<div class="brand">{COMPANY_NAME}</div>', unsafe_allow_html=True)
            st.markdown('<div class="subtitle">Please enter user id to continue</div>', unsafe_allow_html=True)
            uid = st.text_input("User ID", placeholder="coope or alili").strip().lower()
            login = st.button("Sign in", use_container_width=True)
            st.caption("Allowed for demo: **coope**, **alili**")

    if login:
        if uid in VALID_USERS:
            st.session_state["user"] = VALID_USERS[uid]
            st.session_state["user"]["uid"] = uid
            # reset background to white after login
            st.markdown("<style>.stApp{background:#fff;}</style>", unsafe_allow_html=True)
            st.rerun()
        else:
            st.error("Invalid user id. Use **coope** or **alili**.")

# If not logged in, show login and stop
if "user" not in st.session_state:
    show_login()
    st.stop()

# ---------- Sidebar ----------
st.sidebar.title("Controls")
mode = st.sidebar.radio("Mode", ["Demo", "Live"], index=0, help="Live is non-functional in this demo.")
persona = st.sidebar.selectbox("Persona", ["Adam (Business)", "Cooper (IT/App Owner)"], index=0)
date_filter_days = st.sidebar.slider("Lookback (days)", 7, 30, 14, help="Filters time-based charts.")
simulate_error = st.sidebar.checkbox("Simulate data load error", value=False)
# Optional: allow overriding local embed path for M6 from the UI
LOCAL_EMBED_M6_PATH = st.sidebar.text_input("M6 local file path", value=LOCAL_EMBED_M6_PATH)
st.sidebar.caption("Data from local files under `data/demo-data`.")

# ---------- Data Loading ----------
root = Path(__file__).resolve().parents[1]
ds = DataService(root)

try:
    kpis = ds.load_kpis()
except Exception as e:
    st.error(f"Failed to load KPIs: {e}")
    kpis = pd.DataFrame()

try:
    if simulate_error:
        incidents = pd.DataFrame(columns=["number","priority","state","assignment_group","opened_at","resolved_at"])
    else:
        incidents = ds.load_incidents_df()
    changes = ds.load_changes_df()
    sp = ds.load_sharepoint_df()
    trend = ds.load_trend_csv()
except Exception as e:
    st.error(f"Data load error: {e}")
    st.stop()

# ---------- Top Red Banner ----------
user = st.session_state["user"]
st.markdown(
    f"""
    <div class="topbar">
      <div></div>
      <div class="center">{COMPANY_NAME}</div>
      <div class="right">ðŸ‘¤ {user.get('name','User')} â€¢ {user.get('department','')}</div>
    </div>
    """,
    unsafe_allow_html=True,
)

# ---------- Row A: 10 KPI cards (uniform height; no delta markers) ----------
st.markdown('<div class="small-title">Top KPIs</div>', unsafe_allow_html=True)
if not kpis.empty:
    n = len(kpis)
    cols = st.columns(10 if n >= 10 else n)
    for i, (_, row) in enumerate(kpis.iterrows()):
        with cols[i % len(cols)]:
            with st.container(border=True):
                st.markdown(
                    f'<div class="kpi-inner"><div class="kpi-title">{row.get("metric", f"KPI {i+1}")}</div>'
                    f'<div class="kpi-value">{row.get("value","")} {row.get("unit","")}</div></div>',
                    unsafe_allow_html=True,
                )
else:
    st.info("No KPI data.")
st.markdown("---")

# ---------- Time Window Filters ----------
lookback = timedelta(days=int(date_filter_days))
now = datetime.now()
min_dt = now - lookback
inc_period = incidents[incidents["opened_at_dt"] >= min_dt] if "opened_at_dt" in incidents else incidents
chg_period = changes[changes["requested_at_dt"] >= min_dt] if "requested_at_dt" in changes else changes

# ---------- Chart sizes & fixed embed heights ----------
LARGE_FIGSIZE = (4.9, 3.0)
MED_FIGSIZE   = (4.4, 2.6)
EMBED_HEIGHT_LARGE = 330
EMBED_HEIGHT_MED   = 260

# ---------- Embed helpers ----------
def _data_uri(file_path: Path) -> str | None:
    """Return a data: URI for known binary/text types; None if unsupported."""
    if not file_path.exists():
        return None
    mime, _ = mimetypes.guess_type(str(file_path))
    if not mime:
        return None
    try:
        if mime.startswith("text/"):
            txt = file_path.read_text(encoding="utf-8", errors="ignore")
            # For text/html we prefer to render raw HTML via components.html, not data URI.
            if mime == "text/html":
                return None
            data = b64encode(txt.encode("utf-8")).decode()
        else:
            data = b64encode(file_path.read_bytes()).decode()
        return f"data:{mime};base64,{data}"
    except Exception:
        return None

def render_embed_card(title: str, url: str = "", local_path: str = "", height: int = 300, subtitle: str | None = None):
    """Embed external URL (iframe) or local file (pdf/html/image/csv) with a FIXED card height."""
    with card(title, subtitle):
        # Priority 1: External URL (iframe)
        if url:
            # Use an HTML iframe for predictable sizing
            components.html(
                f'''
                <div style="height:{height}px; overflow:hidden; border-radius:8px;">
                  <iframe src="{url}" style="width:100%; height:100%; border:0;" scrolling="yes"></iframe>
                </div>
                ''',
                height=height + 8,
            )
            return

        # Priority 2: Local file
        p = Path(local_path) if local_path else None
        if p and p.exists():
            suffix = p.suffix.lower()
            if suffix in (".html", ".htm"):
                # Render raw HTML inside a fixed-height pane
                html = p.read_text(encoding="utf-8", errors="ignore")
                components.html(
                    f'''
                    <div style="height:{height}px; overflow:auto; border-radius:8px; border:1px solid #e7e7ea; background:#fff;">
                        {html}
                    </div>
                    ''',
                    height=height + 8,
                )
                return
            elif suffix in (".pdf", ".png", ".jpg", ".jpeg", ".gif", ".svg"):
                data_uri = _data_uri(p)
                if data_uri:
                    # Use <embed> for PDF; <img> for images â€” both constrained to fixed height via container
                    if suffix == ".pdf":
                        components.html(
                            f'''
                            <div style="height:{height}px; overflow:hidden; border-radius:8px; background:#f9fafb; border:1px solid #e7e7ea;">
                              <embed src="{data_uri}" type="application/pdf" style="width:100%; height:100%;" />
                            </div>
                            ''',
                            height=height + 8,
                        )
                    else:
                        components.html(
                            f'''
                            <div style="height:{height}px; display:flex; align-items:center; justify-content:center; 
                                        border-radius:8px; background:#fff; border:1px solid #e7e7ea;">
                              <img src="{data_uri}" style="max-width:100%; max-height:100%; object-fit:contain;" />
                            </div>
                            ''',
                            height=height + 8,
                        )
                    return
            elif suffix == ".csv":
                try:
                    df = pd.read_csv(p)
                    st.dataframe(df, use_container_width=True, height=height)
                    return
                except Exception as e:
                    st.error(f"Failed to read CSV: {e}")

            # Unknown file type â†’ show link
            st.info(f"Cannot embed file type '{suffix}'. File: {p}")
            st.download_button("Download file", data=p.read_bytes(), file_name=p.name, use_container_width=True)
            return

        # Fallback demo panel
        components.html(
            f"""
            <div style="height:{height}px;display:flex;align-items:center;justify-content:center;
                 background:linear-gradient(135deg,#f9fafb 0%,#f3f4f6 100%);border-radius:8px;border:1px dashed #c7c9d1;">
              <div style="text-align:center;color:#374151;">
                <div style="font-weight:700;margin-bottom:6px;">Embedded Content (Demo)</div>
                <div style="font-size:12.5px;color:#6b7280;">
                  Set a URL or local path to display content in this card.
                </div>
              </div>
            </div>
            """,
            height=height + 6,
        )

# ---------- Row B: 2 columns (60% / 40%) ----------
left, right = st.columns([0.60, 0.40])

# LEFT: 2Ã—2 Large widgets (L1â€“L4)
with left:
    # Row 1 (L1, L2)
    lrow1 = st.columns(2)
    # L1: Incidents by Priority (kept as chart)
    with lrow1[0]:
        with card("L1 Â· Incidents by Priority"):
            if not inc_period.empty:
                counts = inc_period["priority"].value_counts().sort_index()
                fig, ax = plt.subplots(figsize=LARGE_FIGSIZE)
                counts.plot(kind="bar", ax=ax)
                ax.set_xlabel("Priority"); ax.set_ylabel("Count"); ax.set_title("")
                plt.tight_layout()
                st.pyplot(fig, clear_figure=True, use_container_width=True)
            else:
                st.info("No incidents in period.")
    # L2: Embedded SharePoint page (fixed height)
    with lrow1[1]:
        render_embed_card(
            title="L2 Â· SharePoint (Embedded Page)",
            url=EMBED_SHAREPOINT_URL,
            height=EMBED_HEIGHT_LARGE,
            subtitle=None
        )

    # Row 2 (L3, L4)
    lrow2 = st.columns(2)
    # L3: Embedded ServiceNow page (fixed height)
    with lrow2[0]:
        render_embed_card(
            title="L3 Â· ServiceNow (Embedded Page)",
            url=EMBED_SERVICENOW_URL,
            height=EMBED_HEIGHT_LARGE,
            subtitle=None
        )

    # L4: Trend line (same as M6 earlier), chart height is controlled by figsize
    with lrow2[1]:
        with card("L4 Â· 30-day Uptime Trend (CSV)"):
            if not trend.empty:
                fig, ax = plt.subplots(figsize=LARGE_FIGSIZE)
                ax.plot(trend["date"], trend["uptime_percent"])
                ax.set_ylabel("Uptime (%)"); ax.set_title("")
                ax.set_xticklabels(trend["date"].dt.strftime("%Y-%m-%d"), rotation=45, ha="right")
                plt.tight_layout()
                st.pyplot(fig, clear_figure=True, use_container_width=True)
            else:
                st.caption("No trend CSV data.")

# RIGHT: 2Ã—3 Medium widgets (M1â€“M6)
with right:
    # Row 1 (M1, M2)
    mrow1 = st.columns(2)
    with mrow1[0]:
        with card("M1 Â· Open Incidents by Assignment Group"):
            if not inc_period.empty:
                open_inc = inc_period[~inc_period["state"].isin(["Resolved","Closed"])]
                counts = open_inc["assignment_group"].value_counts().sort_values(ascending=False)
                fig, ax = plt.subplots(figsize=MED_FIGSIZE)
                counts.plot(kind="bar", ax=ax)
                ax.set_xlabel("Group"); ax.set_ylabel("Open"); ax.set_title("")
                plt.tight_layout()
                st.pyplot(fig, clear_figure=True, use_container_width=True)
            else:
                st.info("No incidents.")
    with mrow1[1]:
        with card("M2 Â· SLA Breach Trend (Derived)"):
            try:
                breach = DataService.sla_breach_rate_by_day(incidents, threshold_hrs=24, days=14)
                if breach.empty:
                    st.caption("No resolved incidents.")
                else:
                    fig, ax = plt.subplots(figsize=MED_FIGSIZE)
                    ax.plot(breach["date"], breach["breach_rate_pct"])
                    ax.set_ylabel("%"); ax.set_title("")
                    ax.set_xticklabels(breach["date"], rotation=45, ha="right")
                    plt.tight_layout()
                    st.pyplot(fig, clear_figure=True, use_container_width=True)
            except Exception as e:
                st.warning(f"Breach trend not available: {e}")

    # Row 2 (M3, M4)
    mrow2 = st.columns(2)
    with mrow2[0]:
        with card("M3 Â· MTTR â€” Last 14 Days"):
            mttr = DataService.mttr_by_day(incidents, days=14)
            if mttr.empty:
                st.caption("No MTTR data.")
            else:
                current = mttr["mttr_hrs"].iloc[-1]
                st.metric(label="Current MTTR (hrs)", value=round(float(current), 1))
                fig, ax = plt.subplots(figsize=MED_FIGSIZE)
                ax.plot(mttr["date"], mttr["mttr_hrs"])
                ax.set_ylabel("Hours"); ax.set_title("")
                ax.set_xticklabels(mttr["date"], rotation=45, ha="right")
                plt.tight_layout()
                st.pyplot(fig, clear_figure=True, use_container_width=True)
    with mrow2[1]:
        with card("M4 Â· Change Type Mix"):
            if not chg_period.empty:
                type_counts = chg_period["type"].value_counts()
                fig, ax = plt.subplots(figsize=MED_FIGSIZE)
                ax.pie(type_counts.values, labels=type_counts.index, autopct="%1.1f%%")
                ax.set_title("")
                plt.tight_layout()
                st.pyplot(fig, clear_figure=True, use_container_width=True)
            else:
                st.caption("No change data.")

    # Row 3 (M5, M6)
    mrow3 = st.columns(2)
    with mrow3[0]:
        with card("M5 Â· Top Owners by Updates (7d)"):
            if not sp.empty:
                rows = []
                for _, r in sp.iterrows():
                    owners = r.get("owners", [])
                    share = (r["files_updated_last7d"] / max(len(owners), 1)) if len(owners) else 0
                    for o in owners:
                        rows.append({"owner": o, "updates": share})
                df = pd.DataFrame(rows)
                if df.empty:
                    st.caption("No owner updates data.")
                else:
                    agg = df.groupby("owner")["updates"].sum().sort_values(ascending=False).head(10)
                    fig, ax = plt.subplots(figsize=MED_FIGSIZE)
                    agg.plot(kind="bar", ax=ax)
                    ax.set_ylabel("Est. Updates (7d)"); ax.set_title("")
                    plt.tight_layout()
                    st.pyplot(fig, clear_figure=True, use_container_width=True)
            else:
                st.caption("No SharePoint data.")
    with mrow3[1]:
        # M6: Local file embed with fixed height
        render_embed_card(
            title="M6 Â· Embedded Local File",
            local_path=LOCAL_EMBED_M6_PATH,
            height=EMBED_HEIGHT_MED,
            subtitle="Put your file at the configured path (PDF/HTML/Image/CSV)."
        )

st.markdown("---")
st.caption("Â© Demo wireframe â€” replace data loaders for Live mode after the presentation.")




data service -
import json
from pathlib import Path
import pandas as pd
from utils import parse_dt   # NOTE: no leading dot (same folder import)

class DataService:
    def __init__(self, project_root: Path):
        self.root = project_root
        self.demo_manifest = self.root / "data" / "demo-data" / "data_manifest.json"
        with open(self.demo_manifest, "r") as f:
            self.manifest = json.load(f)
        self.config = self.root / "data" / "demo-data" / "config" / "demo_config.json"

    def read_config(self):
        with open(self.config, "r") as f:
            return json.load(f)

    # --- Excel KPIs ---
    def load_kpis(self) -> pd.DataFrame:
        kpi_path = Path(self.manifest["excel"]["kpis"])
        return pd.read_excel(kpi_path, sheet_name="KPIData")

    # --- ServiceNow JSONs ---
    def load_incidents_df(self) -> pd.DataFrame:
        p = Path(self.manifest["servicenow"]["incidents"])
        data = json.loads(Path(p).read_text())
        df = pd.DataFrame(data["incidents"])
        df["opened_at_dt"] = df["opened_at"].apply(parse_dt)
        df["resolved_at_dt"] = df["resolved_at"].apply(parse_dt)
        def _hours(row):
            if row["resolved_at_dt"] and row["opened_at_dt"]:
                delta = (row["resolved_at_dt"] - row["opened_at_dt"]).total_seconds() / 3600.0
                return max(delta, 0.0)
            return None
        df["resolution_hrs"] = df.apply(_hours, axis=1)
        return df

    def load_changes_df(self) -> pd.DataFrame:
        p = Path(self.manifest["servicenow"]["changes"])
        data = json.loads(Path(p).read_text())
        df = pd.DataFrame(data["changes"])
        for col in ["requested_at", "scheduled_start", "scheduled_end"]:
            df[col + "_dt"] = df[col].apply(parse_dt)
        return df

    # --- SharePoint JSON ---
    def load_sharepoint_df(self) -> pd.DataFrame:
        p = Path(self.manifest["sharepoint"]["libraries"])
        data = json.loads(Path(p).read_text())
        return pd.DataFrame(data["libraries"])

    # --- Trend CSV ---
    def load_trend_csv(self) -> pd.DataFrame:
        p = Path(self.manifest["trends"]["uptime"])
        return pd.read_csv(p, parse_dates=["date"])

    # --- Derived helpers ---
    @staticmethod
    def mttr_by_day(inc_df: pd.DataFrame, days=14):
        if inc_df.empty:
            return pd.DataFrame({"date": [], "mttr_hrs": []})
        df = inc_df.dropna(subset=["resolved_at_dt", "opened_at_dt"]).copy()
        df["date"] = df["resolved_at_dt"].dt.date
        series = df.groupby("date")["resolution_hrs"].mean().reset_index()
        series = series.sort_values("date").tail(days)
        series.rename(columns={"resolution_hrs": "mttr_hrs"}, inplace=True)
        return series

    @staticmethod
    def sla_breach_rate_by_day(inc_df: pd.DataFrame, threshold_hrs=24, days=14):
        # Simplified: breach if resolution time > threshold
        df = inc_df.dropna(subset=["resolved_at_dt", "opened_at_dt"]).copy()
        if df.empty:
            return pd.DataFrame({"date": [], "breach_rate_pct": []})
        df["date"] = df["resolved_at_dt"].dt.date
        df["breach"] = df["resolution_hrs"].apply(lambda h: 1 if (h and h > threshold_hrs) else 0)
        g = df.groupby("date").agg(total=("number", "count"), breaches=("breach", "sum")).reset_index()
        g["breach_rate_pct"] = (g["breaches"] / g["total"]) * 100.0
        g = g.sort_values("date").tail(days)
        return g[["date", "breach_rate_pct"]]


utils.py
from datetime import datetime

def parse_dt(s, fmt="%Y-%m-%d %H:%M:%S"):
    if not s or s in ("", None, "null"):
        return None
    try:
        return datetime.strptime(s, fmt)
    except Exception:
        try:
            return datetime.fromisoformat(s)
        except Exception:
            return None



bootstrap -
# Run: python bootstrap_demo_data.py
import os, json, random
from datetime import datetime, timedelta
from pathlib import Path
import pandas as pd

root = Path(__file__).resolve().parent
base = root / "data" / "demo-data"
(base / "excel").mkdir(parents=True, exist_ok=True)
(base / "servicenow").mkdir(parents=True, exist_ok=True)
(base / "sharepoint").mkdir(parents=True, exist_ok=True)
(base / "trends").mkdir(parents=True, exist_ok=True)
(base / "config").mkdir(parents=True, exist_ok=True)

# 1) Excel KPIs
kpi_rows = [
    {"metric_id":"kpi_01","metric":"Incidents Open","value":128,"unit":"count","delta_vs_yesterday":-7,"target":100},
    {"metric_id":"kpi_02","metric":"Incidents Resolved Today","value":34,"unit":"count","delta_vs_yesterday":5,"target":40},
    {"metric_id":"kpi_03","metric":"Change Requests Pending","value":19,"unit":"count","delta_vs_yesterday":2,"target":15},
    {"metric_id":"kpi_04","metric":"SLA Breach Rate","value":2.8,"unit":"%","delta_vs_yesterday":-0.4,"target":2.0},
    {"metric_id":"kpi_05","metric":"Avg Resolution Time","value":6.3,"unit":"hrs","delta_vs_yesterday":-0.9,"target":5.0},
    {"metric_id":"kpi_06","metric":"Bugs Open","value":57,"unit":"count","delta_vs_yesterday":3,"target":40},
    {"metric_id":"kpi_07","metric":"Deployments Today","value":3,"unit":"count","delta_vs_yesterday":1,"target":2},
    {"metric_id":"kpi_08","metric":"Servers Healthy","value":96.2,"unit":"%","delta_vs_yesterday":0.3,"target":99.0},
    {"metric_id":"kpi_09","metric":"Tickets Backlog","value":212,"unit":"count","delta_vs_yesterday":-11,"target":180},
    {"metric_id":"kpi_10","metric":"User Satisfaction","value":4.3,"unit":"/5","delta_vs_yesterday":0.1,"target":4.5},
]
pd.DataFrame(kpi_rows).to_excel(base / "excel" / "kpis.xlsx", index=False, sheet_name="KPIData")

# 2) ServiceNow-like JSON
priorities = ["1 - Critical","2 - High","3 - Moderate","4 - Low"]
states = ["New","In Progress","On Hold","Resolved","Closed"]
groups = ["APP-Support","DBA","Network","Security","ServiceDesk"]
now = datetime.now()

incidents = []
for i in range(60):
    opened = now - timedelta(days=random.randint(0,20), hours=random.randint(0,23))
    state = random.choice(states)
    resolved = (opened + timedelta(hours=random.randint(1,48))).strftime("%Y-%m-%d %H:%M:%S") if state in ["Resolved","Closed"] else None
    incidents.append({
        "number": f"INC00{1000+i}",
        "priority": random.choice(priorities),
        "state": state,
        "assignment_group": random.choice(groups),
        "short_description": f"Sample incident {i}",
        "opened_at": opened.strftime("%Y-%m-%d %H:%M:%S"),
        "resolved_at": resolved,
        "caller": f"user{i}@example.com"
    })
(Path(base / "servicenow" / "incidents.json")).write_text(json.dumps({"incidents": incidents}, indent=2))

changes = []
for i in range(25):
    req = now - timedelta(days=random.randint(3,30))
    sched = req + timedelta(days=random.randint(0,10))
    changes.append({
        "number": f"CHG00{2000+i}",
        "type": random.choice(["Standard","Normal","Emergency"]),
        "state": random.choice(["Assess","Authorize","Scheduled","Implement","Review","Closed"]),
        "requested_by": f"user{i}@example.com",
        "requested_at": req.strftime("%Y-%m-%d %H:%M:%S"),
        "scheduled_start": sched.strftime("%Y-%m-%d %H:%M:%S"),
        "scheduled_end": (sched + timedelta(hours=random.randint(1,6))).strftime("%Y-%m-%d %H:%M:%S")
    })
(Path(base / "servicenow" / "changes.json")).write_text(json.dumps({"changes": changes}, indent=2))

# 3) SharePoint-like JSON
libraries = []
for lib in ["Engineering Docs","Runbooks","Release Notes","Design Specs"]:
    libraries.append({
        "library": lib,
        "files_total": random.randint(20,200),
        "files_updated_last7d": random.randint(0,25),
        "last_major_update": (now - timedelta(days=random.randint(1,60))).date().isoformat(),
        "owners": ["adam@example.com","cooper@example.com"]
    })
(Path(base / "sharepoint" / "libraries.json")).write_text(json.dumps({"libraries": libraries}, indent=2))

# 4) Trend CSV 30 days
dates = [(now - timedelta(days=d)).date().isoformat() for d in range(29,-1,-1)]
val = 97.0
vals = []
for _ in range(30):
    val += random.uniform(-0.5, 0.5)
    vals.append(round(max(90.0, min(99.9, val)), 2))
pd.DataFrame({"date": dates, "uptime_percent": vals}).to_csv(base / "trends" / "uptime_trend.csv", index=False)

# 5) Manifest + config (absolute paths for reliability)
manifest = {
    "excel": {"kpis": str((base / "excel" / "kpis.xlsx").resolve())},
    "servicenow": {
        "incidents": str((base / "servicenow" / "incidents.json").resolve()),
        "changes": str((base / "servicenow" / "changes.json").resolve())
    },
    "sharepoint": {"libraries": str((base / "sharepoint" / "libraries.json").resolve())},
    "trends": {"uptime": str((base / "trends" / "uptime_trend.csv").resolve())}
}
(Path(base / "data_manifest.json")).write_text(json.dumps(manifest, indent=2))
config = {
    "mode": "demo",
    "sources": {
        "excel_top_kpis": "local",
        "servicenow_widgets": "local",
        "sharepoint_widgets": "local",
        "trend_widget": "local_csv"
    },
    "files": manifest
}
(Path(base / "config" / "demo_config.json")).write_text(json.dumps(config, indent=2))

print("Demo data created under:", base)



requiremnts -
# requirements.txt
# Add your Python dependencies here
pandas>=2.0.0
openpyxl>=3.1.0
streamlit>=1.28.0
matplotlib>=3.7.0

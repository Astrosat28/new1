# app/app.py
from pathlib import Path
from datetime import datetime, timedelta
from contextlib import contextmanager
from base64 import b64encode
import mimetypes

import streamlit as st
import streamlit.components.v1 as components
import pandas as pd
import matplotlib.pyplot as plt

from data_service import DataService

# ---------- Settings ----------
COMPANY_NAME = "ZBI Dashboards"
VALID_USERS = {
    "coope": {"name": "Coope", "department": "IT Operations"},
    "alili": {"name": "Alili", "department": "Business Operations"},
}

# External pages to embed (must allow iframing; otherwise local fallbacks are used)
EMBED_SERVICENOW_URL  = ""  # leave blank unless you have an iframe-allowed SN page
EMBED_SHAREPOINT_URL  = "https://www.w3schools.com/html/html_links.asp"  # L2 demo link

# Local fallbacks / local embeds (your paths)
LOCAL_EMBED_L2_PATH   = r"C:\Aaditya_projects\zbidashboards\python\wireframe-dashboard-python\baba001.jpeg"
LOCAL_EMBED_L3_PATH   = "data/demo-data/embeds/l3_servicenow.pdf"
LOCAL_EMBED_M6_PATH   = r"C:\Aaditya_projects\zbidashboards\python\wireframe-dashboard-python\sp.pdf"

st.set_page_config(page_title="Wireframe Dashboard (Demo)", layout="wide")

# ---------- Styles (compact & professional) ----------
st.markdown("""
<style>
.block-container { padding-top: 0.75rem; padding-bottom: 1.25rem; }

/* Compact headings */
h1, h2, h3, h4, h5 { margin: 0 0 .4rem 0; }
.small-title { font-size: 0.95rem; font-weight: 700; letter-spacing:.2px; color:#1f2937; }
.section-title { font-size: 0.90rem; font-weight: 600; color:#374151; margin-bottom:.25rem; }
.card-title { font-size: 0.92rem; font-weight: 600; color:#111827; margin-bottom: .35rem; }
.card-subtle { font-size: .80rem; color:#6b7280; margin-bottom: .25rem; }

/* KPI cards: uniform fixed height */
.kpi-title { font-size: .82rem; font-weight: 600; color:#374151; margin-bottom: .1rem; }
.kpi-value { font-size: 1.05rem; font-weight: 700; color:#111827; }
/* bumped to 100px to fit delta line neatly */
.kpi-inner { height: 100px; display:flex; flex-direction:column; justify-content:center; gap:.15rem; }

/* delta line styles */
.kpi-delta { font-size: .78rem; font-weight: 700; }
.kpi-delta.pos { color:#16a34a; }     /* green */
.kpi-delta.neg { color:#dc2626; }     /* red */
.kpi-delta.neutral { color:#6b7280; } /* gray */

/* Top red banner */
.topbar{
  display:grid; grid-template-columns:1fr auto 1fr; align-items:center;
  background:#b91c1c; color:#fff; border-radius:12px;
  padding: 1.0rem 1.2rem; min-height: 68px;
  margin-top: .75rem; margin-bottom:.75rem; box-shadow:0 2px 8px rgba(0,0,0,.12);
}
.topbar .center{ text-align:center; font-weight:800; letter-spacing:.5px; font-size:1.20rem; }
.topbar .right{ text-align:right;  font-size:1.00rem; opacity:.98; }

.stDataFrame { margin-top: .25rem; }
</style>
""", unsafe_allow_html=True)

# ---------- Native "card" helper ----------
@contextmanager
def card(title: str, subtitle: str | None = None):
    with st.container(border=True):
        st.markdown(f'<div class="card-title">{title}</div>', unsafe_allow_html=True)
        if subtitle:
            st.markdown(f'<div class="card-subtle">{subtitle}</div>', unsafe_allow_html=True)
        yield

# ---------- Percent parser + column detector ----------
def _parse_pct(val):
    """Accept '5.2', '5.2%', -3, '-3%', or Excel percent like 0.052."""
    if val is None or (isinstance(val, float) and pd.isna(val)):
        return None
    s = str(val).strip()
    if s == "" or s.lower() in ("nan", "none"):
        return None
    if s.endswith("%"):
        try:
            return float(s[:-1].strip())
        except Exception:
            return None
    try:
        f = float(s)
        # Excel percent stored as fraction -> convert to percent
        if abs(f) <= 1.5:
            return f * 100.0
        return f
    except Exception:
        return None

def _detect_kpi_delta_column(df: pd.DataFrame) -> str | None:
    """Find a column that looks like a percent change."""
    if df is None or df.empty:
        return None
    cols = [str(c).strip().lower() for c in df.columns]
    # First: common names in priority order
    common = ["change_pct", "change %", "change%", "delta_pct", "pct_change", "pct change", "delta", "Î”%", "Î”", "growth %", "growth"]
    for k in common:
        if k in cols:
            return k
    # Heuristic: any column with '%' or 'change'/'delta'/'pct' in its name
    for c in cols:
        if ("%" in c) or ("change" in c) or ("delta" in c) or ("pct" in c) or ("growth" in c):
            return c
    return None

# ---------- Login Screen ----------
def show_login():
    st.markdown(
        """
        <style>
        .stApp { 
            background: radial-gradient(1200px 600px at 20% -10%, #fde2e2 0%, transparent 60%),
                        radial-gradient(1000px 800px at 120% 120%, #fee2e2 0%, transparent 50%),
                        linear-gradient(180deg, #fff 0%, #fff 100%);
        }
        .brand { color:#b91c1c; font-weight:800; font-size:1.25rem; text-align:center; margin-bottom:.2rem; }
        .subtitle { text-align:center; color:#4b5563; margin-bottom:.9rem; }
        </style>
        """,
        unsafe_allow_html=True,
    )
    st.write("")
    cols = st.columns([1, 1.2, 1])
    with cols[1]:
        with st.container(border=True):
            st.markdown(f'<div class="brand">{COMPANY_NAME}</div>', unsafe_allow_html=True)
            st.markdown('<div class="subtitle">Please enter user id to continue</div>', unsafe_allow_html=True)
            uid = st.text_input("User ID", placeholder="coope or alili").strip().lower()
            login = st.button("Sign in", use_container_width=True)
            st.caption("Allowed for demo: **coope**, **alili**")

    if login:
        if uid in VALID_USERS:
            st.session_state["user"] = VALID_USERS[uid]
            st.session_state["user"]["uid"] = uid
            st.markdown("<style>.stApp{background:#fff;}</style>", unsafe_allow_html=True)
            st.rerun()
        else:
            st.error("Invalid user id. Use **coope** or **alili**.")

if "user" not in st.session_state:
    show_login()
    st.stop()

# ---------- Sidebar ----------
st.sidebar.title("Controls")
mode = st.sidebar.radio("Mode", ["Demo", "Live"], index=0)
persona = st.sidebar.selectbox("Persona", ["Adam (Business)", "Cooper (IT/App Owner)"], index=0)
date_filter_days = st.sidebar.slider("Lookback (days)", 7, 30, 14)
simulate_error = st.sidebar.checkbox("Simulate data load error", value=False)
LOCAL_EMBED_M6_PATH = st.sidebar.text_input("M6 local file path", value=LOCAL_EMBED_M6_PATH)
show_kpi_debug = st.sidebar.checkbox("Debug: show KPI sheet", value=False)
st.sidebar.caption("Data from local files under `data/demo-data`.")

# ---------- Data ----------
root = Path(__file__).resolve().parents[1]
ds = DataService(root)

try:
    kpis = ds.load_kpis()
except Exception as e:
    st.error(f"Failed to load KPIs: {e}")
    kpis = pd.DataFrame()

# normalize KPI headers to lower-case for tolerant matching
DELTA_COL = None
if not kpis.empty:
    kpis.columns = [str(c).strip().lower() for c in kpis.columns]
    DELTA_COL = _detect_kpi_delta_column(kpis)

try:
    incidents = pd.DataFrame(columns=["number","priority","state","assignment_group","opened_at","resolved_at"]) if simulate_error else ds.load_incidents_df()
    changes = ds.load_changes_df()
    sp = ds.load_sharepoint_df()
    trend = ds.load_trend_csv()
except Exception as e:
    st.error(f"Data load error: {e}")
    st.stop()

if show_kpi_debug and not kpis.empty:
    st.write("KPI columns:", list(kpis.columns))
    st.write("Detected delta column:", DELTA_COL)
    st.dataframe(kpis.head(20), use_container_width=True, height=240)

# ---------- Banner ----------
user = st.session_state["user"]
st.markdown(
    f"""
    <div class="topbar">
      <div></div>
      <div class="center">{COMPANY_NAME}</div>
      <div class="right">ðŸ‘¤ {user.get('name','User')} â€¢ {user.get('department','')}</div>
    </div>
    """,
    unsafe_allow_html=True,
)

# ---------- Row A: KPIs ----------
st.markdown('<div class="small-title">Top KPIs</div>', unsafe_allow_html=True)
if not kpis.empty:
    cols = st.columns(10 if len(kpis) >= 10 else len(kpis))
    for i, (_, row) in enumerate(kpis.iterrows()):
        with cols[i % len(cols)]:
            with st.container(border=True):
                metric = row.get("metric", f"KPI {i+1}")
                value  = row.get("value", "")
                unit   = row.get("unit", "")

                # get percent from detected column (if present)
                delta_val = None
                if DELTA_COL and DELTA_COL in row.index:
                    delta_val = _parse_pct(row.get(DELTA_COL))

                # fallback: try other common keys anyway
                if delta_val is None:
                    for key in ("change_pct", "change %", "change%", "delta_pct", "pct_change", "pct change", "delta", "Î”%", "growth %"):
                        if key in row.index:
                            delta_val = _parse_pct(row.get(key))
                            if delta_val is not None:
                                break

                delta_html = ""
                if delta_val is not None:
                    cls = "pos" if delta_val > 0 else ("neg" if delta_val < 0 else "neutral")
                    arrow = "â–²" if delta_val > 0 else ("â–¼" if delta_val < 0 else "â€¢")
                    delta_html = f'<div class="kpi-delta {cls}">{arrow} {abs(delta_val):.1f}%</div>'

                st.markdown(
                    f'''
                    <div class="kpi-inner">
                        <div class="kpi-title">{metric}</div>
                        <div class="kpi-value">{value} {unit}</div>
                        {delta_html}
                    </div>
                    ''',
                    unsafe_allow_html=True,
                )
else:
    st.info("No KPI data.")
st.markdown("---")

# ---------- Filters ----------
lookback = timedelta(days=int(date_filter_days))
now = datetime.now()
min_dt = now - lookback
inc_period = incidents[incidents["opened_at_dt"] >= min_dt] if "opened_at_dt" in incidents else incidents
chg_period = changes[changes["requested_at_dt"] >= min_dt] if "requested_at_dt" in changes else changes

# ---------- Sizes ----------
LARGE_FIGSIZE = (4.9, 3.0)
MED_FIGSIZE   = (4.4, 2.6)

# Fixed TOTAL heights for the three embed cards (include title + padding)
EMBED_CARD_TOTAL_LARGE = 350  # L2, L3 total card height
EMBED_CARD_TOTAL_MED   = 300  # M6 total card height

# ---------- Helpers ----------
def _data_uri(file_path: Path) -> str | None:
    if not file_path.exists():
        return None
    mime, _ = mimetypes.guess_type(str(file_path))
    if not mime:
        return None
    try:
        if mime.startswith("text/") and mime != "text/html":
            txt = file_path.read_text(encoding="utf-8", errors="ignore")
            data = b64encode(txt.encode("utf-8")).decode()
        else:
            data = b64encode(file_path.read_bytes()).decode()
        return f"data:{mime};base64,{data}"
    except Exception:
        return None

def render_embed_card_fixed(title: str, url: str = "", local_path: str = "", total_height: int = 350):
    """
    One-piece HTML card with a FIXED total height.
    Content scrolls inside; card never grows.
    """
    if url:
        content_html = f'<iframe src="{url}" style="width:100%;height:100%;border:0;display:block;"></iframe>'
    else:
        p = Path(local_path) if local_path else None
        if p and p.exists():
            suffix = p.suffix.lower()
            if suffix == ".pdf":
                data_uri = _data_uri(p)
                content_html = f'<embed src="{data_uri}" type="application/pdf" style="width:100%;height:100%;display:block;">' if data_uri else "<div>PDF not readable</div>"
            elif suffix in (".png", ".jpg", ".jpeg", ".gif", ".svg"):
                data_uri = _data_uri(p)
                content_html = f'<img src="{data_uri}" style="width:100%;height:100%;object-fit:contain;display:block;">' if data_uri else "<div>Image not readable</div>"
            elif suffix in (".html", ".htm"):
                html = p.read_text(encoding="utf-8", errors="ignore")
                content_html = f'<div style="width:100%;height:100%;overflow:auto;">{html}</div>'
            elif suffix == ".csv":
                try:
                    df = pd.read_csv(p).head(200)
                    table = df.to_html(index=False)
                    content_html = f'<div style="width:100%;height:100%;overflow:auto;background:#fff;">{table}</div>'
                except Exception as e:
                    content_html = f'<div style="display:flex;align-items:center;justify-content:center;height:100%;color:#6b7280;">CSV load failed: {e}</div>'
            else:
                content_html = f'<div style="display:flex;align-items:center;justify-content:center;height:100%;color:#6b7280;">Unsupported file: {p.name}</div>'
        else:
            content_html = '<div style="display:flex;align-items:center;justify-content:center;height:100%;color:#6b7280;">No content provided</div>'

    card_html = f"""
    <div style="height:{total_height}px; box-sizing:border-box; margin:0;
                border:1px solid #e7e7ea; border-radius:8px; background:#fff;
                box-shadow:0 1px 3px rgba(16,24,40,.06); display:flex; flex-direction:column;">
      <div style="flex:0 0 38px; padding:8px 10px; font-size:.92rem; font-weight:600; color:#111827; border-bottom:1px solid #f0f0f3;">
        {title}
      </div>
      <div style="flex:1 1 auto; min-height:0; padding:10px;">
        <div style="width:100%; height:100%; overflow:auto; border-radius:8px; background:#f9fafb; border:1px solid #e7e7ea;">
          {content_html}
        </div>
      </div>
    </div>
    """
    components.html(card_html, height=total_height, scrolling=False)

def render_change_table_card_fixed(title: str, df: pd.DataFrame, total_height: int):
    """
    Fixed-height card that shows a scrollable table of change requests.
    The card NEVER grows beyond total_height.
    """
    df = df.copy()

    if "requested_at_dt" in df.columns:
        df["requested_at"] = df["requested_at_dt"].dt.strftime("%Y-%m-%d %H:%M")
    if "scheduled_start_dt" in df.columns:
        df["scheduled_start"] = df["scheduled_start_dt"].dt.strftime("%Y-%m-%d %H:%M")
    if "scheduled_end_dt" in df.columns:
        df["scheduled_end"] = df["scheduled_end_dt"].dt.strftime("%Y-%m-%d %H:%M")

    preferred_cols = [
        "number", "type", "state",
        "requested_by", "assignment_group",
        "requested_at", "scheduled_start", "scheduled_end"
    ]
    display_cols = [c for c in preferred_cols if c in df.columns] or list(df.columns)

    if "requested_at_dt" in df.columns:
        df = df.sort_values("requested_at_dt", ascending=False)
    elif "requested_at" in df.columns:
        df = df.sort_values("requested_at", ascending=False)

    table_html = df[display_cols].to_html(index=False, border=0, classes="cr-table")

    card_html = f"""
    <style>
      .cr-wrap {{
        height: calc(100% - 48px);
        padding: 10px;
      }}
      .cr-pane {{
        width: 100%;
        height: 100%;
        overflow: auto;
        background: #fff;
        border: 1px solid #e7e7ea;
        border-radius: 8px;
      }}
      .cr-table {{
        width: 100%;
        border-collapse: collapse;
        font-size: 12.5px;
      }}
      .cr-table thead th {{
        position: sticky; top: 0;
        background: #f3f4f6;
        text-align: left;
        padding: 8px;
        border-bottom: 1px solid #e7e7ea;
        z-index: 1;
      }}
      .cr-table tbody td {{
        padding: 8px;
        border-bottom: 1px solid #f0f0f3;
        white-space: nowrap;
      }}
    </style>
    <div style="height:{total_height}px; box-sizing:border-box; margin:0;
                border:1px solid #e7e7ea; border-radius:8px; background:#fff;
                box-shadow:0 1px 3px rgba(16,24,40,.06); display:flex; flex-direction:column;">
      <div style="flex:0 0 48px; display:flex; align-items:center;
                  padding:0 10px; font-size:.92rem; font-weight:600; color:#111827;
                  border-bottom:1px solid #f0f0f3;">
        {title}
      </div>
      <div class="cr-wrap">
        <div class="cr-pane">
          {table_html}
        </div>
      </div>
    </div>
    """
    components.html(card_html, height=total_height, scrolling=False)

# ---------- Row B: 2 columns (60% / 40%) ----------
left, right = st.columns([0.60, 0.40])

# LEFT: 2Ã—2 Large widgets (L1â€“L4)
with left:
    # Row 1 (L1, L2)
    lrow1 = st.columns(2)
    with lrow1[0]:
        with card("L1 Â· Incidents by Priority"):
            if not inc_period.empty:
                counts = inc_period["priority"].value_counts().sort_index()
                fig, ax = plt.subplots(figsize=LARGE_FIGSIZE)
                counts.plot(kind="bar", ax=ax)
                ax.set_xlabel("Priority"); ax.set_ylabel("Count"); ax.set_title("")
                plt.tight_layout()
                st.pyplot(fig, clear_figure=True, use_container_width=True)
            else:
                st.info("No incidents in period.")
    with lrow1[1]:
        render_embed_card_fixed(
            title="L2 Â· SharePoint (Embedded Page)",
            url=EMBED_SHAREPOINT_URL,
            local_path=LOCAL_EMBED_L2_PATH,
            total_height=EMBED_CARD_TOTAL_LARGE
        )

    # Row 2 (L3, L4)
    lrow2 = st.columns(2)
    with lrow2[0]:
        render_embed_card_fixed(
            title="L3 Â· ServiceNow (Embedded Page)",
            url=EMBED_SERVICENOW_URL,
            local_path=LOCAL_EMBED_L3_PATH,
            total_height=EMBED_CARD_TOTAL_LARGE
        )
    with lrow2[1]:
        with card("L4 Â· 30-day Uptime Trend (CSV)"):
            if not trend.empty:
                fig, ax = plt.subplots(figsize=LARGE_FIGSIZE)
                ax.plot(trend["date"], trend["uptime_percent"])
                ax.set_ylabel("Uptime (%)"); ax.set_title("")
                ax.set_xticklabels(trend["date"].dt.strftime("%Y-%m-%d"), rotation=45, ha="right")
                plt.tight_layout()
                st.pyplot(fig, clear_figure=True, use_container_width=True)
            else:
                st.caption("No trend CSV data.")

# RIGHT: 2Ã—3 Medium widgets (M1â€“M6)
with right:
    # Row 1 (M1, M2)
    mrow1 = st.columns(2)
    with mrow1[0]:
        with card("M1 Â· Open Incidents by Assignment Group"):
            if not inc_period.empty:
                open_inc = inc_period[~inc_period["state"].isin(["Resolved","Closed"])]
                counts = open_inc["assignment_group"].value_counts().sort_values(ascending=False)
                fig, ax = plt.subplots(figsize=MED_FIGSIZE)
                counts.plot(kind="bar", ax=ax)
                ax.set_xlabel("Group"); ax.set_ylabel("Open"); ax.set_title("")
                plt.tight_layout()
                st.pyplot(fig, clear_figure=True, use_container_width=True)
            else:
                st.info("No incidents.")
    with mrow1[1]:
        with card("M2 Â· SLA Breach Trend (Derived)"):
            try:
                breach = DataService.sla_breach_rate_by_day(incidents, threshold_hrs=24, days=14)
                if breach.empty:
                    st.caption("No resolved incidents.")
                else:
                    fig, ax = plt.subplots(figsize=MED_FIGSIZE)
                    ax.plot(breach["date"], breach["breach_rate_pct"])
                    ax.set_ylabel("%"); ax.set_title("")
                    ax.set_xticklabels(breach["date"], rotation=45, ha="right")
                    plt.tight_layout()
                    st.pyplot(fig, clear_figure=True, use_container_width=True)
            except Exception as e:
                st.warning(f"Breach trend not available: {e}")

    # Row 2 (M3, M4)
    mrow2 = st.columns(2)
    with mrow2[0]:
        with card("M3 Â· MTTR â€” Last 14 Days"):
            mttr = DataService.mttr_by_day(incidents, days=14)
            if mttr.empty:
                st.caption("No MTTR data.")
            else:
                current = mttr["mttr_hrs"].iloc[-1]
                st.metric(label="Current MTTR (hrs)", value=round(float(current), 1))
                fig, ax = plt.subplots(figsize=MED_FIGSIZE)
                ax.plot(mttr["date"], mttr["mttr_hrs"])
                ax.set_ylabel("Hours"); ax.set_title("")
                ax.set_xticklabels(mttr["date"], rotation=45, ha="right")
                plt.tight_layout()
                st.pyplot(fig, clear_figure=True, use_container_width=True)
    with mrow2[1]:
        with card("M4 Â· Change Type Mix"):
            if not chg_period.empty:
                type_counts = chg_period["type"].value_counts()
                fig, ax = plt.subplots(figsize=MED_FIGSIZE)
                ax.pie(type_counts.values, labels=type_counts.index, autopct="%1.1f%%")
                ax.set_title("")
                plt.tight_layout()
                st.pyplot(fig, clear_figure=True, use_container_width=True)
            else:
                st.caption("No change data.")

    # Row 3 (M5, M6)
    mrow3 = st.columns(2)
    with mrow3[0]:
        with card("M5 Â· Top Owners by Updates (7d)"):
            if not sp.empty:
                rows = []
                for _, r in sp.iterrows():
                    owners = r.get("owners", [])
                    share = (r["files_updated_last7d"] / max(len(owners), 1)) if len(owners) else 0
                    for o in owners:
                        rows.append({"owner": o, "updates": share})
                df = pd.DataFrame(rows)
                if df.empty:
                    st.caption("No owner updates data.")
                else:
                    agg = df.groupby("owner")["updates"].sum().sort_values(ascending=False).head(10)
                    fig, ax = plt.subplots(figsize=MED_FIGSIZE)
                    agg.plot(kind="bar", ax=ax)
                    ax.set_ylabel("Est. Updates (7d)"); ax.set_title("")
                    plt.tight_layout()
                    st.pyplot(fig, clear_figure=True, use_container_width=True)
            else:
                st.caption("No SharePoint data.")

    with mrow3[1]:
        # Fixed-height M6 table card
        if chg_period.empty:
            render_change_table_card_fixed("M6 Â· Change Requests (Table)", pd.DataFrame(), EMBED_CARD_TOTAL_MED)
        else:
            render_change_table_card_fixed("M6 Â· Change Requests (Table)", chg_period, EMBED_CARD_TOTAL_MED)

st.markdown("---")
st.caption("Â© Demo wireframe â€” replace data loaders for Live mode after the presentation.")

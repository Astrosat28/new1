import { Component, OnInit } from '@angular/core';
import { CmdbService } from '../cmdb.service';
import { ApplicationWorkstreamService } from '../applicationworkstream.service';
import { ApplicationWorkstream } from '../applicationworkstream.model';

@Component({
  selector: 'app-list',
  templateUrl: './list.component.html',
  styleUrls: ['./list.component.css']
})
export class ListComponent implements OnInit {

  services: any[] = [];
  jobs: string[] = [];
  selectedLob: string | null = null;
  colorPalette: string[] = [
    '#2196f3', '#e91e63', '#4caf50', '#ff9800',
    '#9c27b0', '#795548', '#00bcd4', '#ff5722'
  ];

  workstreamsRaw: ApplicationWorkstream[] = [];
  uniqueWorkstreams: string[] = [];
  selectedWorkstream: string | null = null;

  uniqueValuestreams: string[] = [];
  selectedValuestream: string | null = null;

  relatedNames: string[] = [];

  constructor(
    private cmdbService: CmdbService,
    private appWsService: ApplicationWorkstreamService
  ) {}

  ngOnInit(): void {
    this.cmdbService.getAllServices().subscribe(data => {
      this.services = data;
      this.jobs = [...new Set(this.services.map((s: any) => s.lob))];
    });
  }

  toggleLob(lob: string | null): void {
    this.selectedLob = lob;
    this.selectedWorkstream = null;
    this.selectedValuestream = null;
    this.relatedNames = [];

    if (lob === null) {
      this.uniqueWorkstreams = [];
      return;
    }

    this.appWsService.getWorkstreamsByLob(lob).subscribe({
      next: data => {
        this.workstreamsRaw = data;
        this.uniqueWorkstreams = [...new Set(data.map(ws => ws.workstream))];
      },
      error: err => console.error('Failed to fetch workstreams:', err)
    });
  }

  toggleWorkstream(ws: string): void {
    this.selectedWorkstream = ws;
    this.selectedValuestream = null;
    this.relatedNames = [];

    const filtered = this.workstreamsRaw.filter(w => w.workstream === ws);
    this.uniqueValuestreams = [...new Set(filtered.map(w => w.valuestream))];
  }

  toggleValuestream(vs: string): void {
    this.selectedValuestream = vs;

    const filtered = this.workstreamsRaw.filter(w =>
      w.workstream === this.selectedWorkstream && w.valuestream === vs
    );
    this.relatedNames = [...new Set(filtered.map(w => w.name))];
  }
}

<!-- LOB cards -->
<div class="lob-container">
  <div *ngFor="let lob of jobs; let i = index"
       class="job-row"
       [ngClass]="{'selected-lob': selectedLob === lob}"
       [style.background]="colorPalette[i % colorPalette.length]"
       (click)="toggleLob(lob)">
    {{ lob }}
  </div>
  <div class="job-row clear-btn" *ngIf="selectedLob" (click)="toggleLob(null)">Clear</div>
</div>

<!-- Workstreams -->
<div *ngIf="uniqueWorkstreams.length > 0" class="lob-container">
  <div *ngFor="let ws of uniqueWorkstreams"
       class="job-row"
       [ngClass]="{'selected-lob': selectedWorkstream === ws}"
       [style.background]="'#607d8b'"
       (click)="toggleWorkstream(ws)">
    {{ ws }}
  </div>
</div>

<!-- Valuestreams -->
<div *ngIf="uniqueValuestreams.length > 0" class="lob-container">
  <div *ngFor="let vs of uniqueValuestreams"
       class="job-row"
       [ngClass]="{'selected-lob': selectedValuestream === vs}"
       [style.background]="'#9e9e9e'"
       (click)="toggleValuestream(vs)">
    {{ vs }}
  </div>
</div>

<!-- Application Names -->
<div *ngIf="relatedNames.length > 0" class="workstream-table-container">
  <h3>Applications under {{ selectedValuestream }}</h3>
  <ul>
    <li *ngFor="let name of relatedNames">{{ name }}</li>
  </ul>
</div>

ul {
  list-style-type: disc;
  padding-left: 20px;
  color: #333;
}





mmmmmmmm

import { Component, OnInit } from '@angular/core';
import { CmdbService } from '../cmdb.service';
import { ApplicationWorkstreamService } from '../applicationworkstream.service';
import { ApplicationWorkstream } from '../applicationworkstream.model';

@Component({
  selector: 'app-list',
  templateUrl: './list.component.html',
  styleUrls: ['./list.component.css']
})
export class ListComponent implements OnInit {

  services: any[] = [];
  jobs: string[] = [];
  selectedLob: string | null = null;
  colorPalette: string[] = [
    '#2196f3', '#e91e63', '#4caf50', '#ff9800',
    '#9c27b0', '#795548', '#00bcd4', '#ff5722'
  ];
  workstreams: ApplicationWorkstream[] = [];

  constructor(
    private cmdbService: CmdbService,
    private appWsService: ApplicationWorkstreamService
  ) {}

  ngOnInit(): void {
    this.cmdbService.getAllServices().subscribe(data => {
      this.services = data;
      this.jobs = [...new Set(this.services.map((s: any) => s.lob))];
    });
  }

  toggleLob(lob: string | null): void {
    this.selectedLob = lob;
    if (lob === null) {
      this.workstreams = [];
      return;
    }

    this.appWsService.getWorkstreamsByLob(lob).subscribe({
      next: data => this.workstreams = data,
      error: err => console.error('Failed to fetch workstreams:', err)
    });
  }
}


<div class="lob-container">
  <div *ngFor="let lob of jobs; let i = index"
       class="job-row"
       [ngClass]="{'selected-lob': selectedLob === lob}"
       [style.background]="colorPalette[i % colorPalette.length]"
       (click)="toggleLob(lob)">
    {{ lob }}
  </div>
  <div class="job-row clear-btn" *ngIf="selectedLob" (click)="toggleLob(null)">Clear</div>
</div>

<div *ngIf="workstreams.length > 0" class="workstream-table-container">
  <h3>Associated Workstreams</h3>
  <table class="mat-table">
    <thead>
      <tr>
        <th>Name</th>
        <th>Workstream</th>
        <th>Valuestream</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let ws of workstreams">
        <td>{{ ws.name }}</td>
        <td>{{ ws.workstream }}</td>
        <td>{{ ws.valuestream }}</td>
      </tr>
    </tbody>
  </table>
</div>


.lob-container {
  display: flex;
  flex-wrap: wrap;
  margin-bottom: 1rem;
  gap: 10px;
}

.job-row {
  padding: 8px 16px;
  color: white;
  border-radius: 8px;
  cursor: pointer;
  font-weight: bold;
}

.selected-lob {
  border: 2px solid black;
}

.clear-btn {
  background: #b0bec5 !important;
  color: #000;
}

.workstream-table-container {
  margin-top: 20px;
}

.mat-table {
  width: 100%;
  border-collapse: collapse;
}

.mat-table th, .mat-table td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}



package com.example.demo.controller;

import com.example.demo.entity.ApplicationWorkstream;
import com.example.demo.service.ApplicationWorkstreamService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/workstreams")
public class ApplicationWorkstreamController {

    private final ApplicationWorkstreamService service;

    @Autowired
    public ApplicationWorkstreamController(ApplicationWorkstreamService service) {
        this.service = service;
    }

    @GetMapping("/{lob}")
    public List<ApplicationWorkstream> getWorkstreamsByLob(@PathVariable String lob) {
        return service.getWorkstreamsByLob(lob);
    }
}



package com.example.demo.service;

import com.example.demo.entity.ApplicationWorkstream;
import com.example.demo.repository.ApplicationWorkstreamRepository;
import com.example.demo.repository.CmdbRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class ApplicationWorkstreamService {

    private final CmdbRepository cmdbRepository;
    private final ApplicationWorkstreamRepository appWsRepo;

    @Autowired
    public ApplicationWorkstreamService(CmdbRepository cmdbRepository,
                                        ApplicationWorkstreamRepository appWsRepo) {
        this.cmdbRepository = cmdbRepository;
        this.appWsRepo = appWsRepo;
    }

    public List<ApplicationWorkstream> getWorkstreamsByLob(String lob) {
        // Step 1: get apm_ids from cmdb_ci_service where lob = :lob
        List<String> apmIds = cmdbRepository.findApmIdsByLob(lob);

        // Step 2: get workstreams from applicationworkstream using those apm_ids
        return appWsRepo.findByApmIdIn(apmIds);
    }
}



html
<h2 class="title">LFG – Application Overview</h2>

<!-- ░░░ LOB tiles row ░░░ -->
<div class="lob-row">
  <div
    class="lob-card"
    [class.active]="selectedLob === null"
    (click)="toggleLob(null)">
     All
  </div>

  <div
    *ngFor="let lob of lobs; let i = index"
    class="lob-card"
    [class.active]="selectedLob === lob"
    [style.background]="colorPalette[i % colorPalette.length]"
    (click)="toggleLob(lob)">
    {{ lob }}
  </div>
</div>

<!-- ░░░ Data table ░░░ -->
<table mat-table [dataSource]="dataSource" class="mat-elevation-z1 services-table">

  <!-- Name -->
  <ng-container matColumnDef="name">
    <th mat-header-cell *matHeaderCellDef>Name</th>
    <td mat-cell        *matCellDef="let r">{{ r.name }}</td>
  </ng-container>

  <!-- Description -->
  <ng-container matColumnDef="shortDescription">
    <th mat-header-cell *matHeaderCellDef>Description</th>
    <td mat-cell        *matCellDef="let r">{{ r.shortDescription }}</td>
  </ng-container>

  <!-- IT Owner -->
  <ng-container matColumnDef="itOwner">
    <th mat-header-cell *matHeaderCellDef>IT Owner</th>
    <td mat-cell        *matCellDef="let r">{{ r.itOwner }}</td>
  </ng-container>

  <!-- IT Owner Manager -->
  <ng-container matColumnDef="itOwnerManager">
    <th mat-header-cell *matHeaderCellDef>IT Owner Manager</th>
    <td mat-cell        *matCellDef="let r">{{ r.itOwnerManager }}</td>
  </ng-container>

  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
  <tr mat-row        *matRowDef="let row; columns: displayedColumns;"></tr>
</table>

.ts
/* src/app/manager-tiles/manager-tiles.component.ts
   ----------------------------------------------- */
import { CommonModule } from '@angular/common';
import { HttpClientModule } from '@angular/common/http';
import {
  Component,
  OnInit,
} from '@angular/core';
import {
  MatTableModule,
  MatTableDataSource,
} from '@angular/material/table';

/* ✅  adjust this path to where your service lives  */
import { CmdbService, CmdbServiceModel } from '../cmdb.service';

@Component({
  selector: 'app-manager-tiles',
  standalone: true,
  imports: [CommonModule, HttpClientModule, MatTableModule],
  templateUrl: './manager-tiles.component.html',
  styleUrls: ['./manager-tiles.component.scss']
})
export class ManagerTilesComponent implements OnInit {

  /* ----------------------------------------------------------------- */
  /* 1.  raw data from API + Angular-Material table wrapper            */
  /* ----------------------------------------------------------------- */
  services: CmdbServiceModel[] = [];
  dataSource = new MatTableDataSource<CmdbServiceModel>();
  displayedColumns = ['name', 'shortDescription', 'itOwner', 'itOwnerManager'];

  /* ----------------------------------------------------------------- */
  /* 2.  LOB tile state                                                */
  /* ----------------------------------------------------------------- */
  lobs: string[] = [];           // unique list extracted once on load
  selectedLob: string | null = null;  // currently-clicked tile; null = “All”

  /* ----------------------------------------------------------------- */
  /* 3.  Colour palette for tiles                                      */
  /* ----------------------------------------------------------------- */
  colorPalette: string[] = [
    '#2196f3',  // blue
    '#e91e63',  // pink
    '#4caf50',  // green
    '#ff9800',  // orange
    '#9c27b0',  // purple
    '#795548',  // brown
    '#00bcd4',  // cyan
    '#ff5722'   // deep-orange
  ];

  /* ----------------------------------------------------------------- */
  /* 4.  Lifecycle                                                    */
  /* ----------------------------------------------------------------- */
  constructor(private cmdbService: CmdbService) {}

  ngOnInit(): void {
    this.cmdbService.getServices().subscribe({
      next: data => {
        /* 4-A store everything once                                            */
        this.services = data;
        this.dataSource.data = data;

        /* 4-B derive unique LOB list                                           */
        this.lobs = Array
          .from(new Set(data.map(r => r.u_line_of_business)))
          .sort();
      },
      error: err => console.error('Error loading services', err)
    });
  }

  /* ----------------------------------------------------------------- */
  /* 5.  Tile click handler                                            */
  /* ----------------------------------------------------------------- */
  toggleLob(lob: string | null): void {
    /* clicking the same tile again clears filter (“All”) */
    if (this.selectedLob === lob) {
      this.selectedLob = null;
      this.dataSource.data = this.services;
      return;
    }

    this.selectedLob = lob;
    this.dataSource.data = lob
      ? this.services.filter(s => s.u_line_of_business === lob)
      : this.services;
  }
}


css.
/* --- headline --- */
.title { text-align: center; margin: 0 0 24px; }

/* --- LOB row --- */
.lob-row {
  display: flex;
  flex-wrap: wrap;
  gap: 16px;
  justify-content: center;
  margin-bottom: 24px;

  .lob-card {
    flex: 0 0 110px;           /* fixed square tile */
    height: 110px;
    background: #607d8b;       /* default grey for “All” */
    color: #fff;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 8px;
    font-size: 0.9rem;
    text-align: center;
    cursor: pointer;
    user-select: none;
    transition: transform .18s;

    &:hover   { transform: translateY(-4px) scale(1.03); }
    &.active  { box-shadow: inset 0 -4px 0 rgba(0,0,0,.35); }
  }
}

/* --- Material table tweaks (optional) --- */
.services-table { width: 100%; }
.mat-header-cell, .mat-cell { padding: 8px 12px; }

........



import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

export interface CmdbServiceModel {
  name: string;
  shortDescription: string;
  itOwner: string;
  itOwnerManager: string;
}

@Injectable({ providedIn: 'root' })
export class CmdbService {
  private apiUrl = 'http://localhost:8080/api/services';

  constructor(private http: HttpClient) {}

  getServices(): Observable<CmdbServiceModel[]> {
    return this.http.get<CmdbServiceModel[]>(this.apiUrl);
  }
}
....
import { Component, OnInit } from '@angular/core';
import { CmdbService, CmdbServiceModel } from '../../services/cmdb.service';

@Component({
  selector: 'app-manager',
  templateUrl: './manager.component.html',
  styleUrls: ['./manager.component.scss']
})
export class ManagerComponent implements OnInit {
  services: CmdbServiceModel[] = [];

  constructor(private cmdbService: CmdbService) {}

  ngOnInit(): void {
    this.cmdbService.getServices().subscribe({
      next: data => this.services = data,
      error: err => console.error('Error loading services', err)
    });
  }
}
...
<div class="container mt-4">
  <h2>IT Services - Manager View</h2>
  <table class="table table-bordered table-hover mt-3">
    <thead class="table-dark">
      <tr>
        <th>Name</th>
        <th>Description</th>
        <th>IT Owner</th>
        <th>IT Owner Manager</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let service of services">
        <td>{{ service.name }}</td>
        <td>{{ service.shortDescription }}</td>
        <td>{{ service.itOwner }}</td>
        <td>{{ service.itOwnerManager }}</td>
      </tr>
    </tbody>
  </table>
</div>
..
h2 {
  text-align: center;
  margin-bottom: 20px;
}
.container {
  max-width: 900px;
  margin: auto;
}





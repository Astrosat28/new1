<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>demo</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
	
	<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.20</version>
    <scope>provided</scope>
    </dependency>
 <dependency>   
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>

<dependency>
    <groupId>com.microsoft.sqlserver</groupId>
    <artifactId>mssql-jdbc</artifactId>
    <version>8.4.1.jre11</version>
</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <version>3.0.0-M5</version>
</plugin>
			<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.8.1</version>
    <configuration>
        <source>11</source>
        <target>11</target>
    </configuration>
</plugin>

		</plugins>
	</build>

</project>

----pom===
package com.example.emailcontent.service;

import com.example.emailcontent.model.FVReleaseEmailContent;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class FVReleaseEmailContentService {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    // Fetch all file names from the database
    public List<String> getAllFileNames() {
        String sql = "SELECT FileName FROM FVRelease_eMails_Content";  // Correct column name
        return jdbcTemplate.queryForList(sql, String.class);
    }

    // Fetch all email content with details (e.g., fileName, folder, etc.)
    public List<FVReleaseEmailContent> getAllEmailContent() {
        String sql = "SELECT ID, FileName, Folder, ParentFolder, Path FROM FVRelease_eMails_Content";  // Correct column names

        return jdbcTemplate.query(sql, (rs, rowNum) -> {
            FVReleaseEmailContent emailContent = new FVReleaseEmailContent();
            emailContent.setFileName(rs.getString("FileName"));
            emailContent.setFolder(rs.getString("Folder"));
            emailContent.setParentFolder(rs.getString("ParentFolder"));
            emailContent.setPath(rs.getString("Path"));
            return emailContent;
        });
    }
}

======service-----
package com.example.emailcontent.model;

public class FVReleaseEmailContent {
    private String fileName;
    private String folder;
    private String parentFolder;
    private String path;

    // Getters and Setters
    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    public String getFolder() {
        return folder;
    }

    public void setFolder(String folder) {
        this.folder = folder;
    }

    public String getParentFolder() {
        return parentFolder;
    }

    public void setParentFolder(String parentFolder) {
        this.parentFolder = parentFolder;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }
}

---model---
package com.example.emailcontent.controller;

import com.example.emailcontent.model.FVReleaseEmailContent;
import com.example.emailcontent.service.FVReleaseEmailContentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api/emails")
public class FVReleaseEmailContentController {

    @Autowired
    private FVReleaseEmailContentService service;

    // Endpoint to get all file names
    @GetMapping("/filenames")
    public List<String> getAllFileNames() {
        return service.getAllFileNames();
    }

    // Endpoint to get all email content details
    @GetMapping
    public List<FVReleaseEmailContent> getAllEmailContent() {
        return service.getAllEmailContent();
    }
}

=========================================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Network Graph</title>
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <style>
        svg {
            border: 1px solid black;
        }
        .tooltip {
            position: absolute;
            background-color: white;
            padding: 5px;
            border: 1px solid #ccc;
            font-family: Arial, sans-serif;
            font-size: 14px;
            pointer-events: none;
            display: none;
        }
    </style>
</head>
<body>
    <svg width="1300" height="800"></svg>
    <div class="tooltip" id="tooltip"></div>
    <script>
   function fetchData() {
    const data = {
        "responseStatus": "OK",
        "totalrecords": 1,
        "label": "app",
        "names": [
            "ccss & NBSTP",
            "Delta-caesar",
            "delta-online check request",
            "fnms",
            "TAI",
            "pep+"
        ]
    };

    const nodesData = data.names.map((name, index) => {
        return {
            id: index + 1,
            responseStatus: data.responseStatus,
            totalrecords: data.totalrecords,
            label: data.label,
            names: name
        };
    });

    return nodesData;
}


function fetchNewData() {
    const data = [
        // Your static JSON data for new nodes here, e.g.
        {
            "id": 11,
            "name": "ramu kaka",
            "email": "jbanaea",
            "phone": "45434",
            "website": "gr",
            "company": {
                "name": " Enterprises"
            }
        }
    ];

    return data;
}




        function createLinks(nodes) {
            const links = [];
            nodes.forEach((source, i) => {
                nodes.slice(i + 1).forEach(target => {
                    links.push({source: source.id, target: target.id});
                });
            });
            return links;
        }

        function showTooltip(event, nodeData) {
    const tooltip = document.getElementById('tooltip');
    tooltip.style.display = 'block';
    tooltip.style.left = `${event.clientX}px`;
    tooltip.style.top = `${event.clientY}px`;

    tooltip.innerHTML = `
        <strong>${nodeData.names}</strong><br>
        Response Status: ${nodeData.responseStatus}<br>
        Total Records: ${nodeData.totalrecords}<br>
        Label: ${nodeData.label}
    `;
}



        function hideTooltip() {
            const tooltip = document.getElementById('tooltip');
            tooltip.style.display = 'none';
        }

        function getId(maxId) {
            return maxId + Math.floor(Math.random() * 1000) + 1;
        }

        async function expandNode(event, nodeData, simulation) {
    const newNodes = await fetchNewData();
    const maxId = Math.max(...nodes.map(d => d.id));
    newNodes.forEach(d => {
        d.id = getId(maxId);
        d.x = nodeData.x;
        d.y = nodeData.y;
        d.displayName = `${d.company.name} (${d.website})`; // Add website name to displayName property
        nodes.push(d);
        links.push({source: nodeData.id, target: d.id});
    });

    updateGraph(simulation);
}



        function updateGraph(simulation) {
            link = link.data(links).join('line');
            node = node.data(nodes, d => d.id).join(enter => enter.append('circle'));

            node.attr('r', 5)
                .attr('fill', '#69b3a2')
                .attr('stroke', '#fff')
                .attr('stroke-width', 1.5)
                .call(drag(simulation))
                .on('mouseover', showTooltip)
                .on('dblclick', (event, d) => expandNode(event, d, simulation))
                .on('mouseout', hideTooltip);

            simulation.nodes(nodes);
          
            simulation.force('link').links(links);
            simulation.alpha(0.3).restart();
        }

        async function createNetworkGraph() {
            nodes = await fetchData();
            links = createLinks(nodes);

            const svg = d3.select('svg');
            const width = parseInt(svg.attr('width'));
            const height = parseInt(svg.attr('height'));

            simulation = d3.forceSimulation(nodes)
                .force('link', d3.forceLink(links).id(d => d.id).distance(100))
                .force('charge', d3.forceManyBody().strength(-200))
                .force('center', d3.forceCenter(width / 2, height / 2));

            link = svg.append('g')
                .attr('stroke', '#999')
                .attr('stroke-opacity', 0.6)
                .selectAll('line')
                .data(links)
                .join('line')
                .attr('stroke-width', 2);

            node = svg.append('g')
                .attr('stroke', '#fff')
                .attr('stroke-width', 1.5)
                .selectAll('circle')
                .data(nodes)
                .join('circle');

            updateGraph(simulation);

            simulation.on('tick', () => {
                link
                    .attr('x1', d => d.source.x)
                    .attr('y1', d => d.source.y)
                    .attr('x2', d => d.target.x)
                    .attr('y2', d => d.target.y);

                node
                    .attr('cx', d => d.x)
                    .attr('cy', d => d.y);
            });
        }

        function drag(simulation) {
            function dragstarted(event) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                event.subject.fx = event.subject.x;
                event.subject.fy = event.subject.y;
            }

            function dragged(event) {
                event.subject.fx = event.x;
                event.subject.fy = event.y;
            }

            function dragended(event) {
                if (!event.active) simulation.alphaTarget(0);
                event.subject.fx = null;
                event.subject.fy = null;
            }

            return d3.drag()
                .on('start', dragstarted)
                .on('drag', dragged)
                .on('end', dragended);
        }

        let nodes, links, link, node, simulation;
        createNetworkGraph();
    </script>
</body>
</html>

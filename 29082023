html 

  <div class="header">
    Disruption Reporting
  </div>
  <div class="dropdown-container-lob">
    <label class="dropdown-label" for="lob">LOB:</label>
    <select class="dropdown" name="lob" id="lob" (change)="onLobChange($event.target['value'])">
        <option value="">Select LOB</option>
        <option value="Annuity">Annuity</option>
        <option value="Life">Life</option>
        <option value="PS">PS</option>
    </select>
</div>
<div class="dropdown-container-month-year">
    <label class="dropdown-label" for="month-year">Month-Year:</label>
    <select class="dropdown" name="month-year" id="month-year" (change)="onMonthYearChange($event.target['value'])">
        <option value="">Select Month-Year</option>
        <option *ngFor="let monthYear of monthYears" [value]="monthYear">{{ monthYear.split('-')[0] }}-{{ monthYear.split('-')[1] }}</option>
    </select>
</div>


  <div class="table1-container">
  <table class="table1">
    <thead class="header1">
      <tr>
        <th>Action</th>
        <th>LOB</th>
        <th>Enterprise Issue</th>              
        <th>Business Analyst</th>
        <th>Present in Business Tracker</th>
        <th>Incident</th>
        <th>Issue Description</th>
        <th>Incident Start Datetime</th>
        <th>Incident End Datetime</th>
        <th>Incident Priority</th>
        <th>AnyChildIssues</th>
        <th>Business Area Impacted</th>
        <th>Business Impact</th>
        <th>External Impact</th>
        <th>Impacted Apps</th>
        <th>Disruption Hours</th>
        <th>BA Support Time</th>
        <th>Annuity</th>
        <th>Annuity Overtime</th>
        <th>Annuity Business Lost Production</th>
        <th>Life</th>
        <th>Problem</th>
        <th>MTRS Hours</th>
        <th>Comments</th>
        <th>Month</th>

      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let row of data">
        <td><button (click)="onEdit(row)">Edit</button></td>
        <td>{{row.lob}}</td>
        <td>{{row.enterpriseIssue}}</td>
        <td>{{row.businessAnalyst}}</td>
        <td>{{row.presentInBusinessTracker}}</td>
        <td>{{row.incident}}</td>
        <td>{{row.issueDescription}}</td>
        <td>{{row.incidentStartDatetime}}</td>
        <td>{{row.incidentEndDatetime}}</td>
        <td>{{row.incidentPriority}}</td>
        <td>{{row.anyChildIssues}}</td>
        <td>{{row.businessAreaImpacted}}</td>
        <td>{{row.businessImpact}}</td>
        <td>{{row.externalImpact}}</td>
        <td>{{row.impactedApps}}</td>
        <td>{{row.disruptionHours}}</td>
        <td>{{row.baSupportTime}}</td>
        <td>{{row.annuity}}</td>
        <td>{{row.annuityOvertime}}</td>
        <td>{{row.annuityBusinessLostProduction}}</td>
        <td>{{row.life}}</td>
        <td>{{row.problem}}</td>
        <td>{{row.mtrsHours}}</td>
        <td>{{row.comments}}</td>
        <td>{{row.startmonth}}</td>

      </tr>
    </tbody>
  </table>
  </div>

 
   <div class="form-container">
     <form action="/submit" method="post" (submit)="onFormSubmit($event)">
            <!--section2 Business Analyst-->
          <fieldset class="section2fieldset">
             <legend>
                <h3 style="font-size: 14px;">Business Analyst</h3>
             </legend>
          </fieldset>

          <table class="section2businessAnalyst">
             <tr>
                <td class="balabel">Name</td>
               <!-- <td class="bainput"><input type="text" placeholder="Enter Name..." style="width:50%;"></td>
                <td class="bainput"><input type="text" [(ngModel)]="editingItem.businessAnalyst" placeholder="Enter Name..." style="width:50%;"></td>-->
               <input type="text" name="businessAnalyst" [(ngModel)]="editingItem.businessAnalyst" placeholder="Enter Name..." style="width:50%;">

                <td class="balabel">BA LOB:</td>
                <td >
                
                    <select style="width: 46%;" id="section2businessAnalyst" name="businessanalystdd">
                        <option value="Annuity">Annuity</option>
                        <option value="Life">Life</option>
                        <option value="ps">PS</option>
                        
                    </select></td>
             </tr>
          </table>

          <!--section4 Business Impact Analysis-->
          <fieldset class="section3fieldset">
            <legend>
               <h3 style="font-size: 14px;">Ticket Information</h3>
            </legend>
         </fieldset>

         <table class="section3ticketinformation">
            <tr style="padding-bottom: 15px;">
               <td class="ticketlabel">Any Existing SNOW ?</td>
               <td class="ticketinput"><input type="checkbox" style="width:20%;"></td>

               <td class="ticketlabel">Enterprise Issue</td>
               <td class="ticketinput"><input type="checkbox" ></td>

               <td class="ticketlabel">Ticket Type</td>
               <td >
                
                <select id="section3ticketdd" name="ticketdd">
                    <option value="incidentnumber">Incident Number</option>
                    <option value="ritm">RITM</option>
                    <option value="pswr">PSWR</option>
                    <option value="rps">RPS</option>
                </select></td>
               
            </tr>
            <!--row2--><br>
            <tr style="padding-bottom: 15px;">
                
                <td class="ticketlabel">Ticket Number</td>
                <td class="ticketinput"><input type="text" [(ngModel)]="editingItem.incident" name="ticketNumber">
                </td>
                
 
                <td class="ticketlabel">Priority</td>
                <td >
                 
                 <select id="section3ticketdd" name="ticketdd" style="width: 74%;">
                     <option value="incidentnumber" >Critical</option>
                     <option value="ritm">High</option>
                     <option value="pswr">Medium</option>
                     <option value="rps">Low</option>
                 </select>
                </td>

                <td class="ticketlabel">Start Datetime</td>
                <td> <input type="datetime-local" style="width: 50%;"></td>
                
            </tr>
            <br>
            <tr style="padding-bottom: 15px;">
                <td class="ticketlabel" >End Datetime</td>
                <td> <input type="datetime-local" style="width: 50%;"></td>

                <td class="ticketlabel">Issue Description</td>
                <td class="ticketinput"><input type="text" style="width:253%; height: 50px;"></td>
                                        
             </tr>
             <br>
             <!--row4-->
             <tr style="padding-bottom: 15px;">
                <td class="ticketlabel">Any Child Ticket?</td>
                <td> <input type="checkbox" style="width: 20px;"></td>

                <td class="ticketlabel">List Child Issue</td>
                <td class="ticketinput"><input type="text" style="width:253%; "></td>
                                        
             </tr>
         </table>


         <!--section5 Problem-->
         <fieldset class="section4fieldset">
            <legend>
               <h3 style="font-size: 14px;">Business Impact Analysis</h3>
            </legend>
         </fieldset>

         <table class="section4bia">
            <tr style="height:50%;">
               <td class="bialabel">Business Area Impacted</td>
               <td class="biainput"><input type="text" style="height:50%;"></td>

               <td class="bialabel">Business Impact</td>
               <td class="biainput"><input type="text" style="height:50%;"></td>

               <td class="bialabel">External Impact</td>
               <td class="biainput"><input type="text" style="height:50%;"></td>

             
               
            </tr>
            <!--row2--><br>
            <tr style="height:50%;">
                <td class="bialabel">Impacted Apps</td>
                <td class="biainput"><input type="text" style="height:50%;"></td>
 
                <td class="bialabel">Overtime</td>
                <td class="biainput"><input type="text" style="height:50%;"></td>
 
                <td class="bialabel">Business Lost Production</td>
                <td class="biainput"><input type="text" style="height:50%;"></td>
 
              
                
             </tr>


             <tr>
                <td class="bialabel" for="enablefields1">Annuity</td>
                <td class="biainput"><input type="checkbox" [checked]="isCheckedOption1" name="enableFields1" style="width:20px"/></td>
                 
                <td class="bialabel" for="enablefields1">Overtime</td>
                <td class="biainput"><input type="text" [disabled]="!isCheckedOption1"/></td>
             
                <td class="bialabel" for="enablefields1">Business Lost Production</td>
                <td class="biainput"><input type="text" [disabled]="!isCheckedOption1"/></td>
             
            
            </tr>
            
            <tr>
                <td class="bialabel" for="enablefields1">Life</td>
                <td class="biainput"><input type="checkbox" [checked]="isCheckedOption1" name="enableFields1" style="width:20px"/></td>
                 
                <td class="bialabel" for="enablefields1">Overtime</td>
                <td class="biainput"><input type="text" [disabled]="!isCheckedOption1"/></td>
             
                <td class="bialabel" for="enablefields1">Business Lost Production</td>
                <td class="biainput"><input type="text" [disabled]="!isCheckedOption1"/></td>
             
            
            </tr>
            <tr>
                <td class="bialabel" for="enablefields1">PS</td>
                <td class="biainput"><input type="checkbox" [checked]="isCheckedOption1" name="enableFields1" style="width:20px"/></td>
                 
                <td class="bialabel" for="enablefields1">Overtime</td>
                <td class="biainput"><input type="text" [disabled]="!isCheckedOption1"/></td>
             
                <td class="bialabel" for="enablefields1">Business Lost Production</td>
                <td class="biainput"><input type="text" [disabled]="!isCheckedOption1"/></td>
             
            
            </tr>
         
         </table>

            <!--section5 Problem-->
            <fieldset class="section5fieldset">
                <legend>
                   <h3 style="font-size: 14px;">Problem</h3>
                </legend>
             </fieldset>
    
             <table class="section5p">
                <tr >
                   <td class="plabel">Problem</td>
                   <td class="pinput"><input type="text" ></td>
                   <td class="plabel">Root Cause</td>
                   <td class="pinput"><input type="text" ></td>
                   <td class="plabel">Root Cause Subcategory</td>
                   <td class="pinput"><input type="text" ></td>
                   <td class="plabel">MTRS Hours</td>
                   <td class="pinput"><input type="text" ></td>
    
                 
                   
                </tr>
               
               
             
             </table>

             <table class="last3">
                <tr>
                    <td class="lastlabel" style="width:10%">Long Term Solution</td>
                    <td class="lastinput"><input type="text" style="width:95%"/></td>
                </tr>

                <tr>
                    <td class="lastlabel" style="width:10%">Change/Release Details</td>
                    <td class="lastinput"><input type="text" style="width:95%"/></td>
                </tr>

                <tr>
                    <td class="lastlabel" style="width:10%">Comments</td>
                    <td class="lastinput"><input type="text" style="width:95%"/></td>
                </tr>
               </table>

               <button type="submit">Submit</button>


     </form>
   </div>
  
  ts
  import { Component, OnInit } from '@angular/core';
import { DataService } from '../reporting-data.service';
import { TrackerMaster } from '../reporting/TrackerMaster.model';
@Component({
  selector: 'app-reporting',
  templateUrl: './reporting.component.html',
  styleUrls: ['./reporting.component.css']
})
export class ReportingComponent implements OnInit {

  allData: any[] = [];
  data: any[] = [];
  monthYears: string[] = [];
  selectedMonth: string;
  selectedYear: string;
  selectedLob: string = '';

  constructor(private dataService: DataService) { }
  ngOnInit(): void {
    this.dataService.fetchData().subscribe(response => {
      this.allData = response;
      this.data = [];
    });

    this.dataService.fetchMonthYears().subscribe(monthYears => {
      if (Array.isArray(monthYears)) {
        this.monthYears = Array.from(new Set(monthYears)).reverse();
      } else {
        console.error('Unexpected data format for monthYears:', monthYears);
      }
    });
}


  onMonthYearChange(selectedMonthYear: string): void {
    const [month, year] = selectedMonthYear.split('-');
    this.selectedMonth = month.toLowerCase();
    this.selectedYear = '20' + year;
    this.filterData();
  }

  onLobChange(selectedLob: string): void {
    this.selectedLob = selectedLob;
    this.filterData();
    console.log(`Data for LOB '${this.selectedLob}':`, this.data);
  }

  private filterData(): void {
    if (this.selectedMonth && this.selectedYear) {
      this.data = this.allData.filter(row => {
        const startDate = new Date(row.startmonth);
        const monthName = startDate.toLocaleString('default', { month: 'long' }).toLowerCase();
        const year = startDate.getFullYear().toString();

        if (this.selectedLob) {
          return monthName === this.selectedMonth && year === this.selectedYear && row.lob === this.selectedLob;
        } else {
          return monthName === this.selectedMonth && year === this.selectedYear;
        }
      });
    } else {
      this.data = [];
    }
  }

  selected = [{ id: 1, name: "option1" }];
  selectedOption: string;
  isCheckedOption1 = false;

  onOptionChange() {
    this.isCheckedOption1 = this.selectedOption === 'option1';
  }

  editingRow: any = null;

  //onEdit(row: any): void {
   // this.editingRow = row;
 // }

  onSave(row: any): void {
    // Implement save logic here
    this.editingRow = null;
  }
  
  editingItem: any = {};

  onEdit(row: any) {
    this.editingItem = {...row};
  }
  onFormSubmit(event: Event) {
    event.preventDefault();
    
    if (this.editingItem) {
      const incidentNumber = this.editingItem.incident;
      
      this.dataService.updateData(incidentNumber, this.editingItem).subscribe(response => {
        // Handle response
        console.log(response);
        this.editingItem = null; // Reset after successful update
      });
    }
  }
}
  //onFormSubmit(event: Event) {
   // event.preventDefault();
  
   // if (this.editingItem) {
    //  const incidentKey = this.editingItem.incident;
    //  
    //  // Call your service to update data via REST API, for example:
    //  this.dataService.updateData(incidentKey, this.editingItem).subscribe(response => {
    //    // Handle response
      //  console.log(response);
     //   this.editingItem = null; // Reset after successful update
    //  });
   // }
 // }

  
masrer 
// tracker-master.model.ts

export class TrackerMaster {
    incident: string;
    // other fields...
  }


  import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { TrackerMaster } from '../app/reporting/TrackerMaster.model'
@Injectable({
  providedIn: 'root'
})
export class DataService {

  private dataEndpoint = 'http://localhost:8081/api/users';
  private monthYearsEndpoint = 'http://localhost:8081/api/months';

  constructor(private http: HttpClient) { }

  fetchData(): Observable<any[]> {
    return this.http.get<any[]>(this.dataEndpoint);
  }

  fetchMonthYears(): Observable<string[]> {
    return this.http.get<string[]>(this.monthYearsEndpoint);
  }
  updateData(incidentNumber: string, updatedUser: any): Observable<any> {
    const url = `http://localhost:8081/api/tracker/${incidentNumber}`;
    return this.http.put(url, updatedUser);
  }
  }
//updateData(incident: string, data: TrackerMaster): Observable<TrackerMaster> {
  //const url = `${this.dataEndpoint}/user/${incident}`;
  //return this.http.put<TrackerMaster>(url, data);
//}



java con
package com.example.demo.controller;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.example.demo.entity.AppUser;
import com.example.demo.entity.TrackerMaster;
import com.example.demo.service.UserService;
import org.springframework.web.bind.annotation.CrossOrigin;

import java.util.List;
@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/api") // This allows all mappings in this controller to begin with "/api"
public class UserController {
    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/user")
    public AppUser saveUser(@RequestBody AppUser user) {
        System.out.println("Received user data: " + user);
        return userService.saveUser(user);
    }

    @GetMapping("/users")
    public ResponseEntity<List<AppUser>> getAllUsers() {
        List<AppUser> appUsers = userService.getAllUsers();
        System.out.println("Fetched user data: " + appUsers);
        return new ResponseEntity<>(appUsers, HttpStatus.OK);
    }

    @GetMapping("/months")
    public ResponseEntity<List<String>> getFormattedMonths() {
        List<String> months = userService.getFormattedMonths();
        System.out.println("Fetched formatted months: " + months);
        return new ResponseEntity<>(months, HttpStatus.OK);
    }

    @PostMapping("/tracker")
    public TrackerMaster saveTrackerData(@RequestBody TrackerMaster trackerData) {
        System.out.println("Received tracker data: " + trackerData);
        return userService.saveTrackerData(trackerData);
    }

    @PutMapping("/tracker/{incident}")
    public ResponseEntity<TrackerMaster> updateTrackerByIncident(@PathVariable String incident, @RequestBody TrackerMaster updatedData) {
        TrackerMaster result = userService.updateTrackerByIncident(incident, updatedData);
        if (result != null) {
            return new ResponseEntity<>(result, HttpStatus.OK);
        }
        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
}

//@RestController
//public class UserController {
    //private final UserService userService;

    //public UserController(UserService userService) {
     //   this.userService = userService;
    //}

    //@PostMapping("/api/user")
    //public AppUser saveUser(@RequestBody AppUser user) {
        
         //   System.out.println("Received user data: " + user);
       // return userService.saveUser(user);
    //}

   //  @GetMapping("api/users")
    ////public ResponseEntity<List<AppUser>> getAllUsers() {
      //  List<AppUser> appUsers = userService.getAllUsers();
      //  System.out.println("Fetched user data: " + appUsers);
     //   return new ResponseEntity<>(appUsers, HttpStatus.OK);
    //}
   // @GetMapping("api/months")
    //public ResponseEntity<List<String>> getFormattedMonths() {
      //  List<String> months = userService.getFormattedMonths();
      //  System.out.println("Fetched formatted months: " + months);
      //  return new ResponseEntity<>(months, HttpStatus.OK);
    //}
   /// @PostMapping("/api/tracker")
//public TrackerMaster saveTrackerData(@RequestBody TrackerMaster trackerData) {
  //  System.out.println("Received tracker data: " + trackerData);
   // return userService.saveTrackerData(trackerData);
//}
//@PutMapping("/api/users/{incidentNumber}")
//public ResponseEntity<TrackerMaster> updateTrackerByIncident(@PathVariable String incidentNumber, @RequestBody TrackerMaster updatedData) {
   // TrackerMaster result = userService.updateTrackerByIncident(incidentNumber, updatedData);
   // if (result != null) {
    //    return new ResponseEntity<>(result, HttpStatus.OK);
   // }
   // return new ResponseEntity<>(HttpStatus.NOT_FOUND);
//}


//}
///@PutMapping("/api/user/{incident}")
//public ResponseEntity<TrackerMaster> updateUserByIncident(@PathVariable String incident, @RequestBody TrackerMaster updatedData) {
   // TrackerMaster result = userService.updateTrackerByIncident(incident, updatedData);
   // if (result == null) {
   //     return new ResponseEntity<>(HttpStatus.NOT_FOUND);
  //  }
  //  return new ResponseEntity<>(result, HttpStatus.OK);
//}

    /* mvn spring-boot:run
    @GetMapping("api/users/{startId}/{endId}")
    public ResponseEntity<List<AppUser>> getUsersInRange(@PathVariable Long startId, @PathVariable Long endId) {
        List<AppUser> appUsers = userService.getUsersInRange(startId, endId);
        System.out.println("Fetched user data: " + appUsers);
        return new ResponseEntity<>(appUsers, HttpStatus.OK);
    }
    @GetMapping("/api/users/month/{month}")
    public ResponseEntity<List<AppUser>> getUsersByMonth(@PathVariable String month) {
        List<AppUser> appUsers = userService.getUsersByMonth(month);
        System.out.println("Fetched user data for month: " + month + ", Data: " + appUsers);
        return new ResponseEntity<>(appUsers, HttpStatus.OK);
    }
  
        @PutMapping("/api/user/{id}")
public ResponseEntity<AppUser> updateUser(@PathVariable Long id, @RequestBody AppUser updatedUser) {
    AppUser existingUser = userService.getUserById(id);
    if (existingUser != null) {
        existingUser.setName(updatedUser.getName());
        existingUser.setNumber(updatedUser.getNumber());
        
        userService.saveUser(existingUser);
        return new ResponseEntity<>(existingUser, HttpStatus.OK);
    } else {
        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
}*/




appuser
package com.example.demo.entity;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

import java.time.LocalDateTime;

import javax.persistence.Column;
import lombok.Data;
import javax.persistence.Table;
@Data
@Entity
@Table(name = "TrackerMasterView", schema = "dbo")

public class AppUser {
    @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
    
    private Long id;
    
      @Column(name = "LOB")
    private String lob;

    @Column(name = "[Enterprise Issue]")
    private String enterpriseIssue;

    @Column(name = "[Business Analyst]")
    private String businessAnalyst;

    @Column(name = "[Present in Business Tracker]")
    private String presentInBusinessTracker;

    @Column(name = "Incident")
    private String incident;

    @Column(name = "[Issue Description]")
    private String issueDescription;

    @Column(name = "[Incident Start Datetime]")
    private LocalDateTime incidentStartDatetime;

    @Column(name = "[Incident End Datetime]")
    private LocalDateTime incidentEndDatetime;

    @Column(name = "[Incident Priority]")
    private String incidentPriority;

    @Column(name = "[AnyChildIssues]")
    private String anyChildIssues;

    @Column(name = "[Business Area Impacted]")
    private String businessAreaImpacted;

    @Column(name = "[Business Impact]")
    private String businessImpact;

    @Column(name = "[External Impact]")
    private String externalImpact;

    @Column(name = "[Impacted Apps]")
    private String impactedApps;

    @Column(name = "[Disruption Hours]")
    private Integer disruptionHours;

    @Column(name = "[BA Support Time]")
    private Integer baSupportTime;

    @Column(name = "[Annuity]")
    private String annuity;

    @Column(name = "[Annuity Overtime]")
    private String annuityOvertime;

    @Column(name = "[Annuity Business Lost Production]")
    private String annuityBusinessLostProduction;

    @Column(name = "[Life]")
    private String life;

    @Column(name = "[Problem]")
    private String problem;

    @Column(name = "[MTRS Hours]")
    private Integer mtrsHours;

    @Column(name = "[Comments]")
    private String comments;
   

    @Column(name = "[start_month]")
    private String startmonth;

}
tracker master
package com.example.demo.entity;

import java.time.LocalDateTime;

import javax.persistence.*;
import lombok.Data;

@Data
@Entity
@Table(name = "TrackerMaster", schema = "dbo")
public class TrackerMaster {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // ... (other fields and annotations similar to AppUser)
     @Column(name = "LOB")
    private String lob;

    @Column(name = "[Enterprise Issue]")
    private String enterpriseIssue;

    @Column(name = "[Business Analyst]")
    private String businessAnalyst;

    @Column(name = "[Present in Business Tracker]")
    private String presentInBusinessTracker;

    @Column(name = "Incident")
    private String incident;

    @Column(name = "[Issue Description]")
    private String issueDescription;

    @Column(name = "[Incident Start Datetime]")
    private LocalDateTime incidentStartDatetime;

    @Column(name = "[Incident End Datetime]")
    private LocalDateTime incidentEndDatetime;

    @Column(name = "[Incident Priority]")
    private String incidentPriority;

    @Column(name = "[AnyChildIssues]")
    private String anyChildIssues;

    @Column(name = "[Business Area Impacted]")
    private String businessAreaImpacted;

    @Column(name = "[Business Impact]")
    private String businessImpact;

    @Column(name = "[External Impact]")
    private String externalImpact;

    @Column(name = "[Impacted Apps]")
    private String impactedApps;

    @Column(name = "[Disruption Hours]")
    private Integer disruptionHours;

    @Column(name = "[BA Support Time]")
    private Integer baSupportTime;

    @Column(name = "[Annuity]")
    private String annuity;

    @Column(name = "[Annuity Overtime]")
    private String annuityOvertime;

    @Column(name = "[Annuity Business Lost Production]")
    private String annuityBusinessLostProduction;

    @Column(name = "[Life]")
    private String life;

    @Column(name = "[Problem]")
    private String problem;

    @Column(name = "[MTRS Hours]")
    private Integer mtrsHours;

    @Column(name = "[Comments]")
    private String comments;
   

    @Column(name = "[start_month]")
    private String startmonth;

}
repo tracker
package com.example.demo.repository;

import org.springframework.stereotype.Repository;
import org.springframework.data.jpa.repository.JpaRepository;
import com.example.demo.entity.TrackerMaster;
import java.util.Optional;


@Repository
public interface TrackerMasterRepository extends JpaRepository<TrackerMaster, Long> {
    Optional<TrackerMaster> findByIncident(String incident);
}

user repo
package com.example.demo.repository;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import java.util.Optional;

import com.example.demo.entity.AppUser;
import java.util.List;


public interface UserRepository extends JpaRepository<AppUser, Long> {
    @Query(value = "SELECT * FROM TrackerMasterView", nativeQuery = true)
    List<AppUser> findAllAppUsers();


   // @Query(value = "SELECT FORMAT(CONVERT(DATE, start_month, 105), 'MMMM-yy') AS Months FROM TrackerMasterView", nativeQuery = true)
//List<String> getFormattedMonths();

    //@Query(value = "select format(start_month, 'MMMM-yy') as Months from TrackerMasterView", nativeQuery = true)
    //List<String> getFormattedMonths();

   // @Query(value = "select start_month as Months from TrackerMasterView", nativeQuery = true)
//List<String> getFormattedMonths();
 @Query(value = "SELECT FORMAT(CONVERT(DATETIME, start_month, 121), 'MMMM-yy') AS Months FROM TrackerMasterView\r\n" + //
         "", nativeQuery = true)
List<String> getFormattedMonths();

}

userservice
package com.example.demo.service;
import org.springframework.stereotype.Service;
import com.example.demo.entity.AppUser;
import com.example.demo.repository.UserRepository;
import java.util.List;
import java.util.Optional;

import com.example.demo.entity.TrackerMaster; 
import com.example.demo.repository.TrackerMasterRepository;
@Service
public class UserService {
    private final UserRepository userRepository;
    private final TrackerMasterRepository trackerMasterRepository; 

    //public UserService(UserRepository userRepository) { 29.8 commented to add 2nd main database
       // this.userRepository = userRepository;
   // }
    public UserService(UserRepository userRepository, TrackerMasterRepository trackerMasterRepository) {
        this.userRepository = userRepository;
        this.trackerMasterRepository = trackerMasterRepository;
    }
    public AppUser saveUser(AppUser user) {
        return userRepository.save(user);
    }
    public List<AppUser> getAllUsers() {
        return userRepository.findAll();
    }
    public List<String> getFormattedMonths() {
        return userRepository.getFormattedMonths();
    }
    public TrackerMaster saveTrackerData(TrackerMaster trackerData) { // 29.8New method to save TrackerMaster data
        return trackerMasterRepository.save(trackerData);
    }
    public TrackerMaster updateTrackerByIncident(String incident, TrackerMaster updatedData) {
        // Get the existing record based on the incident
        Optional<TrackerMaster> existingRecord = trackerMasterRepository.findByIncident(incident);
    
        if (existingRecord.isPresent()) {
            TrackerMaster trackerMaster = existingRecord.get();
            // Update the fields you want using updatedData
            
            // example: trackerMaster.setSomeField(updatedData.getSomeField());
    
            return trackerMasterRepository.save(trackerMaster);
        }
        return null;
    }
    
    
}



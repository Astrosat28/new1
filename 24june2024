CREATE TABLE dbo.firlookup (
    id INT IDENTITY(1,1) PRIMARY KEY,
    PriorityIncidentNumber NVARCHAR(MAX),
    IncidentDescription NVARCHAR(MAX),
    LineOfBusiness NVARCHAR(MAX),
    BusinessImpact NVARCHAR(MAX),
    OnlineBatch NVARCHAR(MAX)
);
CREATE TABLE dbo.status_updates (
    id INT IDENTITY(1,1) PRIMARY KEY,
    incident_id INT,
    CurrentStatus NVARCHAR(MAX),
    DateTime NVARCHAR(MAX),
    StatusUpdates NVARCHAR(MAX),
    FOREIGN KEY (incident_id) REFERENCES dbo.firlookup(id)
);

code 37
import os
import pyodbc
from bs4 import BeautifulSoup

# Configuration
save_folder = "unread_emails"
database = 'mydb1'

# Get the server name from SSMS
server = 'AADITYA'  # Example: 'DESKTOP-ABC123\SQLEXPRESS'

# Function to connect to the database
def connect_to_database():
    try:
        conn = pyodbc.connect(f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server};DATABASE={database};Trusted_Connection=yes;')
        print("Connected to the database successfully.")
        return conn
    except pyodbc.Error as ex:
        sqlstate = ex.args[0]
        if sqlstate == '08001':
            print("Network-related or instance-specific error occurred while establishing a connection to SQL Server.")
        print(ex)
        raise

# Function to parse and extract information from email content
def extract_information_from_email(content):
    soup = BeautifulSoup(content, 'html.parser')
    print("Raw HTML Content:")
    print(content)  # Debug print to check raw HTML content
    
    table = soup.find('table')
    if not table:
        print("No table found in the HTML content")
        return {'main': {}, 'status_updates': []}
    
    extracted_data = {
        'main': {},
        'status_updates': []
    }
    rows = table.find_all('tr')
    print(f"Found {len(rows)} rows in the table")  # Debug print to check the number of rows

    current_status_update = None

    for row in rows:
        cells = row.find_all('td')
        print(f"Found {len(cells)} cells in the row")  # Debug print to check the number of cells in the row
        if len(cells) == 3:
            key = cells[0].get_text(strip=True)
            value = cells[2].get_text(strip=True)
            print(f"Key: {key}, Value: {value}")  # Debug print to check key-value pairs
            if "Priority & Incident Number" in key:
                extracted_data['main']['Priority & Incident Number'] = value
            elif "Incident Description" in key:
                extracted_data['main']['Incident Description'] = value
            elif "Line of Business & Application Affected" in key:
                extracted_data['main']['Line of Business & Application Affected'] = value
            elif "Business Impact" in key:
                extracted_data['main']['Business Impact'] = value
            elif "Online/Batch" in key:
                extracted_data['main']['Online/Batch'] = value
            elif "Current Status" in key:
                current_status_update = {'Current Status': value}
            elif "Date & Time" in key:
                if current_status_update is not None:
                    current_status_update['Date & Time'] = value
            elif "Status Updates" in key:
                if current_status_update is not None:
                    current_status_update['Status Updates'] = value
                    extracted_data['status_updates'].append(current_status_update)
                    current_status_update = None
        elif len(cells) == 2:
            key = cells[0].get_text(strip=True)
            value = cells[1].get_text(strip=True)
            print(f"Key: {key}, Value: {value}")  # Debug print to check key-value pairs
            if "Current Status" in key:
                current_status_update = {'Current Status': value}
            elif "Date & Time" in key:
                if current_status_update is not None:
                    current_status_update['Date & Time'] = value
            elif "Status Updates" in key:
                if current_status_update is not None:
                    current_status_update['Status Updates'] = value
                    extracted_data['status_updates'].append(current_status_update)
                    current_status_update = None

    print("Extracted Data:", extracted_data)  # Debug print to check extracted data
    return extracted_data

# Function to process saved files and insert data into the database
def process_saved_files():
    conn = connect_to_database()
    cursor = conn.cursor()

    insert_main_query = """
    INSERT INTO dbo.firlookup (PriorityIncidentNumber, IncidentDescription, LineOfBusiness, BusinessImpact, OnlineBatch)
    OUTPUT INSERTED.id
    VALUES (?, ?, ?, ?, ?)
    """
    insert_status_query = """
    INSERT INTO dbo.status_updates (incident_id, CurrentStatus, DateTime, StatusUpdates)
    VALUES (?, ?, ?, ?)
    """

    file_path = 'htmlcodetable.html'
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.read()
        data = extract_information_from_email(content)

        # Debug print to check keys
        print("Main Data Keys:", data['main'].keys())

        if data['main']:
            cursor.execute(insert_main_query, data['main'].get('Priority & Incident Number'), data['main'].get('Incident Description'), data['main'].get('Line of Business & Application Affected'), data['main'].get('Business Impact'), data['main'].get('Online/Batch'))
            incident_id = cursor.fetchone()[0]
            conn.commit()

            for status in data['status_updates']:
                cursor.execute(insert_status_query, incident_id, status.get('Current Status'), status.get('Date & Time'), status.get('Status Updates'))
                conn.commit()

    cursor.close()
    conn.close()
    print("Data inserted into the database")

# Main execution
if __name__ == "__main__":
    process_saved_files()



---------------------------------------------------------------------------
code 392


import os
import pyodbc
from bs4 import BeautifulSoup

# Configuration
save_folder = "unread_emails"
database = 'mydb1'

# Get the server name from SSMS
server = 'AADITYA'  # Example: 'DESKTOP-ABC123\SQLEXPRESS'

# Function to connect to the database
def connect_to_database():
    try:
        conn = pyodbc.connect(f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server};DATABASE={database};Trusted_Connection=yes;')
        print("Connected to the database successfully.")
        return conn
    except pyodbc.Error as ex:
        sqlstate = ex.args[0]
        if sqlstate == '08001':
            print("Network-related or instance-specific error occurred while establishing a connection to SQL Server.")
        print(ex)
        raise

# Function to parse and extract information from email content
def extract_information_from_email(content):
    soup = BeautifulSoup(content, 'html.parser')
    print("Raw HTML Content:")
    print(content)  # Debug print to check raw HTML content
    
    table = soup.find('table')
    if not table:
        print("No table found in the HTML content")
        return {'main': {}, 'status_updates': []}
    
    extracted_data = {
        'main': {},
        'status_updates': []
    }
    rows = table.find_all('tr')
    print(f"Found {len(rows)} rows in the table")  # Debug print to check the number of rows

    keys = ["Priority & Incident Number", "Incident Description", "Line of Business & Application Affected", "Business Impact", "Online/Batch"]
    headers = ["Current Status", "Date & Time", "Status Updates"]
    current_status_update = {}

    skip_next_row = False

    for i, row in enumerate(rows):
        cells = row.find_all('td')
        print(f"Found {len(cells)} cells in the row")  # Debug print to check the number of cells in the row

        if skip_next_row:
            skip_next_row = False
            if len(cells) == 3:
                current_status_update["Current Status"] = cells[0].get_text(strip=True)
                current_status_update["Date & Time"] = cells[1].get_text(strip=True)
                current_status_update["Status Updates"] = cells[2].get_text(strip=True)
                extracted_data['status_updates'].append(current_status_update)
                current_status_update = {}
            continue

        if len(cells) == 3:
            key = cells[0].get_text(strip=True)
            value = cells[2].get_text(strip=True)
            print(f"Key: {key}, Value: {value}")  # Debug print to check key-value pairs
            if key in keys:
                extracted_data['main'][key] = value
            elif key in headers:
                skip_next_row = True  # Skip the next row to capture values for Current Status, Date & Time, Status Updates

    print("Extracted Data:", extracted_data)  # Debug print to check extracted data
    return extracted_data

# Function to process saved files and insert data into the database
def process_saved_files():
    conn = connect_to_database()
    cursor = conn.cursor()

    insert_main_query = """
    INSERT INTO dbo.firlookup (PriorityIncidentNumber, IncidentDescription, LineOfBusiness, BusinessImpact, OnlineBatch)
    OUTPUT INSERTED.id
    VALUES (?, ?, ?, ?, ?)
    """
    insert_status_query = """
    INSERT INTO dbo.status_updates (incident_id, CurrentStatus, DateTime, StatusUpdates)
    VALUES (?, ?, ?, ?)
    """

    file_path = 'htmlcodetable.html'
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.read()
        data = extract_information_from_email(content)

        # Debug print to check keys
        print("Main Data Keys:", data['main'].keys())

        if data['main']:
            cursor.execute(insert_main_query, data['main'].get('Priority & Incident Number'), data['main'].get('Incident Description'), data['main'].get('Line of Business & Application Affected'), data['main'].get('Business Impact'), data['main'].get('Online/Batch'))
            incident_id = cursor.fetchone()[0]
            conn.commit()

            for status in data['status_updates']:
                cursor.execute(insert_status_query, incident_id, status.get('Current Status'), status.get('Date & Time'), status.get('Status Updates'))
                conn.commit()

    cursor.close()
    conn.close()
    print("Data inserted into the database")

# Main execution
if __name__ == "__main__":
    process_saved_files()

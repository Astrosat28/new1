# Extract relevant data to be inserted
insert_data = (
    processed_data.get('Priority & Incident Number', None),
    processed_data.get('Incident Description (What happened?)', None),
    processed_data.get('Line of Business & Application Affected', None),
    processed_data.get('Business Impact', None),
    processed_data.get('Online/Batch', None),
    processed_data.get('Initial RCA', None),
    processed_data.get('Initial RCA - Why It happened?', None)
)

# Insert into SQL database
conn_str = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password};'
print("Connecting to the database...")
conn = pyodbc.connect(conn_str)
print("Connected to the database successfully.")
cursor = conn.cursor()

# Insert data into the main table
sql_main = '''
INSERT INTO dbo.firlookup (
    [Priority & Incident Number],
    [Incident Description (What happened?)],
    [Line of Business & Application Affected],
    [Business Impact],
    [Online/Batch],
    [Initial RCA],
    [Initial RCA - Why It happened?]
) VALUES (?, ?, ?, ?, ?, ?, ?)
'''

cursor.execute(sql_main, insert_data)

conn.commit()
cursor.close()
conn.close()

print("Data inserted successfully.")
----------------------------------------------
<button (click)="fetchData()">Fetch Data</button>

<select (change)="fetchDataInRange($event.target['value'])">
  <option value="1-3">ID 1 to 3</option>
  <option value="4-6">ID 4 to 6</option>
</select>

<select (change)="fetchDataByMonth($event.target['value'])">
  <option value="June">June</option>
  <option value="July">July</option>
</select>

<table>
  <thead>
    <tr>
      <th>Actions</th>
      <th>Name</th>
      <th>Number</th>
      
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let user of users">
      <td>
        <button *ngIf="editingUserId === user.id" (click)="saveChanges(user)"><i class="bi bi-check"></i></button>
        <button *ngIf="editingUserId !== user.id" (click)="startEditing(user)"><i class="bi bi-pencil"></i></button>
      </td>
      <td>
        <input *ngIf="editingUserId === user.id" type="text" [(ngModel)]="user.name" />
        <span *ngIf="editingUserId !== user.id">{{user.name}}</span>
      </td>
      <td>
        <input *ngIf="editingUserId === user.id" type="number" [(ngModel)]="user.number" />
        <span *ngIf="editingUserId !== user.id">{{user.number}}</span>
      </td>
      
    </tr>
  </tbody>
</table>

<form (submit)="onSubmit()">
  <label for="name">Name:</label>
  <input type="text" id="name" [(ngModel)]="user.name" name="name" required>
  <label for="number">Number:</label>
  <input type="number" id="number" [(ngModel)]="user.number" name="number" required>
  <label for="start-date">Start Date:</label>
  <input type="datetime-local" id="start-date" [(ngModel)]="user.startDate" name="startDate">

  <label for="end-date">End Date:</label>
  <input type="datetime-local" id="end-date" [(ngModel)]="user.endDate" name="endDate">
  <div class="form-group">
    <label for="duration">Difference in hours:</label>
    <input type="text" id="duration" name="duration" class="form-control" [value]="user.duration" readonly>
  </div>
  
  
  <button type="submit">Submit</button>
</form>


html

import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-input-form',
  templateUrl: './input-form.component.html',
  styleUrls: ['./input-form.component.css']
})
export class InputFormComponent {
  user = {
    name: '',
    number: '',
    startDate: null,
    endDate: null,
    get duration() {
      if (this.startDate && this.endDate) {
        const start = new Date(this.startDate);
        const end = new Date(this.endDate);
        const differenceInMs = end.getTime() - start.getTime();
        const differenceInHours = differenceInMs / 1000 / 60 / 60;
        return Math.abs(differenceInHours); // return absolute value in case end date is before start date
      }
      return 0;
    }
  };
  users = []; 
   
  constructor(private http: HttpClient) { }
  
  onSubmit(): void {
    this.http.post('http://localhost:8080/api/user', this.user).subscribe();
  }
  fetchData() {
    this.http.get<any>('http://localhost:8080/api/users').subscribe(data => {
      this.users = data;
    });
  }
  fetchDataInRange(range: string): void {
    const [startId, endId] = range.split('-');
    this.http.get<any>(`http://localhost:8080/api/users/${startId}/${endId}`).subscribe(data => {
      this.users = data;
    });
  }
  fetchDataByMonth(month: string): void {
    this.http.get<any>(`http://localhost:8080/api/users/month/${month}`).subscribe(data => {
      this.users = data;
    });
  }
  editingUserId: number | null = null;  // ID of the user being edited
  
  startEditing(user): void {
    this.editingUserId = user.id;
  }

  saveChanges(user): void {
    this.editingUserId = null;
    this.updateUser(user);
  }
  
  updateUser(user): void {
    this.http.put(`http://localhost:8080/api/user/${user.id}`, user).subscribe();
  }
  
}

ts

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';  // import FormsModule here
import { HttpClientModule } from '@angular/common/http';
import { RouterModule } from '@angular/router';
import { AppComponent } from './app.component';
import { InputFormComponent } from './input-form/input-form.component';
import { TableComponent } from './table/table.component';

@NgModule({
  declarations: [
    AppComponent,
    InputFormComponent,
    TableComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,  // and add it to the imports array
    HttpClientModule,
    RouterModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { InputFormComponent } from './input-form/input-form.component';

const routes: Routes = [
  { path: 'night', component: InputFormComponent },
  
  // other routes...
];
@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

css
table {
    border-collapse: collapse;
    width: 100%;
  }
  
  table, th, td {
    border: 1px solid black;
  }
  
  thead tr {
    background-color: #f78f11; /* Change this to any color you want */
  }
  

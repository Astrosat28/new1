USE abianalysis;

CREATE TABLE dbo.emailtest (
    Id INT PRIMARY KEY IDENTITY(1,1),
    Subject NVARCHAR(MAX),
    Sender NVARCHAR(255),
    ReceivedTime DATETIME,
    Priority NVARCHAR(50),
    IncidentNumber NVARCHAR(50),
    IncidentDescription NVARCHAR(MAX),
    LineAndApplicationAffected NVARCHAR(MAX),
    ImpactOnB NVARCHAR(MAX),
    OnlineBatch NVARCHAR(50),
    CurrentStatus NVARCHAR(50),
    DateTime NVARCHAR(50),
    StatusUpdates NVARCHAR(MAX)
);
------------------------------
import win32com.client
import os
import re
import subprocess
import logging
import pyodbc

# Setup logging
logging.basicConfig(filename='email_processing.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Directory to save email contents
save_folder = "unread_emails"

# Database connection details
db_server = 'YOUR_SERVER'
db_database = 'abianalysis'
db_username = 'YOUR_USERNAME'
db_password = 'YOUR_PASSWORD'

# Function to connect to the database
def get_db_connection():
    connection_string = (
        f'DRIVER={{ODBC Driver 17 for SQL Server}};'
        f'SERVER={db_server};'
        f'DATABASE={db_database};'
        f'UID={db_username};'
        f'PWD={db_password}'
    )
    return pyodbc.connect(connection_string)

# Function to extract and save unread emails
def extract_unread_emails():
    try:
        # Connect to Outlook
        outlook = win32com.client.Dispatch("Outlook.Application")
        mapi = outlook.GetNamespace("MAPI")

        # Access the inbox
        inbox = mapi.GetDefaultFolder(6)  # 6 refers to the inbox folder
        messages = inbox.Items
        messages = messages.Restrict("[Unread] = true")

        if messages.Count == 0:
            logging.info("No unread emails found.")
            print("No unread emails found.")
            return

        if not os.path.exists(save_folder):
            os.makedirs(save_folder)

        # Iterate through unread emails
        for message in messages:
            try:
                subject = message.Subject
                sender = message.SenderName
                received_time = message.ReceivedTime
                body = message.Body
                html_body = message.HTMLBody

                # Log email details
                logging.info(f"Processing email from {sender} with subject: {subject}")

                # Save email details to a file
                safe_subject = "".join([c for c in subject if c.isalpha() or c.isdigit() or c==' ']).rstrip()
                file_path = os.path.join(save_folder, f"{safe_subject}.txt")
                logging.info(f"Saving email to {file_path}")
                with open(file_path, "w", encoding="utf-8") as file:
                    file.write(f"Subject: {subject}\n")
                    file.write(f"Sender: {sender}\n")
                    file.write(f"Received: {received_time}\n")
                    file.write(f"Body: {body}\n")
                    file.write(f"HTML Body: {html_body}\n")

                # Mark email as read
                message.Unread = False

            except Exception as e:
                logging.error(f"Error processing email: {e}")

        # Open the folder after processing
        subprocess.Popen(f'explorer "{os.path.abspath(save_folder)}"')

    except Exception as e:
        logging.error(f"Error: {e}")
        print(f"Error: {e}")

# Function to parse and extract the required information from email content
def extract_information(file_content):
    patterns = {
        "Priority": r"Priority & Incident Number\s*([^\n]+)",
        "Incident Number": r"Priority & Incident Number\s*[^\n]+\s*(\S+)",
        "Incident Description": r"Incident Description \(What happened\?\)\s*([^\n]+)",
        "Line and Application Affected": r"Line and Application Affected\s*([^\n]+)",
        "Impact on B": r"Impact on B\s*([\s\S]+?)(?:Online/Batch|Current Status)",
        "Online/Batch": r"Online/Batch\s*([^\n]+)",
        "Current Status": r"Current Status\s*([^\n]+)",
        "Date & Time": r"Date & Time\s*([^\n]+)",
        "Status Updates": r"Status Updates\s*([^\n]+)"
    }
    
    extracted_info = {}
    for key, pattern in patterns.items():
        match = re.search(pattern, file_content, re.DOTALL)
        if match:
            extracted_info[key] = match.group(1).strip()
        else:
            extracted_info[key] = "N/A"
    
    return extracted_info

# Function to process saved email files, extract information, and insert into the database
def process_and_insert_emails():
    connection = get_db_connection()
    cursor = connection.cursor()

    for filename in os.listdir(save_folder):
        if filename.endswith(".txt"):
            file_path = os.path.join(save_folder, filename)
            with open(file_path, "r", encoding="utf-8") as file:
                content = file.read()
                extracted_info = extract_information(content)
                print(f"File: {filename}")
                print(f"Priority: {extracted_info['Priority']}")
                print(f"Incident Number: {extracted_info['Incident Number']}")
                print(f"Incident Description: {extracted_info['Incident Description']}")
                print(f"Line and Application Affected: {extracted_info['Line and Application Affected']}")
                print(f"Impact on B: {extracted_info['Impact on B']}")
                print(f"Online/Batch: {extracted_info['Online/Batch']}")
                print(f"Current Status: {extracted_info['Current Status']}")
                print(f"Date & Time: {extracted_info['Date & Time']}")
                print(f"Status Updates: {extracted_info['Status Updates']}")
                print("\n")

                # Insert the extracted information into the database
                insert_query = """
                INSERT INTO dbo.emailtest (
                    Subject, Sender, ReceivedTime, Priority, IncidentNumber, IncidentDescription,
                    LineAndApplicationAffected, ImpactOnB, OnlineBatch, CurrentStatus, DateTime, StatusUpdates
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """
                cursor.execute(insert_query, (
                    filename, extracted_info['Priority'], extracted_info['Incident Number'],
                    extracted_info['Incident Description'], extracted_info['Line and Application Affected'],
                    extracted_info['Impact on B'], extracted_info['Online/Batch'],
                    extracted_info['Current Status'], extracted_info['Date & Time'],
                    extracted_info['Status Updates']
                ))

    connection.commit()
    connection.close()

# Extract unread emails
extract_unread_emails()

# Process saved emails, extract information, and insert into the database
process_and_insert_emails()









****************************
import os
import re

# Define the directory containing the email files
email_directory = "unread_emails"

# Define a function to parse and extract the required information from email content
def extract_information(file_content):
    patterns = {
        "Priority": r"Priority & Incident Number\s*([^\n]+)",
        "Incident Number": r"Priority & Incident Number\s*[^\n]+\s*(\S+)",
        "Incident Description": r"Incident Description \(What happened\?\)\s*([^\n]+)",
        "Line and Application Affected": r"Line and Application Affected\s*([^\n]+)",
        "Impact on B": r"Impact on B\s*([\s\S]+?)(?:Online/Batch|Current Status)",
        "Online/Batch": r"Online/Batch\s*([^\n]+)",
        "Current Status": r"Current Status\s*([^\n]+)",
        "Date & Time": r"Date & Time\s*([^\n]+)",
        "Status Updates": r"Status Updates\s*([^\n]+)"
    }
    
    extracted_info = {}
    for key, pattern in patterns.items():
        match = re.search(pattern, file_content, re.DOTALL)
        if match:
            extracted_info[key] = match.group(1).strip()
        else:
            extracted_info[key] = "N/A"
    
    return extracted_info

# Iterate through the files in the directory and extract information
for filename in os.listdir(email_directory):
    if filename.endswith(".txt"):
        file_path = os.path.join(email_directory, filename)
        with open(file_path, "r", encoding="utf-8") as file:
            content = file.read()
            extracted_info = extract_information(content)
            print(f"File: {filename}")
            print(f"Priority: {extracted_info['Priority']}")
            print(f"Incident Number: {extracted_info['Incident Number']}")
            print(f"Incident Description: {extracted_info['Incident Description']}")
            print(f"Line and Application Affected: {extracted_info['Line and Application Affected']}")
            print(f"Impact on B: {extracted_info['Impact on B']}")
            print(f"Online/Batch: {extracted_info['Online/Batch']}")
            print(f"Current Status: {extracted_info['Current Status']}")
            print(f"Date & Time: {extracted_info['Date & Time']}")
            print(f"Status Updates: {extracted_info['Status Updates']}")
            print("\n")

# You can now push the extracted_info dictionary to your database as required.

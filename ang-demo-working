import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import pyodbc
import requests

# Function to connect to the database and fetch data
def fetch_data():
    # Database connection
    server = '*****'
    database = '*****'
    username = '*****'
    password = '*****'
    cnxn = pyodbc.connect(f'DRIVER={{ODBC DRIVER 17 for SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}')
    
    sql_query = "SELECT number, work_notes, short_description, close_notes, description FROM dbo.incident"
    df = pd.read_sql(sql_query, cnxn)
    cnxn.close()
    
    pd.set_option('display.max_colwidth', None)
    pd.set_option('display.max_columns', None)
    
    return df

# Function to find the most similar incidents
def find_similar_incidents(user_input_problem, df):
    df['combined_text'] = df['short_description'].astype(str) + " " + df['description'].astype(str)
    vectorizer = TfidfVectorizer(stop_words='english')
    tfidf_matrix = vectorizer.fit_transform(df['combined_text'])
    user_vec = vectorizer.transform([user_input_problem])
    cosine_sim = cosine_similarity(user_vec, tfidf_matrix).flatten()
    
    similarity_threshold = 0.2
    similar_indices = np.where(cosine_sim >= similarity_threshold)[0]
    similar_scores = cosine_sim[similar_indices]
    
    sorted_indices = similar_indices[np.argsort(similar_scores)][::-1][:5]  # Get top 5 indices
    
    return sorted_indices

# Function to get detailed information for the similar incidents
def get_detailed_information(sorted_indices, df):
    formatted_paragraphs = []
    server = '*****'
    database = '*****'
    username = '*****'
    password = '*****'
    cnxn = pyodbc.connect(f'DRIVER={{ODBC DRIVER 17 for SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}')
    
    for idx in sorted_indices:
        incident_number = df.iloc[idx]['number']
        detailed_sql_query = f"""
        SELECT CONCAT(i.number, ' ', i.opened_at, ' ', i.short_description, ' ', i.close_notes, ' ', p.u_string_3, ' ', p.u_root_cause_description, ' ', p.u_root_cause_category, ' ', p.short_description)
        FROM incident i
        JOIN Incident_Problem_rel r ON i.number = r.number
        JOIN problem p ON r.problem_id = p.number
        WHERE i.number = '{incident_number}'
        """
        detailed_df = pd.read_sql(detailed_sql_query, cnxn)
        if not detailed_df.empty:
            formatted_paragraph = detailed_df.iloc[0, 0]
            formatted_paragraphs.append(formatted_paragraph)
    
    cnxn.close()
    return formatted_paragraphs

# Function to summarize paragraphs independently
def summarize_paragraphs(formatted_paragraphs):
    summarized_paragraphs = []
    for i, paragraph in enumerate(formatted_paragraphs, 1):
        print(f"Formatted Paragraph {i}: {paragraph}")
        payload = {
            "maxline": 5,
            "context": paragraph
        }
        try:
            response = requests.post('https://abcd.amazon-aws/summarize', json=payload)
            print(f"Response Status Code for Paragraph {i}:", response.status_code)  # Debugging statement
            print(f"Response Text for Paragraph {i}:", response.text)  # Debugging statement
            
            if response.status_code == 200:
                response_data = response.json()
                print(f"Response JSON Data for Paragraph {i}:", response_data)  # Debugging statement
                if response_data.get('statusCode') == 200:
                    summarized_paragraph = response_data.get('body', '')
                    summarized_paragraphs.append(summarized_paragraph)
                else:
                    summarized_paragraphs.append("Error summarizing content, not 200")
            else:
                summarized_paragraphs.append("Error connecting to AWS")
        except requests.exceptions.RequestException as e:
            print(f"Request to AWS failed for Paragraph {i}: {e}")
            summarized_paragraphs.append("Request to AWS failed")
    
    return summarized_paragraphs

# Main function
def main():
    user_input_problem = input("Enter the problem description: ")
    
    # Fetch data from the database
    df = fetch_data()
    
    # Find the most similar incidents
    sorted_indices = find_similar_incidents(user_input_problem, df)
    
    # Get detailed information for the similar incidents
    formatted_paragraphs = get_detailed_information(sorted_indices, df)
    
    # Summarize paragraphs independently
    summarized_paragraphs = summarize_paragraphs(formatted_paragraphs)
    
    # Print summarized results
    for i, summary in enumerate(summarized_paragraphs, 1):
        print(f"Summarized Result {i}: {summary}")

if __name__ == '__main__':
    main()

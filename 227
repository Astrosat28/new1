const express = require('express');
const sql = require('mssql');
const cors = require('cors');
const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Database configuration
const config = {
    user: 'abiuser',
    password: 'abiuser1',
    server: 'ct1abi01.us.abc.com',
    port: 51009,
    database: 'abianalytics',
    options: {
        encrypt: false, // adjust if needed for your environment
        enableArithAbort: true
    }
};

// Fetch all data from Fvrelease table
app.get('/fvrelease', async (req, res) => {
    try {
        let pool = await sql.connect(config);
        let result = await pool.request().query('SELECT * FROM Fvrelease');
        res.json(result.recordset);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

// Search data from Fvrelease table
app.get('/fvrelease/search', async (req, res) => {
    const searchTerm = req.query.q;
    try {
        let pool = await sql.connect(config);
        let result = await pool.request()
            .input('searchTerm', sql.VarChar, `%${searchTerm}%`)
            .query(`SELECT * FROM Fvrelease WHERE 
                    column1 LIKE @searchTerm OR 
                    column2 LIKE @searchTerm OR 
                    column3 LIKE @searchTerm`);  // Update with actual column names
        res.json(result.recordset);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

app.listen(3000, () => {
    console.log('Server running on port 3000');
});

=-==================================
<div class="two-columns">
    <div class="column">
      <!-- First Card in the First Row -->
      <a href="https://example.com" class="card-link">
        <div class="card">
            <h2>Card 1 Header</h2>
            <h3>main  migrate</h3>
          <img src="/assets/11.jpg" alt="Card Image 1">
          
        </div>
      </a>
  
      <!-- Second Card in the Second Row -->
      <a href="https://example.com" class="card-link">
        <div class="card">
            <h2>Card 1 Header</h2>
            <h3>main  migrate</h3>
          <img src="/assets/12.jpg" alt="Card Image 2">
          
        </div>
      </a>
    </div>
  
    <div class="column">
     <!-- Content for the second column -->
       <!--<p>Calendar management details.</p>-->
      <div class="iframe-container">
        <iframe src="https://www.codepel.com/vanilla-javascript/simple-javascript-calendar-with-events/"  style="width: 100%;
        height: 31em"></iframe>
      </div>
    </div>
  </div>
  ........................................................................................................................
/* Container for two columns */
.two-columns {
    display: flex;  /* Display columns side by side */
    margin-left: 10%;
    margin-right: 10%;
  }
  
  /* Each column takes up equal width */
  .column {
    flex: 1;  /* Each column takes up equal space */
    padding: 10px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    box-sizing: border-box;  /* Ensure padding is included within the height and width */
    
  }
  
  /* Styling for the clickable card links */
  .card-link {
    text-decoration: none;
    
    color: inherit;  /* Inherit text color */
    display: block;  /* Make the entire card clickable */
    margin-bottom: 10px;  /* Space between the cards */
    flex: 1;  /* Allow cards to grow and fill the available space */
  }
  
  /* Card styling */
  .card {
    background-color: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    text-align: center;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
    justify-content: center;
     /* Ensure the card takes up the full height of its container */
  }
  
  /* Card hover effect */
  .card:hover {
    transform: scale(1.05);  /* Slightly enlarge the card */
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);  /* Slightly deeper shadow on hover */
  }
  
  /* Image styling */
  .card img {
    width: 100%;
    height: 7em;
    border-radius: 8px;
    margin-bottom: 15px;
  
  }
  
  /* Header inside the card */
  .card h2 {
    margin: 0;
    font-size: 1.25rem;
    
  }

-------------------------------------------------------------------
package com.example.emailsearch.service;

import javax.mail.*;
import javax.mail.search.SubjectTerm;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.springframework.stereotype.Service;

@Service
public class EmailSearchService {

    // Modify with your host and shared mailbox details
    private final String host = "imap.yourcompany.com"; // Your IMAP host (Exchange or Office 365)
    private final String user = "your-email@corporate.com"; // Your email
    private final String password = "your-password"; // Your password
    private final String sharedMailbox = "sharedmailbox@corporate.com"; // Shared mailbox email

    public List<String> searchSharedFolderEmails(String searchTerm) throws Exception {
        List<String> emails = new ArrayList<>();

        // Setup IMAP properties for connection
        Properties properties = new Properties();
        properties.put("mail.store.protocol", "imaps");

        // Create IMAP session and connect
        Session session = Session.getInstance(properties, null);
        Store store = session.getStore();
        store.connect(host, user, password);

        // Access the shared mailbox folder
        Folder sharedFolder = store.getFolder("sharedmailbox@corporate.com/INBOX"); // Access shared folder
        sharedFolder.open(Folder.READ_ONLY);

        // Search for emails with the specified subject
        Message[] messages = sharedFolder.search(new SubjectTerm(searchTerm));
        for (Message message : messages) {
            emails.add("Subject: " + message.getSubject() + ", From: " + message.getFrom()[0]);
        }

        // Close the folder and store connections
        sharedFolder.close(false);
        store.close();

        return emails;
    }
}


  .iframe-container {
    
  }

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Parent Folder and FileName Dropdown</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }
        
        .container {
            width: 80%;
            margin: 50px auto;
        }

        .card {
            background-color: #fff;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        h1 {
            text-align: center;
            color: #333;
        }

        .folder {
            margin: 20px 0;
            cursor: pointer;
            padding: 10px;
            background-color: #f2f2f2;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .folder:hover {
            background-color: #e0e0e0;
        }

        .dropdown {
            margin: 10px 0;
            display: none; /* Initially hide the dropdown */
        }

        .dropdown select {
            width: 100%;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Parent Folder and FileName Dropdown</h1>

        <div class="card">
            <!-- Loop through Parent Folders and generate dropdowns -->
            {% for parent_folder, file_names in data.items() %}
            <div class="folder" onclick="toggleDropdown('{{ parent_folder }}')">
                {{ parent_folder }}
            </div>
            <div id="{{ parent_folder }}" class="dropdown">
                <select>
                    {% for file_name in file_names %}
                    <option value="{{ file_name }}">{{ file_name }}</option>
                    {% endfor %}
                </select>
            </div>
            {% endfor %}
        </div>
    </div>

    <script>
        // Function to toggle dropdown visibility when Parent Folder is clicked
        function toggleDropdown(folderId) {
            const dropdown = document.getElementById(folderId);
            if (dropdown.style.display === 'none' || dropdown.style.display === '') {
                dropdown.style.display = 'block';
            } else {
                dropdown.style.display = 'none';
            }
        }
    </script>

</body>
</html>

--------------------------------------
import pyodbc
from flask import Flask, render_template, jsonify

# SQL Server Configuration
server = 'ct1abi01.us.abc.com,51009'
database = 'abianalytics'
username = 'abiuser'
password = 'abiuser1'

# Connect to SQL Server
def get_db_connection():
    conn = pyodbc.connect(f'DRIVER={{SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}')
    return conn

# Flask web app
app = Flask(__name__)

# Route to fetch parent folders and their associated filenames
@app.route('/')
def index():
    conn = get_db_connection()
    cursor = conn.cursor()

    # Query to get ParentFolder and FileName
    query = """
    SELECT ParentFolder, FileName 
    FROM FVRelease_eMails
    ORDER BY ParentFolder
    """
    cursor.execute(query)
    rows = cursor.fetchall()
    conn.close()

    # Organize the data into a dictionary: {ParentFolder: [FileNames]}
    data = {}
    for row in rows:
        parent_folder = row.ParentFolder
        file_name = row.FileName
        if parent_folder not in data:
            data[parent_folder] = []
        data[parent_folder].append(file_name)

    return render_template('index.html', data=data)

# Run the Flask web app
if __name__ == '__main__':
    app.run(debug=True)

---------------------new functionality of dropdown above----------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FVRelease_eMails Data</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }
        
        .container {
            width: 80%;
            margin: 50px auto;
        }

        .card {
            background-color: #fff;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        h1 {
            text-align: center;
            color: #333;
        }

        .search-box {
            margin-bottom: 20px;
            display: flex;
            justify-content: center;
        }

        .search-box input[type="text"] {
            width: 300px;
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
            margin-right: 10px;
            outline: none;
        }

        .search-box button {
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
        }

        .search-box button:hover {
            background-color: #218838;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        table th, table td {
            padding: 12px;
            border-bottom: 1px solid #ddd;
            text-align: left;
        }

        table th {
            background-color: #f2f2f2;
            color: #333;
            text-transform: uppercase;
            font-size: 14px;
        }

        table tr:hover {
            background-color: #f1f1f1;
        }

        .footer {
            text-align: center;
            padding: 20px;
            background-color: #333;
            color: #fff;
            position: fixed;
            width: 100%;
            bottom: 0;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>FVRelease_eMails Data</h1>

        <div class="card">
            <!-- Search Form -->
            <div class="search-box">
                <form method="POST">
                    <input type="text" name="search_term" placeholder="Search..." required>
                    <button type="submit">Search</button>
                </form>
            </div>

            <!-- Table to display data -->
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>FileName</th>
                        <th>Folder</th>
                        <th>ParentFolder</th>
                        <th>Path</th>
                    </tr>
                </thead>
                <tbody>
                    {% for row in rows %}
                    <tr>
                        <td>{{ row.ID }}</td>
                        <td>{{ row.FileName }}</td>
                        <td>{{ row.Folder }}</td>
                        <td>{{ row.ParentFolder }}</td>
                        <td>{{ row.Path }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    <div class="footer">
        &copy; 2024 Your Company Name
    </div>

</body>
</html>

======================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FVRelease_eMails Data</title>
</head>
<body>
    <h1>FVRelease_eMails Data</h1>
    
    <!-- Search Form -->
    <form method="POST">
        <input type="text" name="search_term" placeholder="Search..." required>
        <button type="submit">Search</button>
    </form>

    <!-- Table to display data -->
    <table border="1">
        <thead>
            <tr>
                <th>ID</th>
                <th>FileName</th>
                <th>Folder</th>
                <th>ParentFolder</th>
                <th>Path</th>
            </tr>
        </thead>
        <tbody>
            {% for row in rows %}
            <tr>
                <td>{{ row.ID }}</td>
                <td>{{ row.FileName }}</td>
                <td>{{ row.Folder }}</td>
                <td>{{ row.ParentFolder }}</td>
                <td>{{ row.Path }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>

.............................................
import pyodbc
from flask import Flask, render_template, request

# SQL Server Configuration
server = 'ct1abi01.us.abc.com,51009'
database = 'abianalytics'
username = 'abiuser'
password = 'abiuser1'

# Connect to SQL Server
def get_db_connection():
    conn = pyodbc.connect(f'DRIVER={{SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}')
    return conn

# Flask web app
app = Flask(__name__)

# Route to display data and search
@app.route('/', methods=['GET', 'POST'])
def index():
    conn = get_db_connection()
    cursor = conn.cursor()

    query = "SELECT * FROM FVRelease_eMails"
    
    # If there is a search query, modify the query to filter results
    if request.method == 'POST':
        search_term = request.form.get('search_term')
        query = f"SELECT * FROM FVRelease_eMails WHERE FileName LIKE ? OR Folder LIKE ? OR ParentFolder LIKE ? OR Path LIKE ?"
        cursor.execute(query, f'%{search_term}%', f'%{search_term}%', f'%{search_term}%', f'%{search_term}%')
    else:
        cursor.execute(query)

    rows = cursor.fetchall()
    conn.close()

    return render_template('index.html', rows=rows)

# Run the Flask web app
if __name__ == '__main__':
    app.run(debug=True)

==================================
pom file -
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.data</groupId>
    <artifactId>emaildata</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>emaildata</name>
    <description>Email Data Application</description>

    <properties>
        <java.version>17</java.version>
        <spring-boot.version>2.7.0</spring-boot.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Starter JPA for database access -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- SQL Server JDBC Driver -->
        <dependency>
            <groupId>com.microsoft.sqlserver</groupId>
            <artifactId>mssql-jdbc</artifactId>
            <version>9.4.0.jre11</version>
        </dependency>

        <!-- Lombok (Optional) -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Spring Boot DevTools (Optional for fast reload) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Spring Boot Starter Test (For testing) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>


--------------------------------pom over---------------------
entity---------------
package com.data;

import javax.persistence.*;

@Entity
@Table(name = "Fvrelease")
public class FvRelease {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "FileName", length = 255)
    private String fileName;

    @Column(name = "Folder", length = 255)
    private String folder;

    @Column(name = "ParentFolder", length = 255)
    private String parentFolder;

    @Column(name = "Path", length = 255)
    private String path;

    // Getters and setters...
}

---------------------entity over -----------------
repo-
package com.data;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface FvReleaseRepository extends JpaRepository<FvRelease, Long> {
    // Custom search query
    List<FvRelease> findByFileNameContainingOrFolderContainingOrParentFolderContainingOrPathContaining(
        String fileName, String folder, String parentFolder, String path
    );
}

----------------------------
service ---------------
package com.data;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class FvReleaseService {

    @Autowired
    private FvReleaseRepository fvReleaseRepository;

    public List<FvRelease> getAllReleases() {
        return fvReleaseRepository.findAll();
    }

    public List<FvRelease> searchReleases(String query) {
        return fvReleaseRepository.findByFileNameContainingOrFolderContainingOrParentFolderContainingOrPathContaining(
            query, query, query, query);
    }
}


-----------------------------controller--------
package com.data;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/fvrelease")
@CrossOrigin(origins = "*")
public class FvReleaseController {

    @Autowired
    private FvReleaseService fvReleaseService;

    @GetMapping
    public List<FvRelease> getAllReleases() {
        return fvReleaseService.getAllReleases();
    }

    @GetMapping("/search")
    public List<FvRelease> searchReleases(@RequestParam("q") String query) {
        return fvReleaseService.searchReleases(query);
    }
}



===============================================const express = require('express');
const sql = require('mssql');
const cors = require('cors');
const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Database configuration
const config = {
    user: 'abiuser',
    password: 'abiuser1',
    server: 'ct1abi01.us.abc.com',
    port: 51009,
    database: 'abianalytics',
    options: {
        encrypt: false, // adjust if needed for your environment
        enableArithAbort: true
    }
};

// Fetch all data from Fvrelease table
app.get('/fvrelease', async (req, res) => {
    try {
        let pool = await sql.connect(config);
        let result = await pool.request().query('SELECT * FROM Fvrelease');
        res.json(result.recordset);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

// Search data from Fvrelease table
app.get('/fvrelease/search', async (req, res) => {
    const searchTerm = req.query.q;
    try {
        let pool = await sql.connect(config);
        let result = await pool.request()
            .input('searchTerm', sql.VarChar, `%${searchTerm}%`)
            .query(`SELECT * FROM Fvrelease WHERE 
                    column1 LIKE @searchTerm OR 
                    column2 LIKE @searchTerm OR 
                    column3 LIKE @searchTerm`);  // Update with actual column names
        res.json(result.recordset);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

app.listen(3000, () => {
    console.log('Server running on port 3000');
});

=-==================================
<div class="two-columns">
    <div class="column">
      <!-- First Card in the First Row -->
      <a href="https://example.com" class="card-link">
        <div class="card">
            <h2>Card 1 Header</h2>
            <h3>main  migrate</h3>
          <img src="/assets/11.jpg" alt="Card Image 1">
          
        </div>
      </a>
  
      <!-- Second Card in the Second Row -->
      <a href="https://example.com" class="card-link">
        <div class="card">
            <h2>Card 1 Header</h2>
            <h3>main  migrate</h3>
          <img src="/assets/12.jpg" alt="Card Image 2">
          
        </div>
      </a>
    </div>
  
    <div class="column">
     <!-- Content for the second column -->
       <!--<p>Calendar management details.</p>-->
      <div class="iframe-container">
        <iframe src="https://www.codepel.com/vanilla-javascript/simple-javascript-calendar-with-events/"  style="width: 100%;
        height: 31em"></iframe>
      </div>
    </div>
  </div>
  ........................................................................................................................
/* Container for two columns */
.two-columns {
    display: flex;  /* Display columns side by side */
    margin-left: 10%;
    margin-right: 10%;
  }
  
  /* Each column takes up equal width */
  .column {
    flex: 1;  /* Each column takes up equal space */
    padding: 10px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    box-sizing: border-box;  /* Ensure padding is included within the height and width */
    
  }
  
  /* Styling for the clickable card links */
  .card-link {
    text-decoration: none;
    
    color: inherit;  /* Inherit text color */
    display: block;  /* Make the entire card clickable */
    margin-bottom: 10px;  /* Space between the cards */
    flex: 1;  /* Allow cards to grow and fill the available space */
  }
  
  /* Card styling */
  .card {
    background-color: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    text-align: center;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
    justify-content: center;
     /* Ensure the card takes up the full height of its container */
  }
  
  /* Card hover effect */
  .card:hover {
    transform: scale(1.05);  /* Slightly enlarge the card */
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);  /* Slightly deeper shadow on hover */
  }
  
  /* Image styling */
  .card img {
    width: 100%;
    height: 7em;
    border-radius: 8px;
    margin-bottom: 15px;
  
  }
  
  /* Header inside the card */
  .card h2 {
    margin: 0;
    font-size: 1.25rem;
    
  }

-------------------------------------------------------------------
package com.example.emailsearch.service;

import javax.mail.*;
import javax.mail.search.SubjectTerm;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.springframework.stereotype.Service;

@Service
public class EmailSearchService {

    // Modify with your host and shared mailbox details
    private final String host = "imap.yourcompany.com"; // Your IMAP host (Exchange or Office 365)
    private final String user = "your-email@corporate.com"; // Your email
    private final String password = "your-password"; // Your password
    private final String sharedMailbox = "sharedmailbox@corporate.com"; // Shared mailbox email

    public List<String> searchSharedFolderEmails(String searchTerm) throws Exception {
        List<String> emails = new ArrayList<>();

        // Setup IMAP properties for connection
        Properties properties = new Properties();
        properties.put("mail.store.protocol", "imaps");

        // Create IMAP session and connect
        Session session = Session.getInstance(properties, null);
        Store store = session.getStore();
        store.connect(host, user, password);

        // Access the shared mailbox folder
        Folder sharedFolder = store.getFolder("sharedmailbox@corporate.com/INBOX"); // Access shared folder
        sharedFolder.open(Folder.READ_ONLY);

        // Search for emails with the specified subject
        Message[] messages = sharedFolder.search(new SubjectTerm(searchTerm));
        for (Message message : messages) {
            emails.add("Subject: " + message.getSubject() + ", From: " + message.getFrom()[0]);
        }

        // Close the folder and store connections
        sharedFolder.close(false);
        store.close();

        return emails;
    }
}


  .iframe-container {
    
  }

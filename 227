<div class="calendar">
    <mwl-calendar-month-view
      [viewDate]="viewDate"
      [events]="events"
      (dayClicked)="dayClicked($event)"
      (eventClicked)="eventClicked($event.event)">
    </mwl-calendar-month-view>
  </div>
  
  <!-- Modal for adding events -->
  <div *ngIf="modalOpen">
    <h2>Add Event</h2>
    <form (ngSubmit)="addEvent()">
      <input [(ngModel)]="newEvent.title" name="title" placeholder="Event Title" required>
      <input [(ngModel)]="newEvent.start" name="start" type="datetime-local" required>
      <input [(ngModel)]="newEvent.end" name="end" type="datetime-local" required>
      <button type="submit">Add</button>
    </form>
    <button (click)="modalOpen = false">Cancel</button>
  </div>

....................
import { Component, OnInit } from '@angular/core';
import { CalendarEvent } from 'angular-calendar';
import { EventService } from '../event.service';

@Component({
  selector: 'app-calendar',
  templateUrl: './calendar.component.html',
  styleUrls: ['./calendar.component.css']
})
export class CalendarComponent implements OnInit {
  viewDate: Date = new Date();
  events: CalendarEvent[] = [];
  modalOpen: boolean = false;
  newEvent: any = { title: '', start: '', end: '' };

  constructor(private eventService: EventService) {}

  ngOnInit() {
    this.loadEvents();
  }

  loadEvents() {
    this.eventService.getEvents().subscribe((data: any) => {
      this.events = data.map((event: any) => {
        return {
          id: event.id,
          title: event.title,
          start: new Date(event.start),
          end: new Date(event.end),
          color: { primary: '#ad2121', secondary: '#FAE3E3' }
        };
      });
    });
  }

  dayClicked(event: any) {
    this.modalOpen = true;
    this.newEvent.start = event.day.date;
    this.newEvent.end = event.day.date;
  }

  addEvent() {
    this.eventService.addEvent(this.newEvent).subscribe(() => {
      this.loadEvents();
      this.modalOpen = false;
    });
  }

  eventClicked(event: CalendarEvent) {
    if (confirm('Do you want to delete this event?')) {
      this.eventService.deleteEvent(Number(event.id)).subscribe(() => {
        this.loadEvents();
      });
    }
  }
}
..........
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { CalendarModule, DateAdapter } from 'angular-calendar';
import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';

import { AppComponent } from './app.component';
import { CalendarComponent } from './calendar/calendar.component';
import { EventService } from './event.service';

@NgModule({
  declarations: [
    AppComponent,
    CalendarComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpClientModule,
    BrowserAnimationsModule,
    CalendarModule.forRoot({
      provide: DateAdapter,
      useFactory: adapterFactory
    })
  ],
  providers: [EventService],
  bootstrap: [AppComponent]
})
export class AppModule { }
.........
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class EventService {
  private apiUrl = 'http://localhost:8080/events';

  constructor(private http: HttpClient) {}

  getEvents(): Observable<any> {
    return this.http.get(this.apiUrl);
  }

  addEvent(event: any): Observable<any> {
    return this.http.post(this.apiUrl, event);
  }

  deleteEvent(id: number): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${id}`);
  }
}

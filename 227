import { Component, OnInit } from '@angular/core';
import { EmailContentService } from '../../services/email-content.service';
import { EmailFile, EmailData } from '../../models/email-content.model';  // Import the interfaces

@Component({
  selector: 'app-email-content',
  templateUrl: './email-content.component.html',
  styleUrls: ['./email-content.component.css']
})
export class EmailContentComponent implements OnInit {
  emailData: EmailData = {};  // Define the data type for emailData
  filteredData: EmailData = {};  // Define the data type for filteredData
  searchQuery: string = '';

  constructor(private emailContentService: EmailContentService) {}

  ngOnInit(): void {
    this.loadEmailContent();
  }

  loadEmailContent() {
    this.emailContentService.getEmailContent().subscribe((data: EmailData) => {
      this.emailData = data;
      this.filteredData = data;  // Initialize the filtered data
    });
  }

  toggleFiles(parentFolder: string) {
    const filesElement = document.getElementById(parentFolder);
    if (filesElement) {
      filesElement.style.display = filesElement.style.display === 'none' ? 'block' : 'none';
    }
  }

  searchFolders() {
    this.filteredData = Object.keys(this.emailData)
      .filter(folder => folder.toLowerCase().includes(this.searchQuery.toLowerCase()))
      .reduce((acc: EmailData, key: string) => {
        acc[key] = this.emailData[key];  // Now TypeScript knows the structure of acc
        return acc;
      }, {} as EmailData);
  }
}

=============================
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';

import { FormsModule } from '@angular/forms';  // Import FormsModule for two-way data binding

import { AppComponent } from './app.component';
import { EmailContentComponent } from './components/email-content/email-content.component';  // Import the component

@NgModule({
  declarations: [
    AppComponent,
    EmailContentComponent  // Declare the component here
  ],
  imports: [
    BrowserModule,
    HttpClientModule,  // Include HttpClientModule for API calls
    FormsModule  // Include FormsModule for handling form inputs
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

======
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { EmailData } from '../models/email-content.model';  // Import the model

@Injectable({
  providedIn: 'root'
})
export class EmailContentService {

  private baseUrl = 'http://localhost:8080/api/emails';  // Java Backend URL

  constructor(private http: HttpClient) { }

  // Fetch all parent folders and associated files
  getEmailContent(): Observable<EmailData> {
    return this.http.get<EmailData>(`${this.baseUrl}`);
  }

  // Fetch only file names
  getFileNames(): Observable<any> {
    return this.http.get(`${this.baseUrl}/filenames`);
  }
}

===============
export interface EmailFile {
    fileName: string;
    folder: string;
  }
  
  export interface EmailData {
    [parentFolder: string]: EmailFile[];
  }
  
=======
<div class="container">
    <h1>FVRelease Emails Content</h1>
  
    <!-- Search Input and Button -->
    <div class="search-container">
      <input
        type="text"
        [(ngModel)]="searchQuery"
        placeholder="Search for parent folders..."
        class="search-input"
      />
      <button class="search-button" (click)="searchFolders()">Search</button>
    </div>
  
    <!-- Parent Folder Cards -->
    <div *ngFor="let parentFolder of filteredData | keyvalue">
      <div class="folder-card">
        <div class="folder-title" (click)="toggleFiles(parentFolder.key)">
          {{ parentFolder.key }}
        </div>
        <div id="{{ parentFolder.key }}" class="file-info" style="display: none;">
          <div *ngFor="let file of parentFolder.value" class="file-item">
            <div class="file-name">
              <h4>Filename</h4>
              <p>{{ file.fileName }}</p>
            </div>
            <div class="folder-name" *ngIf="file.folder !== file.fileName">
              <h4>Folder</h4>
              <p>{{ file.folder }}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
===========
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f9;
    padding: 20px;
  }
  .container {
    max-width: 1200px;
    margin: 0 auto;
  }
  .search-container {
    display: flex;
    margin-bottom: 20px;
  }
  .search-input {
    width: 100%;
    padding: 10px;
    font-size: 1rem;
    border: 1px solid #ccc;
    border-radius: 5px;
    margin-right: 10px;
  }
  .search-button {
    padding: 10px 20px;
    background-color: red;
    color: white;
    border: none;
    border-radius: 5px;
    font-size: 1rem;
    cursor: pointer;
  }
  .search-button:hover {
    background-color: darkred;
  }
  .folder-card {
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    padding: 15px;
  }
  .folder-title {
    font-size: 1.2rem;
    font-weight: bold;
    cursor: pointer;
    margin-bottom: 10px;
    color: #333;
  }
  .file-info {
    display: none;
    padding-left: 20px;
    margin-top: 10px;
  }
  .file-item {
    background-color: #f9f9f9;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
    display: flex;
    justify-content: space-between;
  }
  .file-item .file-name,
  .file-item .folder-name {
    width: 48%;
  }
  .file-item h4 {
    margin: 0 0 5px 0;
    font-size: 1rem;
    color: #555;
  }
  .file-item p {
    margin: 0;
    font-size: 0.9rem;
    color: #777;
  }
  
=================================
from flask import Flask, render_template
import pyodbc
from collections import defaultdict

app = Flask(__name__)

# Database connection setup
def get_db_connection():
    conn = pyodbc.connect(
        'DRIVER={ODBC Driver 17 for SQL Server};'
        'SERVER=AADITYA;'
        'DATABASE=mydb1;'
        'Trusted_Connection=yes;'
    )
    return conn

# Fetch and group data by ParentFolder and Type
def fetch_grouped_data():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT FileName, Folder, ParentFolder, Path FROM FVRelease_eMails_Content")
    rows = cursor.fetchall()
    
    grouped_data = defaultdict(lambda: defaultdict(list))
    for row in rows:
        grouped_data[row.ParentFolder][row.Folder].append({
            'FileName': row.FileName,
            'Path': row.Path
        })

    cursor.close()
    conn.close()
    
    return grouped_data

@app.route('/')
def index():
    # Fetch grouped data from the database
    grouped_data = fetch_grouped_data()
    return render_template('index.html', grouped_data=grouped_data)

if __name__ == '__main__':
    app.run(debug=True)

=====================================
<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Font Awesome Icons Link -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FVRelease Emails Content</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            padding: 20px;
            margin: 0;
        }
        .container {
            max-width: 900px;
            margin: 0 auto;
        }
        .search-container {
            display: flex;
            margin-bottom: 15px;
        }
        .search-input {
            width: 100%;
            padding: 8px;
            font-size: 0.95rem;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-right: 10px;
        }
        .search-button {
            padding: 8px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 0.95rem;
            cursor: pointer;
        }
        .search-button:hover {
            background-color: #0056b3;
        }
        .folder-card {
            background-color: #ffffff;
            border-radius: 6px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin-bottom: 15px;
            padding: 12px;
            display: block;
        }
        .folder-title, .type-title {
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            margin-bottom: 8px;
            color: #333;
            display: flex;
            align-items: center;
        }
        .folder-title i, .type-title i {
            margin-right: 8px;
            color: #007bff;
        }
        .file-info, .type-info {
            display: none;
            padding-left: 20px;
            margin-top: 10px;
        }
        .file-item {
            background-color: #f7f7f7;
            padding: 8px;
            border-radius: 5px;
            margin-bottom: 10px;
            display: flex;
            align-items: flex-start;
            gap: 10px;
        }
        .file-item .file-name {
            flex: 1;
        }
        /* New CSS for file links to look like normal text but change color on hover */
        .file-link {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
        .file-link:hover {
            color: #007bff;
        }

        /* Card hover effect */
        .folder-card:hover {
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
        }
    </style>
    <script>
        function toggleTypes(parentFolderId) {
            var types = document.getElementById("types-" + parentFolderId);
            if (types.style.display === "none") {
                types.style.display = "block"; // Show the type rows
            } else {
                types.style.display = "none"; // Hide the type rows
            }
        }

        function toggleFiles(typeId) {
            var files = document.getElementById("files-" + typeId);
            if (files.style.display === "none") {
                files.style.display = "block"; // Show the file rows
            } else {
                files.style.display = "none"; // Hide the file rows
            }
        }

        function searchFolders() {
            var input, filter, cards, card, folderTitle, fileInfo, typeInfo, fileItem, typeTitle, fileName, i, j, k;
            input = document.getElementById('folderSearch');
            filter = input.value.toUpperCase();
            cards = document.getElementsByClassName('folder-card');

            for (i = 0; i < cards.length; i++) {
                card = cards[i];
                folderTitle = card.getElementsByClassName('folder-title')[0];
                txtValue = folderTitle.textContent || folderTitle.innerText;

                let folderMatch = txtValue.toUpperCase().indexOf(filter) > -1;
                let showCard = folderMatch; // Show card if parent folder matches

                // Check each type within the parent folder
                typeInfo = card.getElementsByClassName('type-info')[0];
                typeItems = typeInfo.getElementsByClassName('type-item');
                for (j = 0; j < typeItems.length; j++) {
                    let typeItem = typeItems[j];
                    typeTitle = typeItem.getElementsByClassName('type-title')[0].textContent || '';

                    let typeMatch = typeTitle.toUpperCase().indexOf(filter) > -1;
                    let showType = typeMatch;

                    // Check each file within the type
                    fileInfo = typeItem.getElementsByClassName('file-info')[0];
                    fileItem = fileInfo.getElementsByClassName('file-item');
                    for (k = 0; k < fileItem.length; k++) {
                        fileName = fileItem[k].getElementsByClassName('file-name')[0].textContent || '';

                        let fileMatch = fileName.toUpperCase().indexOf(filter) > -1;

                        if (fileMatch) {
                            fileItem[k].style.display = ""; // Show the file if it matches
                            showType = true; // Show the type if any file matches
                        } else {
                            fileItem[k].style.display = "none"; // Hide the file if it doesn't match
                        }
                    }

                    if (showType) {
                        typeItem.style.display = ""; // Show the type if it matches or contains matching files
                        showCard = true; // Show the card if any type or file matches
                    } else {
                        typeItem.style.display = "none"; // Hide the type if it doesn't match
                    }
                }

                if (showCard) {
                    card.style.display = ""; // Show the card if any type or file matches
                } else {
                    card.style.display = "none"; // Hide the card if no match is found
                }
            }
        }
    </script>
</head>
<body>
    <div class="container">
        <h1>FVRelease Emails Content</h1>

        <!-- Search Input and Button -->
        <div class="search-container">
            <input
                type="text"
                id="folderSearch"
                placeholder="Search for parent folders, types, or filenames..."
                class="search-input"
            />
            <button class="search-button" onclick="searchFolders()">Search</button>
        </div>

        <!-- Parent Folder Cards -->
        {% for parent_folder, types in grouped_data.items() %}
        <div class="folder-card">
            <div class="folder-title" onclick="toggleTypes('{{ parent_folder }}')">
                <i class="fas fa-folder"></i> <!-- Font Awesome icon -->
                {{ parent_folder }}
            </div>
            <div id="types-{{ parent_folder }}" class="type-info">
                {% for type, files in types.items() %}
                <div class="type-item">
                    <div class="type-title" onclick="toggleFiles('{{ parent_folder }}-{{ type }}')">
                        <i class="fas fa-folder-open"></i> <!-- Font Awesome icon -->
                        {{ type }}
                    </div>
                    <div id="files-{{ parent_folder }}-{{ type }}" class="file-info">
                        {% for file in files %}
                        <div class="file-item">
                            <div class="file-name">
                                <h4>Filename</h4>
                                <p><a href="{{ file.Path }}" class="file-link" target="_blank">{{ file.FileName }}</a></p>
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
        {% endfor %}
    </div>

</body>
</html>

==================with 3 tier -==================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FVRelease Emails Content</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .search-container {
            display: flex;
            margin-bottom: 20px;
        }
        .search-input {
            width: 100%;
            padding: 10px;
            font-size: 1rem;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }
        .search-button {
            padding: 10px 20px;
            background-color: red;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 1rem;
            cursor: pointer;
        }
        .search-button:hover {
            background-color: darkred;
        }
        .folder-card {
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            padding: 15px;
            display: block;
        }
        .folder-title {
            font-size: 1.2rem;
            font-weight: bold;
            cursor: pointer;
            margin-bottom: 10px;
            color: #333;
        }
        .file-info {
            display: none;
            padding-left: 20px;
            margin-top: 10px;
        }
        .file-item {
            background-color: #f9f9f9;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
        }
        .file-item .file-name,
        .file-item .folder-name {
            width: 48%;
        }
        .file-item h4 {
            margin: 0 0 5px 0;
            font-size: 1rem;
            color: #555;
        }
        .file-item p {
            margin: 0;
            font-size: 0.9rem;
            color: #777;
        }
        /* New CSS for file links to look like normal text but change color on hover */
        .file-link {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
        .file-link:hover {
            color: red;
        }
    </style>
    <script>
        function toggleFiles(parentFolderId) {
            var files = document.getElementById(parentFolderId);
            if (files.style.display === "none") {
                files.style.display = "block"; // Show the file rows
            } else {
                files.style.display = "none"; // Hide the file rows
            }
        }

        function searchFolders() {
            var input, filter, cards, card, folderTitle, i, txtValue, fileName, folderName;
            input = document.getElementById('folderSearch');
            filter = input.value.toUpperCase();
            cards = document.getElementsByClassName('folder-card');

            for (i = 0; i < cards.length; i++) {
                card = cards[i];
                folderTitle = card.getElementsByClassName('folder-title')[0];
                fileInfo = card.getElementsByClassName('file-info')[0];
                
                let showCard = false;

                // Check parent folder title
                txtValue = folderTitle.textContent || folderTitle.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    showCard = true;
                }

                // Check within file items
                fileItems = card.getElementsByClassName('file-item');
                for (j = 0; j < fileItems.length; j++) {
                    fileName = fileItems[j].getElementsByClassName('file-name')[0].textContent || '';
                    folderName = fileItems[j].getElementsByClassName('folder-name')[0]?.textContent || '';

                    if (fileName.toUpperCase().indexOf(filter) > -1 || folderName.toUpperCase().indexOf(filter) > -1) {
                        showCard = true;
                        break; // If any file matches, show the card
                    }
                }

                if (showCard) {
                    card.style.display = ""; // Show the card
                } else {
                    card.style.display = "none"; // Hide the card
                }
            }
        }
    </script>
</head>
<body>
    <div class="container">
        <h1>FVRelease Emails Content</h1>

        <!-- Search Input and Button -->
        <div class="search-container">
            <input
                type="text"
                id="folderSearch"
                placeholder="Search for parent folders, filenames, or types..."
                class="search-input"
            />
            <button class="search-button" onclick="searchFolders()">Search</button>
        </div>

        <!-- Parent Folder Cards -->
        {% for parent_folder, files in grouped_data.items() %}
        <div class="folder-card">
            <div class="folder-title" onclick="toggleFiles('{{ parent_folder }}')">
                {{ parent_folder }}
            </div>
            <div id="{{ parent_folder }}" class="file-info">
                {% for file in files %}
                <div class="file-item">
                    <div class="file-name">
                        <h4>Filename</h4>
                        <p><a href="{{ file.Path }}" class="file-link">{{ file.FileName }}</a></p>
                    </div>
                    <div class="folder-name">
                        {% if file.Folder != file.FileName %}
                            <h4>Type</h4>
                            <p>{{ file.Folder }}</p>
                        {% endif %}
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
        {% endfor %}
    </div>
</body>
</html>

-==================================================
from flask import Flask, render_template
import pyodbc
from collections import defaultdict

app = Flask(__name__)

# Database connection setup
def get_db_connection():
    conn = pyodbc.connect(
        'DRIVER={ODBC Driver 17 for SQL Server};'
        'SERVER=AADITYA;'
        'DATABASE=mydb1;'
        'Trusted_Connection=yes;'
    )
    return conn

# Fetch and group data by ParentFolder
def fetch_grouped_data():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT FileName, Folder, ParentFolder, Path FROM FVRelease_eMails_Content")
    rows = cursor.fetchall()
    
    grouped_data = defaultdict(list)
    for row in rows:
        grouped_data[row.ParentFolder].append({
            'FileName': row.FileName,
            'Folder': row.Folder,
            'Path': row.Path
        })

    cursor.close()
    conn.close()
    
    return grouped_data

@app.route('/')
def index():
    # Fetch grouped data from the database
    grouped_data = fetch_grouped_data()
    return render_template('index.html', grouped_data=grouped_data)

if __name__ == '__main__':
    app.run(debug=True)

==================added search and link on filename
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FVRelease Emails Content</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .search-container {
            display: flex;
            margin-bottom: 20px;
        }
        .search-input {
            width: 100%;
            padding: 10px;
            font-size: 1rem;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }
        .search-button {
            padding: 10px 20px;
            background-color: red;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 1rem;
            cursor: pointer;
        }
        .search-button:hover {
            background-color: darkred;
        }
        .folder-card {
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            padding: 15px;
            display: block;
        }
        .folder-title {
            font-size: 1.2rem;
            font-weight: bold;
            cursor: pointer;
            margin-bottom: 10px;
            color: #333;
        }
        .file-info {
            display: none;
            padding-left: 20px;
            margin-top: 10px;
        }
        .file-item {
            background-color: #f9f9f9;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
        }
        .file-item .file-name,
        .file-item .folder-name {
            width: 48%;
        }
        .file-item h4 {
            margin: 0 0 5px 0;
            font-size: 1rem;
            color: #555;
        }
        .file-item p {
            margin: 0;
            font-size: 0.9rem;
            color: #777;
        }
    </style>
    <script>
        function toggleFiles(parentFolderId) {
            var files = document.getElementById(parentFolderId);
            if (files.style.display === "none") {
                files.style.display = "block"; // Show the file rows
            } else {
                files.style.display = "none"; // Hide the file rows
            }
        }

        function searchFolders() {
            var input, filter, cards, card, folderTitle, i, txtValue;
            input = document.getElementById('folderSearch');
            filter = input.value.toUpperCase();
            cards = document.getElementsByClassName('folder-card');

            for (i = 0; i < cards.length; i++) {
                card = cards[i];
                folderTitle = card.getElementsByClassName('folder-title')[0];
                txtValue = folderTitle.textContent || folderTitle.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    card.style.display = ""; // Show the card
                } else {
                    card.style.display = "none"; // Hide the card
                }
            }
        }
    </script>
</head>
<body>
    <div class="container">
        <h1>FVRelease Emails Content</h1>

        <!-- Search Input and Button -->
        <div class="search-container">
            <input
                type="text"
                id="folderSearch"
                placeholder="Search for parent folders..."
                class="search-input"
            />
            <button class="search-button" onclick="searchFolders()">Search</button>
        </div>

        <!-- Parent Folder Cards -->
        {% for parent_folder, files in grouped_data.items() %}
        <div class="folder-card">
            <div class="folder-title" onclick="toggleFiles('{{ parent_folder }}')">
                {{ parent_folder }}
            </div>
            <div id="{{ parent_folder }}" class="file-info">
                {% for file in files %}
                <div class="file-item">
                    <div class="file-name">
                        <h4>Filename</h4>
                        <p>{{ file.FileName }}</p>
                    </div>
                    <div class="folder-name">
                        {% if file.Folder != file.FileName %}
                            <h4>Folder Name</h4>
                            <p>{{ file.Folder }}</p>
                        {% endif %}
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
        {% endfor %}
    </div>
</body>
</html>

==============================side by side folder above ==============
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FVRelease Emails Content</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .search-container {
            display: flex;
            margin-bottom: 20px;
        }
        .search-input {
            width: 50%;
            padding: 10px;
            font-size: 1rem;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }
        .search-button {
            padding: 10px 20px;
            background-color: red;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 1rem;
            cursor: pointer;
        }
        .search-button:hover {
            background-color: darkred;
        }
        .folder-card {
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            padding: 15px;
            display: block;
        }
        .folder-title {
            font-size: 1.2rem;
            font-weight: bold;
            cursor: pointer;
            margin-bottom: 10px;
            color: #333;
        }
        .file-info {
            display: none;
            padding-left: 20px;
            margin-top: 10px;
        }
        .file-item {
            background-color: #f9f9f9;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 10px;
        }
        .file-item h4 {
            margin: 0 0 5px 0;
            font-size: 1rem;
            color: #555;
        }
        .file-item p {
            margin: 0;
            font-size: 0.9rem;
            color: #777;
        }
    </style>
    <script>
        function toggleFiles(parentFolderId) {
            var files = document.getElementById(parentFolderId);
            if (files.style.display === "none") {
                files.style.display = "block"; // Show the file rows
            } else {
                files.style.display = "none"; // Hide the file rows
            }
        }

        function searchFolders() {
            var input, filter, cards, card, folderTitle, i, txtValue;
            input = document.getElementById('folderSearch');
            filter = input.value.toUpperCase();
            cards = document.getElementsByClassName('folder-card');

            for (i = 0; i < cards.length; i++) {
                card = cards[i];
                folderTitle = card.getElementsByClassName('folder-title')[0];
                txtValue = folderTitle.textContent || folderTitle.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    card.style.display = ""; // Show the card
                } else {
                    card.style.display = "none"; // Hide the card
                }
            }
        }
    </script>
</head>
<body>
    <div class="container">
        <h1>FVRelease Emails Content</h1>

        <!-- Search Input and Button -->
        <div class="search-container">
            <input
                type="text"
                id="folderSearch"
                placeholder="Search for parent folders..."
                class="search-input"
            />
            <button class="search-button" onclick="searchFolders()">Search</button>
        </div>

        <!-- Parent Folder Cards -->
        {% for parent_folder, files in grouped_data.items() %}
        <div class="folder-card">
            <div class="folder-title" onclick="toggleFiles('{{ parent_folder }}')">
                {{ parent_folder }}
            </div>
            <div id="{{ parent_folder }}" class="file-info">
                {% for file in files %}
                <div class="file-item">
                    <h4>Filename</h4>
                    <p>{{ file.FileName }}</p>
                    {% if file.Folder != file.FileName %}
                        <h4>Folder Name</h4>
                        <p>{{ file.Folder }}</p>
                    {% endif %}
                </div>
                {% endfor %}
            </div>
        </div>
        {% endfor %}
    </div>
</body>
</html>

===============================================
from flask import Flask, render_template
import pyodbc
from collections import defaultdict

app = Flask(__name__)

# Database connection setup
def get_db_connection():
    conn = pyodbc.connect(
        'DRIVER={ODBC Driver 17 for SQL Server};'
        'SERVER=AADITYA;'
        'DATABASE=mydb1;'
        'Trusted_Connection=yes;'
    )
    return conn

# Fetch and group data by ParentFolder
def fetch_grouped_data():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT FileName, Folder, ParentFolder FROM FVRelease_eMails_Content")
    rows = cursor.fetchall()
    
    grouped_data = defaultdict(list)
    for row in rows:
        grouped_data[row.ParentFolder].append({
            'FileName': row.FileName,
            'Folder': row.Folder
        })

    cursor.close()
    conn.close()
    
    return grouped_data

@app.route('/')
def index():
    # Fetch grouped data from the database
    grouped_data = fetch_grouped_data()
    return render_template('index.html', grouped_data=grouped_data)

if __name__ == '__main__':
    app.run(debug=True)

=============================================16.9=====================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Parent Folder and FileName Dropdown</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }
        
        .container {
            width: 80%;
            margin: 50px auto;
        }

        .card {
            background-color: #fff;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        h1 {
            text-align: center;
            color: #333;
        }

        .folder {
            margin: 20px 0;
            cursor: pointer;
            padding: 10px;
            background-color: #f2f2f2;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .folder:hover {
            background-color: #e0e0e0;
        }

        .dropdown {
            margin: 10px 0;
            display: none; /* Initially hide the dropdown */
        }

        .dropdown select {
            width: 100%;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Parent Folder and FileName Dropdown</h1>

        <div class="card">
            <!-- Loop through Parent Folders and generate dropdowns -->
            {% for parent_folder, file_names in data.items() %}
            <div class="folder" onclick="toggleDropdown('{{ parent_folder }}')">
                {{ parent_folder }}
            </div>
            <div id="{{ parent_folder }}" class="dropdown">
                <select>
                    {% for file_name in file_names %}
                    <option value="{{ file_name }}">{{ file_name }}</option>
                    {% endfor %}
                </select>
            </div>
            {% endfor %}
        </div>
    </div>

    <script>
        // Function to toggle dropdown visibility when Parent Folder is clicked
        function toggleDropdown(folderId) {
            const dropdown = document.getElementById(folderId);
            if (dropdown.style.display === 'none' || dropdown.style.display === '') {
                dropdown.style.display = 'block';
            } else {
                dropdown.style.display = 'none';
            }
        }
    </script>

</body>
</html>

--------------------------------------
import pyodbc
from flask import Flask, render_template, jsonify

# SQL Server Configuration
server = 'ct1abi01.us.abc.com,51009'
database = 'abianalytics'
username = 'abiuser'
password = 'abiuser1'

# Connect to SQL Server
def get_db_connection():
    conn = pyodbc.connect(f'DRIVER={{SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}')
    return conn

# Flask web app
app = Flask(__name__)

# Route to fetch parent folders and their associated filenames
@app.route('/')
def index():
    conn = get_db_connection()
    cursor = conn.cursor()

    # Query to get ParentFolder and FileName
    query = """
    SELECT ParentFolder, FileName 
    FROM FVRelease_eMails
    ORDER BY ParentFolder
    """
    cursor.execute(query)
    rows = cursor.fetchall()
    conn.close()

    # Organize the data into a dictionary: {ParentFolder: [FileNames]}
    data = {}
    for row in rows:
        parent_folder = row.ParentFolder
        file_name = row.FileName
        if parent_folder not in data:
            data[parent_folder] = []
        data[parent_folder].append(file_name)

    return render_template('index.html', data=data)

# Run the Flask web app
if __name__ == '__main__':
    app.run(debug=True)

---------------------new functionality of dropdown above----------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FVRelease_eMails Data</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }
        
        .container {
            width: 80%;
            margin: 50px auto;
        }

        .card {
            background-color: #fff;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        h1 {
            text-align: center;
            color: #333;
        }

        .search-box {
            margin-bottom: 20px;
            display: flex;
            justify-content: center;
        }

        .search-box input[type="text"] {
            width: 300px;
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
            margin-right: 10px;
            outline: none;
        }

        .search-box button {
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
        }

        .search-box button:hover {
            background-color: #218838;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        table th, table td {
            padding: 12px;
            border-bottom: 1px solid #ddd;
            text-align: left;
        }

        table th {
            background-color: #f2f2f2;
            color: #333;
            text-transform: uppercase;
            font-size: 14px;
        }

        table tr:hover {
            background-color: #f1f1f1;
        }

        .footer {
            text-align: center;
            padding: 20px;
            background-color: #333;
            color: #fff;
            position: fixed;
            width: 100%;
            bottom: 0;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>FVRelease_eMails Data</h1>

        <div class="card">
            <!-- Search Form -->
            <div class="search-box">
                <form method="POST">
                    <input type="text" name="search_term" placeholder="Search..." required>
                    <button type="submit">Search</button>
                </form>
            </div>

            <!-- Table to display data -->
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>FileName</th>
                        <th>Folder</th>
                        <th>ParentFolder</th>
                        <th>Path</th>
                    </tr>
                </thead>
                <tbody>
                    {% for row in rows %}
                    <tr>
                        <td>{{ row.ID }}</td>
                        <td>{{ row.FileName }}</td>
                        <td>{{ row.Folder }}</td>
                        <td>{{ row.ParentFolder }}</td>
                        <td>{{ row.Path }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    <div class="footer">
        &copy; 2024 Your Company Name
    </div>

</body>
</html>

======================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FVRelease_eMails Data</title>
</head>
<body>
    <h1>FVRelease_eMails Data</h1>
    
    <!-- Search Form -->
    <form method="POST">
        <input type="text" name="search_term" placeholder="Search..." required>
        <button type="submit">Search</button>
    </form>

    <!-- Table to display data -->
    <table border="1">
        <thead>
            <tr>
                <th>ID</th>
                <th>FileName</th>
                <th>Folder</th>
                <th>ParentFolder</th>
                <th>Path</th>
            </tr>
        </thead>
        <tbody>
            {% for row in rows %}
            <tr>
                <td>{{ row.ID }}</td>
                <td>{{ row.FileName }}</td>
                <td>{{ row.Folder }}</td>
                <td>{{ row.ParentFolder }}</td>
                <td>{{ row.Path }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>

.............................................
import pyodbc
from flask import Flask, render_template, request

# SQL Server Configuration
server = 'ct1abi01.us.abc.com,51009'
database = 'abianalytics'
username = 'abiuser'
password = 'abiuser1'

# Connect to SQL Server
def get_db_connection():
    conn = pyodbc.connect(f'DRIVER={{SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}')
    return conn

# Flask web app
app = Flask(__name__)

# Route to display data and search
@app.route('/', methods=['GET', 'POST'])
def index():
    conn = get_db_connection()
    cursor = conn.cursor()

    query = "SELECT * FROM FVRelease_eMails"
    
    # If there is a search query, modify the query to filter results
    if request.method == 'POST':
        search_term = request.form.get('search_term')
        query = f"SELECT * FROM FVRelease_eMails WHERE FileName LIKE ? OR Folder LIKE ? OR ParentFolder LIKE ? OR Path LIKE ?"
        cursor.execute(query, f'%{search_term}%', f'%{search_term}%', f'%{search_term}%', f'%{search_term}%')
    else:
        cursor.execute(query)

    rows = cursor.fetchall()
    conn.close()

    return render_template('index.html', rows=rows)

# Run the Flask web app
if __name__ == '__main__':
    app.run(debug=True)

==================================
pom file -
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.data</groupId>
    <artifactId>emaildata</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>emaildata</name>
    <description>Email Data Application</description>

    <properties>
        <java.version>17</java.version>
        <spring-boot.version>2.7.0</spring-boot.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Starter JPA for database access -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- SQL Server JDBC Driver -->
        <dependency>
            <groupId>com.microsoft.sqlserver</groupId>
            <artifactId>mssql-jdbc</artifactId>
            <version>9.4.0.jre11</version>
        </dependency>

        <!-- Lombok (Optional) -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Spring Boot DevTools (Optional for fast reload) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Spring Boot Starter Test (For testing) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>


--------------------------------pom over---------------------
entity---------------
package com.data;

import javax.persistence.*;

@Entity
@Table(name = "Fvrelease")
public class FvRelease {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "FileName", length = 255)
    private String fileName;

    @Column(name = "Folder", length = 255)
    private String folder;

    @Column(name = "ParentFolder", length = 255)
    private String parentFolder;

    @Column(name = "Path", length = 255)
    private String path;

    // Getters and setters...
}

---------------------entity over -----------------
repo-
package com.data;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface FvReleaseRepository extends JpaRepository<FvRelease, Long> {
    // Custom search query
    List<FvRelease> findByFileNameContainingOrFolderContainingOrParentFolderContainingOrPathContaining(
        String fileName, String folder, String parentFolder, String path
    );
}

----------------------------
service ---------------
package com.data;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class FvReleaseService {

    @Autowired
    private FvReleaseRepository fvReleaseRepository;

    public List<FvRelease> getAllReleases() {
        return fvReleaseRepository.findAll();
    }

    public List<FvRelease> searchReleases(String query) {
        return fvReleaseRepository.findByFileNameContainingOrFolderContainingOrParentFolderContainingOrPathContaining(
            query, query, query, query);
    }
}


-----------------------------controller--------
package com.data;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/fvrelease")
@CrossOrigin(origins = "*")
public class FvReleaseController {

    @Autowired
    private FvReleaseService fvReleaseService;

    @GetMapping
    public List<FvRelease> getAllReleases() {
        return fvReleaseService.getAllReleases();
    }

    @GetMapping("/search")
    public List<FvRelease> searchReleases(@RequestParam("q") String query) {
        return fvReleaseService.searchReleases(query);
    }
}



===============================================const express = require('express');
const sql = require('mssql');
const cors = require('cors');
const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Database configuration
const config = {
    user: 'abiuser',
    password: 'abiuser1',
    server: 'ct1abi01.us.abc.com',
    port: 51009,
    database: 'abianalytics',
    options: {
        encrypt: false, // adjust if needed for your environment
        enableArithAbort: true
    }
};

// Fetch all data from Fvrelease table
app.get('/fvrelease', async (req, res) => {
    try {
        let pool = await sql.connect(config);
        let result = await pool.request().query('SELECT * FROM Fvrelease');
        res.json(result.recordset);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

// Search data from Fvrelease table
app.get('/fvrelease/search', async (req, res) => {
    const searchTerm = req.query.q;
    try {
        let pool = await sql.connect(config);
        let result = await pool.request()
            .input('searchTerm', sql.VarChar, `%${searchTerm}%`)
            .query(`SELECT * FROM Fvrelease WHERE 
                    column1 LIKE @searchTerm OR 
                    column2 LIKE @searchTerm OR 
                    column3 LIKE @searchTerm`);  // Update with actual column names
        res.json(result.recordset);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

app.listen(3000, () => {
    console.log('Server running on port 3000');
});

=-==================================
<div class="two-columns">
    <div class="column">
      <!-- First Card in the First Row -->
      <a href="https://example.com" class="card-link">
        <div class="card">
            <h2>Card 1 Header</h2>
            <h3>main  migrate</h3>
          <img src="/assets/11.jpg" alt="Card Image 1">
          
        </div>
      </a>
  
      <!-- Second Card in the Second Row -->
      <a href="https://example.com" class="card-link">
        <div class="card">
            <h2>Card 1 Header</h2>
            <h3>main  migrate</h3>
          <img src="/assets/12.jpg" alt="Card Image 2">
          
        </div>
      </a>
    </div>
  
    <div class="column">
     <!-- Content for the second column -->
       <!--<p>Calendar management details.</p>-->
      <div class="iframe-container">
        <iframe src="https://www.codepel.com/vanilla-javascript/simple-javascript-calendar-with-events/"  style="width: 100%;
        height: 31em"></iframe>
      </div>
    </div>
  </div>
  ........................................................................................................................
/* Container for two columns */
.two-columns {
    display: flex;  /* Display columns side by side */
    margin-left: 10%;
    margin-right: 10%;
  }
  
  /* Each column takes up equal width */
  .column {
    flex: 1;  /* Each column takes up equal space */
    padding: 10px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    box-sizing: border-box;  /* Ensure padding is included within the height and width */
    
  }
  
  /* Styling for the clickable card links */
  .card-link {
    text-decoration: none;
    
    color: inherit;  /* Inherit text color */
    display: block;  /* Make the entire card clickable */
    margin-bottom: 10px;  /* Space between the cards */
    flex: 1;  /* Allow cards to grow and fill the available space */
  }
  
  /* Card styling */
  .card {
    background-color: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    text-align: center;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
    justify-content: center;
     /* Ensure the card takes up the full height of its container */
  }
  
  /* Card hover effect */
  .card:hover {
    transform: scale(1.05);  /* Slightly enlarge the card */
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);  /* Slightly deeper shadow on hover */
  }
  
  /* Image styling */
  .card img {
    width: 100%;
    height: 7em;
    border-radius: 8px;
    margin-bottom: 15px;
  
  }
  
  /* Header inside the card */
  .card h2 {
    margin: 0;
    font-size: 1.25rem;
    
  }

-------------------------------------------------------------------
package com.example.emailsearch.service;

import javax.mail.*;
import javax.mail.search.SubjectTerm;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.springframework.stereotype.Service;

@Service
public class EmailSearchService {

    // Modify with your host and shared mailbox details
    private final String host = "imap.yourcompany.com"; // Your IMAP host (Exchange or Office 365)
    private final String user = "your-email@corporate.com"; // Your email
    private final String password = "your-password"; // Your password
    private final String sharedMailbox = "sharedmailbox@corporate.com"; // Shared mailbox email

    public List<String> searchSharedFolderEmails(String searchTerm) throws Exception {
        List<String> emails = new ArrayList<>();

        // Setup IMAP properties for connection
        Properties properties = new Properties();
        properties.put("mail.store.protocol", "imaps");

        // Create IMAP session and connect
        Session session = Session.getInstance(properties, null);
        Store store = session.getStore();
        store.connect(host, user, password);

        // Access the shared mailbox folder
        Folder sharedFolder = store.getFolder("sharedmailbox@corporate.com/INBOX"); // Access shared folder
        sharedFolder.open(Folder.READ_ONLY);

        // Search for emails with the specified subject
        Message[] messages = sharedFolder.search(new SubjectTerm(searchTerm));
        for (Message message : messages) {
            emails.add("Subject: " + message.getSubject() + ", From: " + message.getFrom()[0]);
        }

        // Close the folder and store connections
        sharedFolder.close(false);
        store.close();

        return emails;
    }
}


  .iframe-container {
    
  }

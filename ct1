<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Network Graph using D3</title>
  <div id="tooltip" style="position: absolute; display: none; padding: 10px; background-color: lightgray; pointer-events: none;"></div>

  <script src="https://d3js.org/d3.v6.min.js"></script>
  <style>
    .node { cursor: pointer; }
    .link { stroke: #999; stroke-opacity: 0.6; }
  </style>
</head>
<body>
  <div id="info" style="padding: 10px; background-color: lightgray; display: none;"></div>
  <script>
    // Width and height of the SVG
    const width = 800;
    const height = 600;

    // Create an SVG container
    const svg = d3.select("body")
      .append("svg")
      .attr("width", width)
      .attr("height", height);

    // Fetch data from the API
    async function fetchData() {
      const response = await fetch("https://jsonplaceholder.typicode.com/users");
      const users = await response.json();

      // Convert the fetched data into a suitable format for the network graph
      const data = {
        nodes: users.map(user => ({ id: user.id, name: user.name })),
        links: users.slice(1).map((user, index) => ({ source: index, target: index + 1, value: 1 }))
      };

      createGraph(data);
    }

    function createGraph(data) {
  // Set up the force simulation
  const simulation = d3.forceSimulation(data.nodes)
    .force("charge", d3.forceManyBody().strength(-200))
    .force("center", d3.forceCenter(width / 2, height / 2))
    .force("link", d3.forceLink(data.links).distance(100))
    .force("collision", d3.forceCollide(30))
    .on("tick", ticked);

  // Create the link elements
  const link = svg.append("g")
    .attr("class", "links")
    .selectAll("line")
    .data(data.links)
    .enter()
    .append("line")
    .attr("class", "link")
    .attr("stroke-width", d => Math.sqrt(d.value));

  // Create the node elements
  const node = svg.append("g")
    .attr("class", "nodes")
    .selectAll("circle")
    .data(data.nodes)
    .enter()
    .append("circle")
    .attr("class", "node")
    .attr("r", 20)
    .attr("fill", "blue")
    .on("click", function(event, d) {
      // Show additional data when a node is clicked
      const tooltip = d3.select("#tooltip");
      tooltip.html(`<p>ID: ${d.id}</p><p>Name: ${d.name}</p>`);
      tooltip.style("display", "block");
      tooltip.style("left", (event.pageX + 10) + "px");
      tooltip.style("top", (event.pageY - 10) + "px");
    })
    .call(drag(simulation));

  // Update the positions of the nodes and links during the simulation
  function ticked() {
    link
      .attr("x1", d => d.source.x)
      .attr("y1", d => d.source.y)
      .attr("x2", d => d.target.x)
      .attr("y2", d => d.target.y);

    node
      .attr("cx", d => d.x)
      .attr("cy", d => d.y);
  }
}

    // Drag behavior for nodes
    function drag(simulation) {
      function dragstarted(event) {
        if (!event.active) simulation.alphaTarget(0.3).restart();
        event.subject.fx = event.subject.x;
        event.subject.fy = event.subject.y;
      }

      function dragged(event) {
        event.subject.fx = event.x;
        event.subject.fy = event.y;
      }

      function dragended(event) {
        if (!event.active) simulation.alphaTarget(0);
        event.subject.fx = null;
        event.subject.fy = null;
      }

      return d3.drag()
        .on("start", dragstarted)
        .on("drag", dragged)
        .on("end", dragended);
    }

    // Call fetchData to start the graph creation
    fetchData();
  </script>
</body>
</html>

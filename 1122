html
reporting.component.html

  <div class="header">
    Disruption Reporting
  </div>
  
  <div class="dropdown-container-month">
    <label class="dropdown-label" for="month">Month:</label>
   
    <select class="dropdown" name="month" id="month" (change)="onMonthChange($event.target['value'])">
        <option value="">Select Month</option>
        <option value="june">June</option>
        <option value="july">July</option>
    </select>
    
  </div>
  <div class="table1-container">
  <table class="table1">
    <thead class="header1">
      <tr>
        <th>LOB</th>
        <th>Enterprise Issue</th>              
        <th>Business Analyst</th>
        <th>Present in Business Tracker</th>
        <th>Incident</th>
        <th>Issue Description</th>
        <th>Incident Start Datetime</th>
        <th>Incident End Datetime</th>
        <th>Incident Priority</th>
        <th>AnyChildIssues</th>
        <th>Business Area Impacted</th>
        <th>Business Impact</th>
        <th>External Impact</th>
        <th>Impacted Apps</th>
        <th>Disruption Hours</th>
        <th>BA Support Time</th>
        <th>Annuity</th>
        <th>Annuity Overtime</th>
        <th>Annuity Business Lost Production</th>
        <th>Life</th>
        <th>Problem</th>
        <th>MTRS Hours</th>
        <th>Comments</th>

      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let row of data">
        <td>{{row.lob}}</td>
        <td>{{row.enterpriseIssue}}</td>
        <td>{{row.businessAnalyst}}</td>
        <td>{{row.presentInBusinessTracker}}</td>
        <td>{{row.incident}}</td>
        <td>{{row.issueDescription}}</td>
        <td>{{row.incidentStartDatetime}}</td>
        <td>{{row.incidentEndDatetime}}</td>
        <td>{{row.incidentPriority}}</td>
        <td>{{row.anyChildIssues}}</td>
        <td>{{row.businessAreaImpacted}}</td>
        <td>{{row.businessImpact}}</td>
        <td>{{row.externalImpact}}</td>
        <td>{{row.impactedApps}}</td>
        <td>{{row.disruptionHours}}</td>
        <td>{{row.baSupportTime}}</td>
        <td>{{row.annuity}}</td>
        <td>{{row.annuityOvertime}}</td>
        <td>{{row.annuityBusinessLostProduction}}</td>
        <td>{{row.life}}</td>
        <td>{{row.problem}}</td>
        <td>{{row.mtrsHours}}</td>
        <td>{{row.comments}}</td>
        <td>{{row.month}}</td>

      </tr>
    </tbody>
  </table>
  </div>

 
   <div class="form-container">
     <form action="/submit" method="post">
            <!--section2 Business Analyst-->
          <fieldset class="section2fieldset">
             <legend>
                <h3 style="font-size: 14px;">Business Analyst</h3>
             </legend>
          </fieldset>

          <table class="section2businessAnalyst">
             <tr>
                <td class="balabel">Name</td>
                <td class="bainput"><input type="text" placeholder="Enter Name..." style="width:50%;"></td>
                <td class="balabel">BA LOB:</td>
                <td >
                
                    <select style="width: 46%;" id="section2businessAnalyst" name="businessanalystdd">
                        <option value="Annuity">Annuity</option>
                        <option value="Life">Life</option>
                        <option value="ps">PS</option>
                        
                    </select></td>
             </tr>
          </table>

          <!--section4 Business Impact Analysis-->
          <fieldset class="section3fieldset">
            <legend>
               <h3 style="font-size: 14px;">Ticket Information</h3>
            </legend>
         </fieldset>

         <table class="section3ticketinformation">
            <tr style="padding-bottom: 15px;">
               <td class="ticketlabel">Any Existing SNOW ?</td>
               <td class="ticketinput"><input type="checkbox" style="width:20%;"></td>

               <td class="ticketlabel">Enterprise Issue</td>
               <td class="ticketinput"><input type="checkbox" ></td>

               <td class="ticketlabel">Ticket Type</td>
               <td >
                
                <select id="section3ticketdd" name="ticketdd">
                    <option value="incidentnumber">Incident Number</option>
                    <option value="ritm">RITM</option>
                    <option value="pswr">PSWR</option>
                    <option value="rps">RPS</option>
                </select></td>
               
            </tr>
            <!--row2--><br>
            <tr style="padding-bottom: 15px;">
                
                <td class="ticketlabel">Ticket Number</td>
                <td class="ticketinput"><input type="text" ></td>
 
                <td class="ticketlabel">Priority</td>
                <td >
                 
                 <select id="section3ticketdd" name="ticketdd" style="width: 74%;">
                     <option value="incidentnumber" >Critical</option>
                     <option value="ritm">High</option>
                     <option value="pswr">Medium</option>
                     <option value="rps">Low</option>
                 </select>
                </td>

                <td class="ticketlabel">Start Datetime</td>
                <td> <input type="datetime-local" style="width: 50%;"></td>
                
            </tr>
            <br>
            <tr style="padding-bottom: 15px;">
                <td class="ticketlabel" >End Datetime</td>
                <td> <input type="datetime-local" style="width: 50%;"></td>

                <td class="ticketlabel">Issue Description</td>
                <td class="ticketinput"><input type="text" style="width:253%; height: 50px;"></td>
                                        
             </tr>
             <br>
             <!--row4-->
             <tr style="padding-bottom: 15px;">
                <td class="ticketlabel">Any Child Ticket?</td>
                <td> <input type="checkbox" style="width: 20px;"></td>

                <td class="ticketlabel">List Child Issue</td>
                <td class="ticketinput"><input type="text" style="width:253%; "></td>
                                        
             </tr>
         </table>


         <!--section5 Problem-->
         <fieldset class="section4fieldset">
            <legend>
               <h3 style="font-size: 14px;">Business Impact Analysis</h3>
            </legend>
         </fieldset>

         <table class="section4bia">
            <tr style="height:50%;">
               <td class="bialabel">Business Area Impacted</td>
               <td class="biainput"><input type="text" style="height:50%;"></td>

               <td class="bialabel">Business Impact</td>
               <td class="biainput"><input type="text" style="height:50%;"></td>

               <td class="bialabel">External Impact</td>
               <td class="biainput"><input type="text" style="height:50%;"></td>

             
               
            </tr>
            <!--row2--><br>
            <tr style="height:50%;">
                <td class="bialabel">Impacted Apps</td>
                <td class="biainput"><input type="text" style="height:50%;"></td>
 
                <td class="bialabel">Overtime</td>
                <td class="biainput"><input type="text" style="height:50%;"></td>
 
                <td class="bialabel">Business Lost Production</td>
                <td class="biainput"><input type="text" style="height:50%;"></td>
 
              
                
             </tr>


             <tr>
                <td class="bialabel" for="enablefields1">Annuity</td>
                <td class="biainput"><input type="checkbox" [checked]="isCheckedOption1" name="enableFields1" style="width:20px"/></td>
                 
                <td class="bialabel" for="enablefields1">Overtime</td>
                <td class="biainput"><input type="text" [disabled]="!isCheckedOption1"/></td>
             
                <td class="bialabel" for="enablefields1">Business Lost Production</td>
                <td class="biainput"><input type="text" [disabled]="!isCheckedOption1"/></td>
             
            
            </tr>
            
            <tr>
                <td class="bialabel" for="enablefields1">Life</td>
                <td class="biainput"><input type="checkbox" [checked]="isCheckedOption1" name="enableFields1" style="width:20px"/></td>
                 
                <td class="bialabel" for="enablefields1">Overtime</td>
                <td class="biainput"><input type="text" [disabled]="!isCheckedOption1"/></td>
             
                <td class="bialabel" for="enablefields1">Business Lost Production</td>
                <td class="biainput"><input type="text" [disabled]="!isCheckedOption1"/></td>
             
            
            </tr>
            <tr>
                <td class="bialabel" for="enablefields1">PS</td>
                <td class="biainput"><input type="checkbox" [checked]="isCheckedOption1" name="enableFields1" style="width:20px"/></td>
                 
                <td class="bialabel" for="enablefields1">Overtime</td>
                <td class="biainput"><input type="text" [disabled]="!isCheckedOption1"/></td>
             
                <td class="bialabel" for="enablefields1">Business Lost Production</td>
                <td class="biainput"><input type="text" [disabled]="!isCheckedOption1"/></td>
             
            
            </tr>
         
         </table>

            <!--section5 Problem-->
            <fieldset class="section5fieldset">
                <legend>
                   <h3 style="font-size: 14px;">Problem</h3>
                </legend>
             </fieldset>
    
             <table class="section5p">
                <tr >
                   <td class="plabel">Problem</td>
                   <td class="pinput"><input type="text" ></td>
                   <td class="plabel">Root Cause</td>
                   <td class="pinput"><input type="text" ></td>
                   <td class="plabel">Root Cause Subcategory</td>
                   <td class="pinput"><input type="text" ></td>
                   <td class="plabel">MTRS Hours</td>
                   <td class="pinput"><input type="text" ></td>
    
                 
                   
                </tr>
               
               
             
             </table>

             <table class="last3">
                <tr>
                    <td class="lastlabel" style="width:10%">Long Term Solution</td>
                    <td class="lastinput"><input type="text" style="width:95%"/></td>
                </tr>

                <tr>
                    <td class="lastlabel" style="width:10%">Change/Release Details</td>
                    <td class="lastinput"><input type="text" style="width:95%"/></td>
                </tr>

                <tr>
                    <td class="lastlabel" style="width:10%">Comments</td>
                    <td class="lastinput"><input type="text" style="width:95%"/></td>
                </tr>
               </table>

     </form>
   </div>
  
  css

  
  .header {
    width: 100%;
    height: 25%;
    background-color: red;
    font-family: 'Roboto', sans-serif;
    font-size: 16px;
    color: black;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 10px; 
    align-items: center; /* Centers text vertically */
    
}

.dropdown-container-month {
    text-align: right; /* Aligns the content to the right */
    padding: 10px;
}
.dropdown-label {
    font-family: 'Roboto', sans-serif;
    font-size: 12px;
    color: black;
    display: inline; /* Keeps label and select on the same line */
}
.dropdown {
    font-family: 'Roboto', sans-serif;
    font-size: 12px;
}
.table1-container{
    
        width: 100%; /* or any fixed width you want */
        overflow-x: auto; /* enables horizontal scrolling */
      
      
    
}
.table1 {
    width: 100%;
    border-collapse: collapse;
    overflow-x: auto;
  }
  .table1 th, .table1 td {
    border: 1px solid black;
    padding: 8px;
    text-align: left; /* Align text to the left in header cells */
  }
  
  .table1 .header1 {
    background-color: blue; /* Background color for header row */
  }
  
  .table1 tbody tr:nth-child(even) {
    background-color: darkgrey; /* Background color for even rows */
  }
  
  .table1 tbody tr:nth-child(odd) {
    background-color: yellow; /* Background color for odd rows */
  }

  .section2fieldset {
    border:none;
    border-top: 1px solid blue
  }
  
  .section2businessAnalyst {
    width: 100%;
  }
  .balabel {
    width:16%;
    text-align: right;
    padding-right: 10px;
  }
  .bainput {
    width:32.9%
  }

  .section3fieldset {
    border:none;
    border-top: 1px solid blue
  }
  .section3ticketinformation {
    width: 100%;
  }
  .section3ticketinformation td{
    width: 16%;
  }
 
  .ticketlabel{
    text-align: right;
  }

  .ticketinput{
    text-align: left;
  }

  .section4fieldset {
    border:none;
    border-top: 1px solid blue
  }
  .section4bia {
    width: 100%;
  }
  .bialabel{
    text-align: right;
  }
  .biainpur {
    text-align: left;
  }

  .section5fieldset {
    border:none;
    border-top: 1px solid blue
  }
  .section5p {
    width: 100%;
  }
  .section5p th, .section5p td{
    padding:10px;
    width: 8.66%
  }

  .plabel{
    text-align: right;
  }
  .pinput {
    text-align: left;
  }

  .last3 {
    width: 100%;
  }
 
  .lastlabel{
    text-align: right;
    
  }
  .lastinput{
    text-align: left;
    
  }

  .ts
  import { Component, OnInit } from '@angular/core';
import { DataService } from '../reporting-data.service';

@Component({
  selector: 'app-reporting',
  templateUrl: './reporting.component.html',
  styleUrls: ['./reporting.component.css']
})

export class ReportingComponent implements OnInit {

  allData: any[] = []; // Store all data here
  data: any[] = []; // This will be filtered according to the selected month

  constructor(private dataService: DataService) { }

  ngOnInit(): void {
    this.dataService.fetchData().subscribe(response => {
      this.allData = response; // Store all the data here
      this.data = []; // Start with no data until a month is selected
    });
  }

  onMonthChange(selectedMonth: string): void {
    if (selectedMonth) {
      // Filter the data according to the selected month
      this.data = this.allData.filter(row => row.month.toLowerCase() === selectedMonth.toLowerCase());
    } else {
      // If no month is selected, set the data to an empty array
      this.data = [];
    }
  }

  selected = [{id:1, name: "option1"}];
  selectedOption: string;
  isCheckedOption1 = false;
  onOptionChange(){
    this.isCheckedOption1 = this.selectedOption==='option1';
  }
}
service

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class DataService {

  private endpoint = 'http://localhost:8081/api/users';

  constructor(private http: HttpClient) { }

  fetchData(): Observable<any[]> {
    return this.http.get<any[]>(this.endpoint);
  }
}

webconfig
package com.example.demo.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("/**")
                .allowedMethods("GET", "POST", "PUT", "DELETE")
                .allowedHeaders("*")
                .allowCredentials(true);
    }
}


package com.example.demo.controller;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import com.example.demo.entity.AppUser;
import com.example.demo.service.UserService;
import org.springframework.web.bind.annotation.CrossOrigin;

import java.util.List;
@CrossOrigin(origins = "*")
@RestController
public class UserController {
    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/api/user")
    public AppUser saveUser(@RequestBody AppUser user) {
        
            System.out.println("Received user data: " + user);
        return userService.saveUser(user);
    }

     @GetMapping("api/users")
    public ResponseEntity<List<AppUser>> getAllUsers() {
        List<AppUser> appUsers = userService.getAllUsers();
        System.out.println("Fetched user data: " + appUsers);
        return new ResponseEntity<>(appUsers, HttpStatus.OK);
    }

    /* mvn spring-boot:run
    @GetMapping("api/users/{startId}/{endId}")
    public ResponseEntity<List<AppUser>> getUsersInRange(@PathVariable Long startId, @PathVariable Long endId) {
        List<AppUser> appUsers = userService.getUsersInRange(startId, endId);
        System.out.println("Fetched user data: " + appUsers);
        return new ResponseEntity<>(appUsers, HttpStatus.OK);
    }
    @GetMapping("/api/users/month/{month}")
    public ResponseEntity<List<AppUser>> getUsersByMonth(@PathVariable String month) {
        List<AppUser> appUsers = userService.getUsersByMonth(month);
        System.out.println("Fetched user data for month: " + month + ", Data: " + appUsers);
        return new ResponseEntity<>(appUsers, HttpStatus.OK);
    }
  
        @PutMapping("/api/user/{id}")
public ResponseEntity<AppUser> updateUser(@PathVariable Long id, @RequestBody AppUser updatedUser) {
    AppUser existingUser = userService.getUserById(id);
    if (existingUser != null) {
        existingUser.setName(updatedUser.getName());
        existingUser.setNumber(updatedUser.getNumber());
        
        userService.saveUser(existingUser);
        return new ResponseEntity<>(existingUser, HttpStatus.OK);
    } else {
        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
}*/

} 


app.user
package com.example.demo.entity;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

import java.time.LocalDateTime;

import javax.persistence.Column;
import lombok.Data;
import javax.persistence.Table;
@Data
@Entity
@Table(name = "TrackerMaster", schema = "dbo")

public class AppUser {
    @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
    
    private Long id;
    
      @Column(name = "LOB")
    private String lob;

    @Column(name = "[Enterprise Issue]")
    private String enterpriseIssue;

    @Column(name = "[Business Analyst]")
    private String businessAnalyst;

    @Column(name = "[Present in Business Tracker]")
    private String presentInBusinessTracker;

    @Column(name = "Incident")
    private String incident;

    @Column(name = "[Issue Description]")
    private String issueDescription;

    @Column(name = "[Incident Start Datetime]")
    private LocalDateTime incidentStartDatetime;

    @Column(name = "[Incident End Datetime]")
    private LocalDateTime incidentEndDatetime;

    @Column(name = "[Incident Priority]")
    private String incidentPriority;

    @Column(name = "[AnyChildIssues]")
    private String anyChildIssues;

    @Column(name = "[Business Area Impacted]")
    private String businessAreaImpacted;

    @Column(name = "[Business Impact]")
    private String businessImpact;

    @Column(name = "[External Impact]")
    private String externalImpact;

    @Column(name = "[Impacted Apps]")
    private String impactedApps;

    @Column(name = "[Disruption Hours]")
    private Integer disruptionHours;

    @Column(name = "[BA Support Time]")
    private Integer baSupportTime;

    @Column(name = "[Annuity]")
    private String annuity;

    @Column(name = "[Annuity Overtime]")
    private String annuityOvertime;

    @Column(name = "[Annuity Business Lost Production]")
    private String annuityBusinessLostProduction;

    @Column(name = "[Life]")
    private String life;

    @Column(name = "[Problem]")
    private String problem;

    @Column(name = "[MTRS Hours]")
    private Integer mtrsHours;

    @Column(name = "[Comments]")
    private String comments;
    @Column(name = "[month]")
    private String month;

}
userrepo
package com.example.demo.repository;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.example.demo.entity.AppUser;
import java.util.List;


public interface UserRepository extends JpaRepository<AppUser, Long> {
    @Query(value = "SELECT * FROM TrackerMaster", nativeQuery = true)
    List<AppUser> findAllAppUsers();
}

userservice
package com.example.demo.service;
import org.springframework.stereotype.Service;
import com.example.demo.entity.AppUser;
import com.example.demo.repository.UserRepository;
import java.util.List;

@Service
public class UserService {
    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public AppUser saveUser(AppUser user) {
        return userRepository.save(user);
    }
    public List<AppUser> getAllUsers() {
        return userRepository.findAll();
    }
    
 

    
}


demoapp
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@SpringBootApplication
public class DemoApplication {

	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}
 @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**").allowedOrigins("http://localhost:4200");
            }
        };
    }
}


app.pro

spring.datasource.url=jdbc:sqlserver://AADITYA;databaseName=mydb1;integratedSecurity=true
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver


spring.jpa.hibernate.ddl-auto=none
server.port=8081
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServerDialect
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

pom
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>demo</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
	
	<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.20</version>
    <scope>provided</scope>
</dependency>


<dependency>
    <groupId>com.microsoft.sqlserver</groupId>
    <artifactId>mssql-jdbc</artifactId>
    <version>8.4.1.jre11</version>
</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <version>3.0.0-M5</version>
</plugin>
			<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.8.1</version>
    <configuration>
        <source>11</source>
        <target>11</target>
    </configuration>
</plugin>

		</plugins>
	</build>

</project>

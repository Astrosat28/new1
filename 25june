import os
import logging
from bs4 import BeautifulSoup

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Function to parse and extract information from HTML content
def extract_information_from_html(content):
    soup = BeautifulSoup(content, 'html.parser')
    logging.debug("Raw HTML Content Loaded")
    
    table = soup.find('table')
    if not table:
        logging.error("No table found in the HTML content")
        return {'main': {}, 'status_updates': []}
    
    extracted_data = {
        'main': {},
        'status_updates': []
    }
    
    rows = table.find_all('tr')
    logging.debug(f"Found {len(rows)} rows in the table")

    keys = ["PriorityIncidentNumber", "IncidentDescription", "LineOfBusiness", "BusinessImpact", "OnlineBatch"]
    headers = ["CurrentStatus", "DateTime", "StatusUpdates"]
    current_status_update = {}

    skip_next_row = False

    for i, row in enumerate(rows):
        cells = row.find_all('td')
        logging.debug(f"Found {len(cells)} cells in the row")

        if skip_next_row:
            skip_next_row = False
            if len(cells) == 3:
                current_status_update["CurrentStatus"] = cells[0].get_text(strip=True)
                current_status_update["DateTime"] = cells[1].get_text(strip=True)
                current_status_update["StatusUpdates"] = cells[2].get_text(strip=True)
                extracted_data['status_updates'].append(current_status_update)
                current_status_update = {}
            continue

        if len(cells) == 2:
            key = cells[0].get_text(strip=True).replace(" ", "").replace("&", "And")
            value = cells[1].get_text(strip=True)
            logging.debug(f"Key: {key}, Value: {value}")
            if key in keys:
                extracted_data['main'][key] = value
            elif key in headers:
                skip_next_row = True

    logging.debug(f"Extracted Data: {extracted_data}")
    return extracted_data

# Function to read HTML file and extract data
def process_html_file(file_path):
    with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
        content = file.read()
        data = extract_information_from_html(content)
        logging.info(f"Main Data: {data['main']}")
        logging.info(f"Status Updates: {data['status_updates']}")

# Main execution
if __name__ == "__main__":
    file_path = 'htmltable.html'
    process_html_file(file_path)

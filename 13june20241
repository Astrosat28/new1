import win32com.client
from bs4 import BeautifulSoup
import os
import re
import subprocess
import logging

# Setup logging
logging.basicConfig(filename='email_processing.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Directory to save email contents
save_folder = "unread_emails"

# Function to extract and save unread emails
def extract_unread_emails():
    try:
        # Connect to Outlook
        outlook = win32com.client.Dispatch("Outlook.Application")
        mapi = outlook.GetNamespace("MAPI")

        # Access the inbox
        inbox = mapi.GetDefaultFolder(6)  # 6 refers to the inbox folder
        messages = inbox.Items
        messages = messages.Restrict("[Unread] = true")

        if messages.Count == 0:
            logging.info("No unread emails found.")
            print("No unread emails found.")
            return

        if not os.path.exists(save_folder):
            os.makedirs(save_folder)

        # Iterate through unread emails
        for message in messages:
            try:
                subject = message.Subject
                sender = message.SenderName
                received_time = message.ReceivedTime
                body = message.Body
                html_body = message.HTMLBody

                # Log email details
                logging.info(f"Processing email from {sender} with subject: {subject}")

                # Save email details to a file
                safe_subject = "".join([c for c in subject if c.isalpha() or c.isdigit() or c==' ']).rstrip()
                file_path = os.path.join(save_folder, f"{safe_subject}.txt")
                with open(file_path, "w", encoding="utf-8") as file:
                    file.write(f"Subject: {subject}\n")
                    file.write(f"Sender: {sender}\n")
                    file.write(f"Received: {received_time}\n")
                    file.write(f"Body: {body}\n")
                    file.write(f"HTML Body: {html_body}\n")

                # Mark email as read
                message.Unread = False

            except Exception as e:
                logging.error(f"Error processing email: {e}")

        # Open the folder after processing
        subprocess.Popen(f'explorer "{os.path.abspath(save_folder)}"')

    except Exception as e:
        logging.error(f"Error: {e}")
        print(f"Error: {e}")

# Function to parse and extract the required information from email content
def extract_information(file_content):
    patterns = {
        "Priority": r"Priority & Incident Number\s*([^\n]+)",
        "Incident Number": r"Priority & Incident Number\s*[^\n]+\s*(\S+)",
        "Incident Description": r"Incident Description \(What happened\?\)\s*([^\n]+)",
        "Line and Application Affected": r"Line and Application Affected\s*([^\n]+)",
        "Impact on B": r"Impact on B\s*([\s\S]+?)(?:Online/Batch|Current Status)",
        "Online/Batch": r"Online/Batch\s*([^\n]+)",
        "Current Status": r"Current Status\s*([^\n]+)",
        "Date & Time": r"Date & Time\s*([^\n]+)",
        "Status Updates": r"Status Updates\s*([^\n]+)"
    }
    
    extracted_info = {}
    for key, pattern in patterns.items():
        match = re.search(pattern, file_content, re.DOTALL)
        if match:
            extracted_info[key] = match.group(1).strip()
        else:
            extracted_info[key] = "N/A"
    
    return extracted_info

# Function to process saved email files and extract information
def process_saved_emails():
    for filename in os.listdir(save_folder):
        if filename.endswith(".txt"):
            file_path = os.path.join(save_folder, filename)
            with open(file_path, "r", encoding="utf-8") as file:
                content = file.read()
                extracted_info = extract_information(content)
                print(f"File: {filename}")
                print(f"Priority: {extracted_info['Priority']}")
                print(f"Incident Number: {extracted_info['Incident Number']}")
                print(f"Incident Description: {extracted_info['Incident Description']}")
                print(f"Line and Application Affected: {extracted_info['Line and Application Affected']}")
                print(f"Impact on B: {extracted_info['Impact on B']}")
                print(f"Online/Batch: {extracted_info['Online/Batch']}")
                print(f"Current Status: {extracted_info['Current Status']}")
                print(f"Date & Time: {extracted_info['Date & Time']}")
                print(f"Status Updates: {extracted_info['Status Updates']}")
                print("\n")

# Extract unread emails
extract_unread_emails()

# Process saved emails and extract information
process_saved_emails()
